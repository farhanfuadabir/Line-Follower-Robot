
LFR_AVR_basic_PID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bb8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000bb8  00000c4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  00800068  00800068  00000c54  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e25  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004ed  00000000  00000000  00001c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000767  00000000  00000000  0000216a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d8  00000000  00000000  000028d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ea  00000000  00000000  00002cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000550  00000000  00000000  00003196  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000036e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 1b 03 	jmp	0x636	; 0x636 <__vector_1>
   8:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__vector_2>
   c:	0c 94 99 03 	jmp	0x732	; 0x732 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 ff 03 	jmp	0x7fe	; 0x7fe <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 38       	cpi	r26, 0x8C	; 140
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <main>
  8a:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <adc_init>:
#include "ADC_routine.h"
#include "serial_lib.h"

void adc_init()
{
	ADMUX |= (1 << REFS0);									    //reference AVcc 5volt
  92:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1 << ADEN);										//enable ADC Module
  94:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);		//prescaler 128
  96:	86 b1       	in	r24, 0x06	; 6
  98:	87 60       	ori	r24, 0x07	; 7
  9a:	86 b9       	out	0x06, r24	; 6
  9c:	08 95       	ret

0000009e <adcRead>:
}

int adcRead(uint8_t channel)
{
	ADMUX  &= ~(0x1F);				//disable all ADC channel
  9e:	97 b1       	in	r25, 0x07	; 7
  a0:	90 7e       	andi	r25, 0xE0	; 224
  a2:	97 b9       	out	0x07, r25	; 7
	ADMUX |= channel;		//set the ADC channel
  a4:	97 b1       	in	r25, 0x07	; 7
  a6:	89 2b       	or	r24, r25
  a8:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);			//start ADC conversion
  aa:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1<<ADSC));		//wait until conversion complete
  ac:	36 99       	sbic	0x06, 6	; 6
  ae:	fe cf       	rjmp	.-4      	; 0xac <adcRead+0xe>
	return ADC;						//return the ADC converted digital value
  b0:	84 b1       	in	r24, 0x04	; 4
  b2:	95 b1       	in	r25, 0x05	; 5
}
  b4:	08 95       	ret

000000b6 <sensorValueConversion>:
	trig2_PORT &= ~(1 << trig2_PIN);
	trig3_PORT &= ~(1 << trig3_PIN);
		
	distance1 = .0353 * pulse1 / 2;
	distance2 = .0353 * pulse2 / 2;
	distance3 = .0353 * pulse3 / 2;
  b6:	ef 92       	push	r14
  b8:	ff 92       	push	r15
  ba:	0f 93       	push	r16
  bc:	1f 93       	push	r17
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	10 92 8b 00 	sts	0x008B, r1
  c6:	10 92 8a 00 	sts	0x008A, r1
  ca:	c7 e0       	ldi	r28, 0x07	; 7
  cc:	d0 e0       	ldi	r29, 0x00	; 0
		
		
	Serial_sendInt(distance1, 10);
  ce:	01 e0       	ldi	r16, 0x01	; 1
  d0:	10 e0       	ldi	r17, 0x00	; 0
  d2:	e1 2c       	mov	r14, r1
  d4:	f1 2c       	mov	r15, r1
  d6:	8c 2f       	mov	r24, r28
	Serial_sendChar('\t');
  d8:	0e 94 4f 00 	call	0x9e	; 0x9e <adcRead>
  dc:	40 91 8a 00 	lds	r20, 0x008A
	Serial_sendInt(distance2, 10);
  e0:	50 91 8b 00 	lds	r21, 0x008B
  e4:	20 2f       	mov	r18, r16
  e6:	31 2f       	mov	r19, r17
  e8:	85 38       	cpi	r24, 0x85	; 133
  ea:	93 40       	sbci	r25, 0x03	; 3
  ec:	14 f0       	brlt	.+4      	; 0xf2 <sensorValueConversion+0x3c>
	Serial_sendChar('\t');
  ee:	2e 2d       	mov	r18, r14
  f0:	3f 2d       	mov	r19, r15
  f2:	0c 2e       	mov	r0, r28
  	Serial_sendInt(distance3, 10);
  f4:	02 c0       	rjmp	.+4      	; 0xfa <sensorValueConversion+0x44>
  f6:	22 0f       	add	r18, r18
  f8:	33 1f       	adc	r19, r19
  fa:	0a 94       	dec	r0
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <sensorValueConversion+0x40>
  fe:	24 2b       	or	r18, r20
 100:	35 2b       	or	r19, r21
 102:	30 93 8b 00 	sts	0x008B, r19
	Serial_sendChar('\t');
 106:	20 93 8a 00 	sts	0x008A, r18
}
 10a:	21 97       	sbiw	r28, 0x01	; 1
 10c:	20 f7       	brcc	.-56     	; 0xd6 <sensorValueConversion+0x20>
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	1f 91       	pop	r17
// 		Serial_sendInt(temp, DEC);
// 		Serial_sendString("\t");
	}
// 	Serial_sendInt(sensorValue, BIN);
// 	Serial_sendString("\n");
}
 114:	0f 91       	pop	r16
 116:	ff 90       	pop	r15
 118:	ef 90       	pop	r14
 11a:	08 95       	ret

0000011c <sensorMapping>:

void sensorMapping(void)
{
	if (sensorValue == 0b00000000);
 11c:	80 91 8a 00 	lds	r24, 0x008A
 120:	90 91 8b 00 	lds	r25, 0x008B
 124:	89 2b       	or	r24, r25
 126:	09 f4       	brne	.+2      	; 0x12a <sensorMapping+0xe>
 128:	7c c1       	rjmp	.+760    	; 0x422 <sensorMapping+0x306>
	else if (sensorValue == 0b11111111) mappedValue = 0;
 12a:	80 91 8a 00 	lds	r24, 0x008A
 12e:	90 91 8b 00 	lds	r25, 0x008B
 132:	8f 3f       	cpi	r24, 0xFF	; 255
 134:	91 05       	cpc	r25, r1
 136:	29 f4       	brne	.+10     	; 0x142 <sensorMapping+0x26>
 138:	10 92 89 00 	sts	0x0089, r1
 13c:	10 92 88 00 	sts	0x0088, r1
 140:	08 95       	ret
	
	else if ((sensorValue == 0b00011001) || (sensorValue == 0b00001001) || (sensorValue == 0b00010001)) mappedValue = 120;
 142:	80 91 8a 00 	lds	r24, 0x008A
 146:	90 91 8b 00 	lds	r25, 0x008B
 14a:	49 97       	sbiw	r24, 0x19	; 25
 14c:	61 f0       	breq	.+24     	; 0x166 <sensorMapping+0x4a>
 14e:	80 91 8a 00 	lds	r24, 0x008A
 152:	90 91 8b 00 	lds	r25, 0x008B
 156:	09 97       	sbiw	r24, 0x09	; 9
 158:	31 f0       	breq	.+12     	; 0x166 <sensorMapping+0x4a>
 15a:	80 91 8a 00 	lds	r24, 0x008A
 15e:	90 91 8b 00 	lds	r25, 0x008B
 162:	41 97       	sbiw	r24, 0x11	; 17
 164:	39 f4       	brne	.+14     	; 0x174 <sensorMapping+0x58>
 166:	88 e7       	ldi	r24, 0x78	; 120
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	90 93 89 00 	sts	0x0089, r25
 16e:	80 93 88 00 	sts	0x0088, r24
 172:	08 95       	ret
	else if ((sensorValue == 0b00001011) || (sensorValue == 0b00010011) || (sensorValue == 0b00011011) || (sensorValue == 0b00001010) || (sensorValue == 0b00010010)) mappedValue = 110;
 174:	80 91 8a 00 	lds	r24, 0x008A
 178:	90 91 8b 00 	lds	r25, 0x008B
 17c:	0b 97       	sbiw	r24, 0x0b	; 11
 17e:	c1 f0       	breq	.+48     	; 0x1b0 <sensorMapping+0x94>
 180:	80 91 8a 00 	lds	r24, 0x008A
 184:	90 91 8b 00 	lds	r25, 0x008B
 188:	43 97       	sbiw	r24, 0x13	; 19
 18a:	91 f0       	breq	.+36     	; 0x1b0 <sensorMapping+0x94>
 18c:	80 91 8a 00 	lds	r24, 0x008A
 190:	90 91 8b 00 	lds	r25, 0x008B
 194:	4b 97       	sbiw	r24, 0x1b	; 27
 196:	61 f0       	breq	.+24     	; 0x1b0 <sensorMapping+0x94>
 198:	80 91 8a 00 	lds	r24, 0x008A
 19c:	90 91 8b 00 	lds	r25, 0x008B
 1a0:	0a 97       	sbiw	r24, 0x0a	; 10
 1a2:	31 f0       	breq	.+12     	; 0x1b0 <sensorMapping+0x94>
 1a4:	80 91 8a 00 	lds	r24, 0x008A
 1a8:	90 91 8b 00 	lds	r25, 0x008B
 1ac:	42 97       	sbiw	r24, 0x12	; 18
 1ae:	39 f4       	brne	.+14     	; 0x1be <sensorMapping+0xa2>
 1b0:	8e e6       	ldi	r24, 0x6E	; 110
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	90 93 89 00 	sts	0x0089, r25
 1b8:	80 93 88 00 	sts	0x0088, r24
 1bc:	08 95       	ret
	else if ((sensorValue == 0b00001111) || (sensorValue == 0b00011111)) mappedValue = 100;
 1be:	80 91 8a 00 	lds	r24, 0x008A
 1c2:	90 91 8b 00 	lds	r25, 0x008B
 1c6:	0f 97       	sbiw	r24, 0x0f	; 15
 1c8:	31 f0       	breq	.+12     	; 0x1d6 <sensorMapping+0xba>
 1ca:	80 91 8a 00 	lds	r24, 0x008A
 1ce:	90 91 8b 00 	lds	r25, 0x008B
 1d2:	4f 97       	sbiw	r24, 0x1f	; 31
 1d4:	39 f4       	brne	.+14     	; 0x1e4 <sensorMapping+0xc8>
 1d6:	84 e6       	ldi	r24, 0x64	; 100
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	90 93 89 00 	sts	0x0089, r25
 1de:	80 93 88 00 	sts	0x0088, r24
 1e2:	08 95       	ret
	else if (sensorValue == 0b00000001) mappedValue = 70;
 1e4:	80 91 8a 00 	lds	r24, 0x008A
 1e8:	90 91 8b 00 	lds	r25, 0x008B
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	39 f4       	brne	.+14     	; 0x1fe <sensorMapping+0xe2>
 1f0:	86 e4       	ldi	r24, 0x46	; 70
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	90 93 89 00 	sts	0x0089, r25
 1f8:	80 93 88 00 	sts	0x0088, r24
 1fc:	08 95       	ret
	else if (sensorValue == 0b00000011) mappedValue = 60;
 1fe:	80 91 8a 00 	lds	r24, 0x008A
 202:	90 91 8b 00 	lds	r25, 0x008B
 206:	03 97       	sbiw	r24, 0x03	; 3
 208:	39 f4       	brne	.+14     	; 0x218 <sensorMapping+0xfc>
 20a:	8c e3       	ldi	r24, 0x3C	; 60
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	90 93 89 00 	sts	0x0089, r25
 212:	80 93 88 00 	sts	0x0088, r24
 216:	08 95       	ret
	else if (sensorValue == 0b00000010) mappedValue = 50;
 218:	80 91 8a 00 	lds	r24, 0x008A
 21c:	90 91 8b 00 	lds	r25, 0x008B
 220:	02 97       	sbiw	r24, 0x02	; 2
 222:	39 f4       	brne	.+14     	; 0x232 <sensorMapping+0x116>
 224:	82 e3       	ldi	r24, 0x32	; 50
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	90 93 89 00 	sts	0x0089, r25
 22c:	80 93 88 00 	sts	0x0088, r24
 230:	08 95       	ret
	else if (sensorValue == 0b00000110) mappedValue = 40;
 232:	80 91 8a 00 	lds	r24, 0x008A
 236:	90 91 8b 00 	lds	r25, 0x008B
 23a:	06 97       	sbiw	r24, 0x06	; 6
 23c:	39 f4       	brne	.+14     	; 0x24c <sensorMapping+0x130>
 23e:	88 e2       	ldi	r24, 0x28	; 40
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	90 93 89 00 	sts	0x0089, r25
 246:	80 93 88 00 	sts	0x0088, r24
 24a:	08 95       	ret
	else if (sensorValue == 0b00000100) mappedValue = 30;
 24c:	80 91 8a 00 	lds	r24, 0x008A
 250:	90 91 8b 00 	lds	r25, 0x008B
 254:	04 97       	sbiw	r24, 0x04	; 4
 256:	39 f4       	brne	.+14     	; 0x266 <sensorMapping+0x14a>
 258:	8e e1       	ldi	r24, 0x1E	; 30
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	90 93 89 00 	sts	0x0089, r25
 260:	80 93 88 00 	sts	0x0088, r24
 264:	08 95       	ret
	else if (sensorValue == 0b00001100) mappedValue = 20;
 266:	80 91 8a 00 	lds	r24, 0x008A
 26a:	90 91 8b 00 	lds	r25, 0x008B
 26e:	0c 97       	sbiw	r24, 0x0c	; 12
 270:	39 f4       	brne	.+14     	; 0x280 <sensorMapping+0x164>
 272:	84 e1       	ldi	r24, 0x14	; 20
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	90 93 89 00 	sts	0x0089, r25
 27a:	80 93 88 00 	sts	0x0088, r24
 27e:	08 95       	ret
	else if (sensorValue == 0b00001000) mappedValue = 10;
 280:	80 91 8a 00 	lds	r24, 0x008A
 284:	90 91 8b 00 	lds	r25, 0x008B
 288:	08 97       	sbiw	r24, 0x08	; 8
 28a:	39 f4       	brne	.+14     	; 0x29a <sensorMapping+0x17e>
 28c:	8a e0       	ldi	r24, 0x0A	; 10
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	90 93 89 00 	sts	0x0089, r25
 294:	80 93 88 00 	sts	0x0088, r24
 298:	08 95       	ret
	else if (sensorValue == 0b00011000) mappedValue = 0;
 29a:	80 91 8a 00 	lds	r24, 0x008A
 29e:	90 91 8b 00 	lds	r25, 0x008B
 2a2:	48 97       	sbiw	r24, 0x18	; 24
 2a4:	29 f4       	brne	.+10     	; 0x2b0 <sensorMapping+0x194>
 2a6:	10 92 89 00 	sts	0x0089, r1
 2aa:	10 92 88 00 	sts	0x0088, r1
 2ae:	08 95       	ret
	else if (sensorValue == 0b00010000) mappedValue = -10;
 2b0:	80 91 8a 00 	lds	r24, 0x008A
 2b4:	90 91 8b 00 	lds	r25, 0x008B
 2b8:	40 97       	sbiw	r24, 0x10	; 16
 2ba:	39 f4       	brne	.+14     	; 0x2ca <sensorMapping+0x1ae>
 2bc:	86 ef       	ldi	r24, 0xF6	; 246
 2be:	9f ef       	ldi	r25, 0xFF	; 255
 2c0:	90 93 89 00 	sts	0x0089, r25
 2c4:	80 93 88 00 	sts	0x0088, r24
 2c8:	08 95       	ret
	else if (sensorValue == 0b00110000) mappedValue = -20;
 2ca:	80 91 8a 00 	lds	r24, 0x008A
 2ce:	90 91 8b 00 	lds	r25, 0x008B
 2d2:	c0 97       	sbiw	r24, 0x30	; 48
 2d4:	39 f4       	brne	.+14     	; 0x2e4 <sensorMapping+0x1c8>
 2d6:	8c ee       	ldi	r24, 0xEC	; 236
 2d8:	9f ef       	ldi	r25, 0xFF	; 255
 2da:	90 93 89 00 	sts	0x0089, r25
 2de:	80 93 88 00 	sts	0x0088, r24
 2e2:	08 95       	ret
	else if (sensorValue == 0b00100000) mappedValue = -30;
 2e4:	80 91 8a 00 	lds	r24, 0x008A
 2e8:	90 91 8b 00 	lds	r25, 0x008B
 2ec:	80 97       	sbiw	r24, 0x20	; 32
 2ee:	39 f4       	brne	.+14     	; 0x2fe <sensorMapping+0x1e2>
 2f0:	82 ee       	ldi	r24, 0xE2	; 226
 2f2:	9f ef       	ldi	r25, 0xFF	; 255
 2f4:	90 93 89 00 	sts	0x0089, r25
 2f8:	80 93 88 00 	sts	0x0088, r24
 2fc:	08 95       	ret
	else if (sensorValue == 0b01100000) mappedValue = -40;
 2fe:	80 91 8a 00 	lds	r24, 0x008A
 302:	90 91 8b 00 	lds	r25, 0x008B
 306:	80 36       	cpi	r24, 0x60	; 96
 308:	91 05       	cpc	r25, r1
 30a:	39 f4       	brne	.+14     	; 0x31a <sensorMapping+0x1fe>
 30c:	88 ed       	ldi	r24, 0xD8	; 216
 30e:	9f ef       	ldi	r25, 0xFF	; 255
 310:	90 93 89 00 	sts	0x0089, r25
 314:	80 93 88 00 	sts	0x0088, r24
 318:	08 95       	ret
	else if (sensorValue == 0b01000000) mappedValue = -50;
 31a:	80 91 8a 00 	lds	r24, 0x008A
 31e:	90 91 8b 00 	lds	r25, 0x008B
 322:	80 34       	cpi	r24, 0x40	; 64
 324:	91 05       	cpc	r25, r1
 326:	39 f4       	brne	.+14     	; 0x336 <sensorMapping+0x21a>
 328:	8e ec       	ldi	r24, 0xCE	; 206
 32a:	9f ef       	ldi	r25, 0xFF	; 255
 32c:	90 93 89 00 	sts	0x0089, r25
 330:	80 93 88 00 	sts	0x0088, r24
 334:	08 95       	ret
	else if (sensorValue == 0b11000000) mappedValue = -60;
 336:	80 91 8a 00 	lds	r24, 0x008A
 33a:	90 91 8b 00 	lds	r25, 0x008B
 33e:	80 3c       	cpi	r24, 0xC0	; 192
 340:	91 05       	cpc	r25, r1
 342:	39 f4       	brne	.+14     	; 0x352 <sensorMapping+0x236>
 344:	84 ec       	ldi	r24, 0xC4	; 196
 346:	9f ef       	ldi	r25, 0xFF	; 255
 348:	90 93 89 00 	sts	0x0089, r25
 34c:	80 93 88 00 	sts	0x0088, r24
 350:	08 95       	ret
	else if (sensorValue == 0b10000000) mappedValue = -70;
 352:	80 91 8a 00 	lds	r24, 0x008A
 356:	90 91 8b 00 	lds	r25, 0x008B
 35a:	80 38       	cpi	r24, 0x80	; 128
 35c:	91 05       	cpc	r25, r1
 35e:	39 f4       	brne	.+14     	; 0x36e <sensorMapping+0x252>
 360:	8a eb       	ldi	r24, 0xBA	; 186
 362:	9f ef       	ldi	r25, 0xFF	; 255
 364:	90 93 89 00 	sts	0x0089, r25
 368:	80 93 88 00 	sts	0x0088, r24
 36c:	08 95       	ret
	else if ((sensorValue == 0b11110000) || (sensorValue == 0b11111000)) mappedValue = -100;
 36e:	80 91 8a 00 	lds	r24, 0x008A
 372:	90 91 8b 00 	lds	r25, 0x008B
 376:	80 3f       	cpi	r24, 0xF0	; 240
 378:	91 05       	cpc	r25, r1
 37a:	39 f0       	breq	.+14     	; 0x38a <sensorMapping+0x26e>
 37c:	80 91 8a 00 	lds	r24, 0x008A
 380:	90 91 8b 00 	lds	r25, 0x008B
 384:	88 3f       	cpi	r24, 0xF8	; 248
 386:	91 05       	cpc	r25, r1
 388:	39 f4       	brne	.+14     	; 0x398 <sensorMapping+0x27c>
 38a:	8c e9       	ldi	r24, 0x9C	; 156
 38c:	9f ef       	ldi	r25, 0xFF	; 255
 38e:	90 93 89 00 	sts	0x0089, r25
 392:	80 93 88 00 	sts	0x0088, r24
 396:	08 95       	ret
	else if ((sensorValue == 0b11011000) || (sensorValue == 0b11010000) || (sensorValue == 0b11001000) || (sensorValue == 0b01010000) || (sensorValue == 0b01001000)) mappedValue = -110;
 398:	80 91 8a 00 	lds	r24, 0x008A
 39c:	90 91 8b 00 	lds	r25, 0x008B
 3a0:	88 3d       	cpi	r24, 0xD8	; 216
 3a2:	91 05       	cpc	r25, r1
 3a4:	e1 f0       	breq	.+56     	; 0x3de <sensorMapping+0x2c2>
 3a6:	80 91 8a 00 	lds	r24, 0x008A
 3aa:	90 91 8b 00 	lds	r25, 0x008B
 3ae:	80 3d       	cpi	r24, 0xD0	; 208
 3b0:	91 05       	cpc	r25, r1
 3b2:	a9 f0       	breq	.+42     	; 0x3de <sensorMapping+0x2c2>
 3b4:	80 91 8a 00 	lds	r24, 0x008A
 3b8:	90 91 8b 00 	lds	r25, 0x008B
 3bc:	88 3c       	cpi	r24, 0xC8	; 200
 3be:	91 05       	cpc	r25, r1
 3c0:	71 f0       	breq	.+28     	; 0x3de <sensorMapping+0x2c2>
 3c2:	80 91 8a 00 	lds	r24, 0x008A
 3c6:	90 91 8b 00 	lds	r25, 0x008B
 3ca:	80 35       	cpi	r24, 0x50	; 80
 3cc:	91 05       	cpc	r25, r1
 3ce:	39 f0       	breq	.+14     	; 0x3de <sensorMapping+0x2c2>
 3d0:	80 91 8a 00 	lds	r24, 0x008A
 3d4:	90 91 8b 00 	lds	r25, 0x008B
 3d8:	88 34       	cpi	r24, 0x48	; 72
 3da:	91 05       	cpc	r25, r1
 3dc:	39 f4       	brne	.+14     	; 0x3ec <sensorMapping+0x2d0>
 3de:	82 e9       	ldi	r24, 0x92	; 146
 3e0:	9f ef       	ldi	r25, 0xFF	; 255
 3e2:	90 93 89 00 	sts	0x0089, r25
 3e6:	80 93 88 00 	sts	0x0088, r24
 3ea:	08 95       	ret
	else if ((sensorValue == 0b10011000) || (sensorValue == 0b10010000) || (sensorValue == 0b10001000)) mappedValue = -120;
 3ec:	80 91 8a 00 	lds	r24, 0x008A
 3f0:	90 91 8b 00 	lds	r25, 0x008B
 3f4:	88 39       	cpi	r24, 0x98	; 152
 3f6:	91 05       	cpc	r25, r1
 3f8:	71 f0       	breq	.+28     	; 0x416 <sensorMapping+0x2fa>
 3fa:	80 91 8a 00 	lds	r24, 0x008A
 3fe:	90 91 8b 00 	lds	r25, 0x008B
 402:	80 39       	cpi	r24, 0x90	; 144
 404:	91 05       	cpc	r25, r1
 406:	39 f0       	breq	.+14     	; 0x416 <sensorMapping+0x2fa>
 408:	80 91 8a 00 	lds	r24, 0x008A
 40c:	90 91 8b 00 	lds	r25, 0x008B
 410:	88 38       	cpi	r24, 0x88	; 136
 412:	91 05       	cpc	r25, r1
 414:	31 f4       	brne	.+12     	; 0x422 <sensorMapping+0x306>
 416:	88 e8       	ldi	r24, 0x88	; 136
 418:	9f ef       	ldi	r25, 0xFF	; 255
 41a:	90 93 89 00 	sts	0x0089, r25
 41e:	80 93 88 00 	sts	0x0088, r24
 422:	08 95       	ret

00000424 <PID_Correction>:
}

void PID_Correction(void)
{
 424:	8f 92       	push	r8
 426:	9f 92       	push	r9
 428:	af 92       	push	r10
 42a:	bf 92       	push	r11
 42c:	cf 92       	push	r12
 42e:	df 92       	push	r13
 430:	ef 92       	push	r14
 432:	ff 92       	push	r15
 434:	0f 93       	push	r16
 436:	1f 93       	push	r17
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
	error = targetValue - mappedValue;
 43c:	c0 91 88 00 	lds	r28, 0x0088
 440:	d0 91 89 00 	lds	r29, 0x0089
 444:	c1 95       	neg	r28
 446:	c0 93 77 00 	sts	0x0077, r28
	sum_error = (sum_error + error) / 2;
 44a:	0c 2f       	mov	r16, r28
 44c:	0c 2e       	mov	r0, r28
 44e:	00 0c       	add	r0, r0
 450:	11 0b       	sbc	r17, r17
 452:	60 91 74 00 	lds	r22, 0x0074
 456:	70 91 75 00 	lds	r23, 0x0075
 45a:	60 0f       	add	r22, r16
 45c:	71 1f       	adc	r23, r17
 45e:	77 23       	and	r23, r23
 460:	14 f4       	brge	.+4      	; 0x466 <PID_Correction+0x42>
 462:	6f 5f       	subi	r22, 0xFF	; 255
 464:	7f 4f       	sbci	r23, 0xFF	; 255
 466:	7b 01       	movw	r14, r22
 468:	f5 94       	asr	r15
 46a:	e7 94       	ror	r14
 46c:	f0 92 75 00 	sts	0x0075, r15
 470:	e0 92 74 00 	sts	0x0074, r14
	
	correction = ((Kp * error) + (Ki * sum_error) + (Kd * (error - prev_error)));
 474:	6c 2f       	mov	r22, r28
 476:	0c 2e       	mov	r0, r28
 478:	00 0c       	add	r0, r0
 47a:	77 0b       	sbc	r23, r23
 47c:	88 0b       	sbc	r24, r24
 47e:	99 0b       	sbc	r25, r25
 480:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__floatsisf>
 484:	20 91 64 00 	lds	r18, 0x0064
 488:	30 91 65 00 	lds	r19, 0x0065
 48c:	40 91 66 00 	lds	r20, 0x0066
 490:	50 91 67 00 	lds	r21, 0x0067
 494:	0e 94 6d 05 	call	0xada	; 0xada <__mulsf3>
 498:	4b 01       	movw	r8, r22
 49a:	5c 01       	movw	r10, r24
 49c:	b7 01       	movw	r22, r14
 49e:	ff 0c       	add	r15, r15
 4a0:	88 0b       	sbc	r24, r24
 4a2:	99 0b       	sbc	r25, r25
 4a4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__floatsisf>
 4a8:	20 91 68 00 	lds	r18, 0x0068
 4ac:	30 91 69 00 	lds	r19, 0x0069
 4b0:	40 91 6a 00 	lds	r20, 0x006A
 4b4:	50 91 6b 00 	lds	r21, 0x006B
 4b8:	0e 94 6d 05 	call	0xada	; 0xada <__mulsf3>
 4bc:	9b 01       	movw	r18, r22
 4be:	ac 01       	movw	r20, r24
 4c0:	c5 01       	movw	r24, r10
 4c2:	b4 01       	movw	r22, r8
 4c4:	0e 94 3d 04 	call	0x87a	; 0x87a <__addsf3>
 4c8:	6b 01       	movw	r12, r22
 4ca:	7c 01       	movw	r14, r24
 4cc:	80 91 76 00 	lds	r24, 0x0076
 4d0:	98 01       	movw	r18, r16
 4d2:	28 1b       	sub	r18, r24
 4d4:	31 09       	sbc	r19, r1
 4d6:	87 fd       	sbrc	r24, 7
 4d8:	33 95       	inc	r19
 4da:	b9 01       	movw	r22, r18
 4dc:	33 0f       	add	r19, r19
 4de:	88 0b       	sbc	r24, r24
 4e0:	99 0b       	sbc	r25, r25
 4e2:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__floatsisf>
 4e6:	20 91 60 00 	lds	r18, 0x0060
 4ea:	30 91 61 00 	lds	r19, 0x0061
 4ee:	40 91 62 00 	lds	r20, 0x0062
 4f2:	50 91 63 00 	lds	r21, 0x0063
 4f6:	0e 94 6d 05 	call	0xada	; 0xada <__mulsf3>
 4fa:	9b 01       	movw	r18, r22
 4fc:	ac 01       	movw	r20, r24
 4fe:	c7 01       	movw	r24, r14
 500:	b6 01       	movw	r22, r12
 502:	0e 94 3d 04 	call	0x87a	; 0x87a <__addsf3>
 506:	60 93 70 00 	sts	0x0070, r22
 50a:	70 93 71 00 	sts	0x0071, r23
 50e:	80 93 72 00 	sts	0x0072, r24
 512:	90 93 73 00 	sts	0x0073, r25

	prev_error = error;
 516:	c0 93 76 00 	sts	0x0076, r28
	motorResponse = (int)correction;
 51a:	0e 94 a9 04 	call	0x952	; 0x952 <__fixsfsi>
 51e:	9b 01       	movw	r18, r22
 520:	70 93 6f 00 	sts	0x006F, r23
 524:	60 93 6e 00 	sts	0x006E, r22
	
	if(motorResponse > maxSpeed) motorResponse = maxSpeed;
 528:	69 3c       	cpi	r22, 0xC9	; 201
 52a:	71 05       	cpc	r23, r1
 52c:	4c f0       	brlt	.+18     	; 0x540 <PID_Correction+0x11c>
 52e:	88 ec       	ldi	r24, 0xC8	; 200
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	90 93 6f 00 	sts	0x006F, r25
 536:	80 93 6e 00 	sts	0x006E, r24
	else if(motorResponse < -maxSpeed) motorResponse = -maxSpeed;
	
	if(motorResponse < 0)
 53a:	28 ec       	ldi	r18, 0xC8	; 200
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	1a c0       	rjmp	.+52     	; 0x574 <PID_Correction+0x150>

	prev_error = error;
	motorResponse = (int)correction;
	
	if(motorResponse > maxSpeed) motorResponse = maxSpeed;
	else if(motorResponse < -maxSpeed) motorResponse = -maxSpeed;
 540:	28 33       	cpi	r18, 0x38	; 56
 542:	8f ef       	ldi	r24, 0xFF	; 255
 544:	38 07       	cpc	r19, r24
 546:	4c f4       	brge	.+18     	; 0x55a <PID_Correction+0x136>
 548:	88 e3       	ldi	r24, 0x38	; 56
 54a:	9f ef       	ldi	r25, 0xFF	; 255
 54c:	90 93 6f 00 	sts	0x006F, r25
 550:	80 93 6e 00 	sts	0x006E, r24
	
	if(motorResponse < 0)
 554:	28 e3       	ldi	r18, 0x38	; 56
 556:	3f ef       	ldi	r19, 0xFF	; 255
 558:	02 c0       	rjmp	.+4      	; 0x55e <PID_Correction+0x13a>
 55a:	33 23       	and	r19, r19
 55c:	44 f4       	brge	.+16     	; 0x56e <PID_Correction+0x14a>
	{
		LMspeed = maxSpeed;
 55e:	98 ec       	ldi	r25, 0xC8	; 200
 560:	90 93 6d 00 	sts	0x006D, r25
		RMspeed = maxSpeed + motorResponse;
 564:	88 ec       	ldi	r24, 0xC8	; 200
 566:	82 0f       	add	r24, r18
 568:	80 93 6c 00 	sts	0x006C, r24
 56c:	0a c0       	rjmp	.+20     	; 0x582 <PID_Correction+0x15e>
	}
	else if(motorResponse > 0)
 56e:	12 16       	cp	r1, r18
 570:	13 06       	cpc	r1, r19
 572:	3c f4       	brge	.+14     	; 0x582 <PID_Correction+0x15e>
	{
		LMspeed = maxSpeed - motorResponse;
 574:	98 ec       	ldi	r25, 0xC8	; 200
 576:	89 2f       	mov	r24, r25
 578:	82 1b       	sub	r24, r18
 57a:	80 93 6d 00 	sts	0x006D, r24
		RMspeed = maxSpeed;
 57e:	90 93 6c 00 	sts	0x006C, r25
	}
}
 582:	df 91       	pop	r29
 584:	cf 91       	pop	r28
 586:	1f 91       	pop	r17
 588:	0f 91       	pop	r16
 58a:	ff 90       	pop	r15
 58c:	ef 90       	pop	r14
 58e:	df 90       	pop	r13
 590:	cf 90       	pop	r12
 592:	bf 90       	pop	r11
 594:	af 90       	pop	r10
 596:	9f 90       	pop	r9
 598:	8f 90       	pop	r8
 59a:	08 95       	ret

0000059c <Forward>:
	motor2b_PORT |= (1 << motor2b_PIN);
}

void Forward(void)
{
	enable1(0);
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	0e 94 2c 04 	call	0x858	; 0x858 <PWM2>
	enable2(0);
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	0e 94 2a 04 	call	0x854	; 0x854 <PWM0>
	
	motor1a_PORT |= (1 << motor1a_PIN);
 5ac:	af 9a       	sbi	0x15, 7	; 21
	motor1b_PORT &= ~(1 << motor1b_PIN);
 5ae:	ae 98       	cbi	0x15, 6	; 21
	motor2a_PORT |= (1 << motor2a_PIN);
 5b0:	ad 9a       	sbi	0x15, 5	; 21
	motor2b_PORT &= ~(1 << motor2b_PIN);
 5b2:	ac 98       	cbi	0x15, 4	; 21

	enable1(maxSpeed);
 5b4:	88 ec       	ldi	r24, 0xC8	; 200
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	0e 94 2c 04 	call	0x858	; 0x858 <PWM2>
	enable2(maxSpeed);
 5bc:	88 ec       	ldi	r24, 0xC8	; 200
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	0e 94 2a 04 	call	0x854	; 0x854 <PWM0>
 5c4:	08 95       	ret

000005c6 <main>:

int main(void)
{
	// Input-Output settings
	
	trig1_DDR |= (1 << trig1_PIN);
 5c6:	8c 9a       	sbi	0x11, 4	; 17
	trig2_DDR |= (1 << trig2_PIN);
 5c8:	8d 9a       	sbi	0x11, 5	; 17
	trig3_DDR |= (1 << trig3_PIN);
 5ca:	b9 9a       	sbi	0x17, 1	; 23
	echo1_DDR &= ~(1 << echo1_PIN);
 5cc:	8b 98       	cbi	0x11, 3	; 17
	echo2_DDR &= ~(1 << echo2_PIN);
 5ce:	8a 98       	cbi	0x11, 2	; 17
	echo3_DDR &= ~(1 << echo3_PIN);
 5d0:	ba 98       	cbi	0x17, 2	; 23
	motor1a_DDR |= (1 << motor1a_PIN);
 5d2:	a7 9a       	sbi	0x14, 7	; 20
	motor1b_DDR |= (1 << motor1b_PIN);
 5d4:	a6 9a       	sbi	0x14, 6	; 20
	motor2a_DDR |= (1 << motor2a_PIN);
 5d6:	a5 9a       	sbi	0x14, 5	; 20
	motor2b_DDR |= (1 << motor2b_PIN);
 5d8:	a4 9a       	sbi	0x14, 4	; 20
	enable1_DDR |= (1 << enable1_PIN);
 5da:	8f 9a       	sbi	0x11, 7	; 17
	enable2_DDR |= (1 << enable2_PIN);
 5dc:	bb 9a       	sbi	0x17, 3	; 23
	// Local Variables
	
	
	// Initializations 
	
	adc_init();
 5de:	0e 94 49 00 	call	0x92	; 0x92 <adc_init>
	UART_init();
 5e2:	0e 94 2e 04 	call	0x85c	; 0x85c <UART_init>
	PWM0_init();
 5e6:	0e 94 16 04 	call	0x82c	; 0x82c <PWM0_init>
	PWM2_init();
 5ea:	0e 94 20 04 	call	0x840	; 0x840 <PWM2_init>
	Forward();		
 5ee:	0e 94 ce 02 	call	0x59c	; 0x59c <Forward>
	
    while (1) 
    {
		sensorValueConversion();
 5f2:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
		sensorMapping();
 5f6:	0e 94 8e 00 	call	0x11c	; 0x11c <sensorMapping>
				
		if(sensorValue == 0b00000000)			// No Line Sequence
 5fa:	80 91 8a 00 	lds	r24, 0x008A
 5fe:	90 91 8b 00 	lds	r25, 0x008B
 602:	89 2b       	or	r24, r25
 604:	11 f4       	brne	.+4      	; 0x60a <main+0x44>
		{
			sensorValueConversion();
 606:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
		}

		if(sensorValue == 0b11111111)			// Horizontal Line Sequence
 60a:	80 91 8a 00 	lds	r24, 0x008A
 60e:	90 91 8b 00 	lds	r25, 0x008B
 612:	8f 3f       	cpi	r24, 0xFF	; 255
 614:	91 05       	cpc	r25, r1
 616:	11 f4       	brne	.+4      	; 0x61c <main+0x56>
		{
			sensorValueConversion();
 618:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
// 			}
// 			else mappedValue = 0;
// 		}

		 				
		PID_Correction();
 61c:	0e 94 12 02 	call	0x424	; 0x424 <PID_Correction>
		enable1(LMspeed);
 620:	80 91 6d 00 	lds	r24, 0x006D
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	0e 94 2c 04 	call	0x858	; 0x858 <PWM2>
		enable2(RMspeed);
 62a:	80 91 6c 00 	lds	r24, 0x006C
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	0e 94 2a 04 	call	0x854	; 0x854 <PWM0>

	}
 634:	de cf       	rjmp	.-68     	; 0x5f2 <main+0x2c>

00000636 <__vector_1>:
{
	TIMSK |= (1 << TOIE2) | (1 << TOIE0);				// Enable Timer Overflow Interrupt 0, Timer Overflow Interrupt 2
}

ISR (INT0_vect)
{
 636:	1f 92       	push	r1
 638:	0f 92       	push	r0
 63a:	0f b6       	in	r0, 0x3f	; 63
 63c:	0f 92       	push	r0
 63e:	11 24       	eor	r1, r1
 640:	8f 93       	push	r24
 642:	9f 93       	push	r25
	if (choice1 == 0)
 644:	80 91 84 00 	lds	r24, 0x0084
 648:	90 91 85 00 	lds	r25, 0x0085
 64c:	89 2b       	or	r24, r25
 64e:	51 f4       	brne	.+20     	; 0x664 <__vector_1+0x2e>
	{
		TCCR1B |= (1 << CS11);
 650:	8e b5       	in	r24, 0x2e	; 46
 652:	82 60       	ori	r24, 0x02	; 2
 654:	8e bd       	out	0x2e, r24	; 46
		choice1 = 1;
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	90 93 85 00 	sts	0x0085, r25
 65e:	80 93 84 00 	sts	0x0084, r24
 662:	15 c0       	rjmp	.+42     	; 0x68e <__vector_1+0x58>
	}
	else if (choice1 == 1)
 664:	80 91 84 00 	lds	r24, 0x0084
 668:	90 91 85 00 	lds	r25, 0x0085
 66c:	01 97       	sbiw	r24, 0x01	; 1
 66e:	79 f4       	brne	.+30     	; 0x68e <__vector_1+0x58>
	{
		TCCR1B = 0;
 670:	1e bc       	out	0x2e, r1	; 46
		pulse1 = TCNT1 / 2;
 672:	8c b5       	in	r24, 0x2c	; 44
 674:	9d b5       	in	r25, 0x2d	; 45
 676:	96 95       	lsr	r25
 678:	87 95       	ror	r24
 67a:	90 93 87 00 	sts	0x0087, r25
 67e:	80 93 86 00 	sts	0x0086, r24
		TCNT1 = 0;
 682:	1d bc       	out	0x2d, r1	; 45
 684:	1c bc       	out	0x2c, r1	; 44
		choice1 = 0;
 686:	10 92 85 00 	sts	0x0085, r1
 68a:	10 92 84 00 	sts	0x0084, r1
	}
}
 68e:	9f 91       	pop	r25
 690:	8f 91       	pop	r24
 692:	0f 90       	pop	r0
 694:	0f be       	out	0x3f, r0	; 63
 696:	0f 90       	pop	r0
 698:	1f 90       	pop	r1
 69a:	18 95       	reti

0000069c <__vector_2>:

ISR (INT1_vect)
{
 69c:	1f 92       	push	r1
 69e:	0f 92       	push	r0
 6a0:	0f b6       	in	r0, 0x3f	; 63
 6a2:	0f 92       	push	r0
 6a4:	11 24       	eor	r1, r1
 6a6:	2f 93       	push	r18
 6a8:	3f 93       	push	r19
 6aa:	4f 93       	push	r20
 6ac:	5f 93       	push	r21
 6ae:	8f 93       	push	r24
 6b0:	9f 93       	push	r25
	if (choice2 == 0)
 6b2:	80 91 80 00 	lds	r24, 0x0080
 6b6:	90 91 81 00 	lds	r25, 0x0081
 6ba:	89 2b       	or	r24, r25
 6bc:	51 f4       	brne	.+20     	; 0x6d2 <__vector_2+0x36>
	{
		TCCR0 |= 0b00000011;
 6be:	83 b7       	in	r24, 0x33	; 51
 6c0:	83 60       	ori	r24, 0x03	; 3
 6c2:	83 bf       	out	0x33, r24	; 51
		choice2 = 1;
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	90 93 81 00 	sts	0x0081, r25
 6cc:	80 93 80 00 	sts	0x0080, r24
 6d0:	25 c0       	rjmp	.+74     	; 0x71c <__vector_2+0x80>
	}
	else if (choice2 == 1)
 6d2:	80 91 80 00 	lds	r24, 0x0080
 6d6:	90 91 81 00 	lds	r25, 0x0081
 6da:	01 97       	sbiw	r24, 0x01	; 1
 6dc:	f9 f4       	brne	.+62     	; 0x71c <__vector_2+0x80>
	{
		TCCR0 = 0;
 6de:	13 be       	out	0x33, r1	; 51
		pulse2 = (TCNT0 + (0xFF * TIMER0_INT)) * 4;
 6e0:	22 b7       	in	r18, 0x32	; 50
 6e2:	40 91 7a 00 	lds	r20, 0x007A
 6e6:	50 91 7b 00 	lds	r21, 0x007B
 6ea:	3f ef       	ldi	r19, 0xFF	; 255
 6ec:	34 9f       	mul	r19, r20
 6ee:	c0 01       	movw	r24, r0
 6f0:	35 9f       	mul	r19, r21
 6f2:	90 0d       	add	r25, r0
 6f4:	11 24       	eor	r1, r1
 6f6:	82 0f       	add	r24, r18
 6f8:	91 1d       	adc	r25, r1
 6fa:	88 0f       	add	r24, r24
 6fc:	99 1f       	adc	r25, r25
 6fe:	88 0f       	add	r24, r24
 700:	99 1f       	adc	r25, r25
 702:	90 93 83 00 	sts	0x0083, r25
 706:	80 93 82 00 	sts	0x0082, r24
		TIMER0_INT = 0;
 70a:	10 92 7b 00 	sts	0x007B, r1
 70e:	10 92 7a 00 	sts	0x007A, r1
		TCNT0 = 0;
 712:	12 be       	out	0x32, r1	; 50
		choice2 = 0;
 714:	10 92 81 00 	sts	0x0081, r1
 718:	10 92 80 00 	sts	0x0080, r1
	}
}
 71c:	9f 91       	pop	r25
 71e:	8f 91       	pop	r24
 720:	5f 91       	pop	r21
 722:	4f 91       	pop	r20
 724:	3f 91       	pop	r19
 726:	2f 91       	pop	r18
 728:	0f 90       	pop	r0
 72a:	0f be       	out	0x3f, r0	; 63
 72c:	0f 90       	pop	r0
 72e:	1f 90       	pop	r1
 730:	18 95       	reti

00000732 <__vector_3>:

ISR (INT2_vect)
{
 732:	1f 92       	push	r1
 734:	0f 92       	push	r0
 736:	0f b6       	in	r0, 0x3f	; 63
 738:	0f 92       	push	r0
 73a:	11 24       	eor	r1, r1
 73c:	2f 93       	push	r18
 73e:	3f 93       	push	r19
 740:	4f 93       	push	r20
 742:	5f 93       	push	r21
 744:	8f 93       	push	r24
 746:	9f 93       	push	r25
	MCUCSR ^= (1 << ISC2);
 748:	94 b7       	in	r25, 0x34	; 52
 74a:	80 e4       	ldi	r24, 0x40	; 64
 74c:	89 27       	eor	r24, r25
 74e:	84 bf       	out	0x34, r24	; 52
	if (choice3 == 0)
 750:	80 91 7c 00 	lds	r24, 0x007C
 754:	90 91 7d 00 	lds	r25, 0x007D
 758:	89 2b       	or	r24, r25
 75a:	51 f4       	brne	.+20     	; 0x770 <__vector_3+0x3e>
	{
		TCCR2 |= 0b00000100;
 75c:	85 b5       	in	r24, 0x25	; 37
 75e:	84 60       	ori	r24, 0x04	; 4
 760:	85 bd       	out	0x25, r24	; 37
		choice3 = 1;
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	90 93 7d 00 	sts	0x007D, r25
 76a:	80 93 7c 00 	sts	0x007C, r24
 76e:	25 c0       	rjmp	.+74     	; 0x7ba <__vector_3+0x88>
	}
	else if (choice3 == 1)
 770:	80 91 7c 00 	lds	r24, 0x007C
 774:	90 91 7d 00 	lds	r25, 0x007D
 778:	01 97       	sbiw	r24, 0x01	; 1
 77a:	f9 f4       	brne	.+62     	; 0x7ba <__vector_3+0x88>
	{
		TCCR2 = 0;
 77c:	15 bc       	out	0x25, r1	; 37
		pulse3 = (TCNT2 + (0xFF * TIMER2_INT)) * 4;
 77e:	24 b5       	in	r18, 0x24	; 36
 780:	40 91 78 00 	lds	r20, 0x0078
 784:	50 91 79 00 	lds	r21, 0x0079
 788:	3f ef       	ldi	r19, 0xFF	; 255
 78a:	34 9f       	mul	r19, r20
 78c:	c0 01       	movw	r24, r0
 78e:	35 9f       	mul	r19, r21
 790:	90 0d       	add	r25, r0
 792:	11 24       	eor	r1, r1
 794:	82 0f       	add	r24, r18
 796:	91 1d       	adc	r25, r1
 798:	88 0f       	add	r24, r24
 79a:	99 1f       	adc	r25, r25
 79c:	88 0f       	add	r24, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	90 93 7f 00 	sts	0x007F, r25
 7a4:	80 93 7e 00 	sts	0x007E, r24
		TIMER2_INT = 0;
 7a8:	10 92 79 00 	sts	0x0079, r1
 7ac:	10 92 78 00 	sts	0x0078, r1
		TCNT2 = 0;
 7b0:	14 bc       	out	0x24, r1	; 36
		choice3 = 0;
 7b2:	10 92 7d 00 	sts	0x007D, r1
 7b6:	10 92 7c 00 	sts	0x007C, r1
	}
}
 7ba:	9f 91       	pop	r25
 7bc:	8f 91       	pop	r24
 7be:	5f 91       	pop	r21
 7c0:	4f 91       	pop	r20
 7c2:	3f 91       	pop	r19
 7c4:	2f 91       	pop	r18
 7c6:	0f 90       	pop	r0
 7c8:	0f be       	out	0x3f, r0	; 63
 7ca:	0f 90       	pop	r0
 7cc:	1f 90       	pop	r1
 7ce:	18 95       	reti

000007d0 <__vector_5>:

ISR (TIMER2_OVF_vect)
{
 7d0:	1f 92       	push	r1
 7d2:	0f 92       	push	r0
 7d4:	0f b6       	in	r0, 0x3f	; 63
 7d6:	0f 92       	push	r0
 7d8:	11 24       	eor	r1, r1
 7da:	8f 93       	push	r24
 7dc:	9f 93       	push	r25
	TIMER2_INT++;
 7de:	80 91 78 00 	lds	r24, 0x0078
 7e2:	90 91 79 00 	lds	r25, 0x0079
 7e6:	01 96       	adiw	r24, 0x01	; 1
 7e8:	90 93 79 00 	sts	0x0079, r25
 7ec:	80 93 78 00 	sts	0x0078, r24
}
 7f0:	9f 91       	pop	r25
 7f2:	8f 91       	pop	r24
 7f4:	0f 90       	pop	r0
 7f6:	0f be       	out	0x3f, r0	; 63
 7f8:	0f 90       	pop	r0
 7fa:	1f 90       	pop	r1
 7fc:	18 95       	reti

000007fe <__vector_11>:

ISR (TIMER0_OVF_vect)
{
 7fe:	1f 92       	push	r1
 800:	0f 92       	push	r0
 802:	0f b6       	in	r0, 0x3f	; 63
 804:	0f 92       	push	r0
 806:	11 24       	eor	r1, r1
 808:	8f 93       	push	r24
 80a:	9f 93       	push	r25
	TIMER0_INT++;
 80c:	80 91 7a 00 	lds	r24, 0x007A
 810:	90 91 7b 00 	lds	r25, 0x007B
 814:	01 96       	adiw	r24, 0x01	; 1
 816:	90 93 7b 00 	sts	0x007B, r25
 81a:	80 93 7a 00 	sts	0x007A, r24
}
 81e:	9f 91       	pop	r25
 820:	8f 91       	pop	r24
 822:	0f 90       	pop	r0
 824:	0f be       	out	0x3f, r0	; 63
 826:	0f 90       	pop	r0
 828:	1f 90       	pop	r1
 82a:	18 95       	reti

0000082c <PWM0_init>:

/* PWM SETTINGS*/
		
void PWM0_init(void)										// PWM0 (PB3 of ATmega32A)
{
	TCCR0 |= (1 << WGM00) | (1 << WGM01);					// Enable Fast PWM
 82c:	83 b7       	in	r24, 0x33	; 51
 82e:	88 64       	ori	r24, 0x48	; 72
 830:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << COM01);									// Clear OC2 on Compare Match (non-inverting mode)
 832:	83 b7       	in	r24, 0x33	; 51
 834:	80 62       	ori	r24, 0x20	; 32
 836:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << CS00);									// Set prescaler 1	
 838:	83 b7       	in	r24, 0x33	; 51
 83a:	81 60       	ori	r24, 0x01	; 1
 83c:	83 bf       	out	0x33, r24	; 51
 83e:	08 95       	ret

00000840 <PWM2_init>:



void PWM2_init(void)										// PWM2 (PD7 of ATmega32A)
{
	TCCR2 |= (1 << WGM20) | (1 << WGM21);					// Enable Fast PWM
 840:	85 b5       	in	r24, 0x25	; 37
 842:	88 64       	ori	r24, 0x48	; 72
 844:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1 << COM21);									// Clear OC2 on Compare Match (non-inverting mode)
 846:	85 b5       	in	r24, 0x25	; 37
 848:	80 62       	ori	r24, 0x20	; 32
 84a:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1 << CS20);									// Set prescaler 1	
 84c:	85 b5       	in	r24, 0x25	; 37
 84e:	81 60       	ori	r24, 0x01	; 1
 850:	85 bd       	out	0x25, r24	; 37
 852:	08 95       	ret

00000854 <PWM0>:

/* PWM Controlling Functions*/

void PWM0(int dutyCycle)
{
	OCR0 = dutyCycle;
 854:	8c bf       	out	0x3c, r24	; 60
 856:	08 95       	ret

00000858 <PWM2>:
	OCR1B = dutyCycle;
}

void PWM2(int dutyCycle)
{
	OCR2 = dutyCycle;
 858:	83 bd       	out	0x23, r24	; 35
 85a:	08 95       	ret

0000085c <UART_init>:
#include "serial_lib.h"

void UART_init(void)
{
	UCSRC &= ~(1 << UMSEL);						// Asynchronous Mode Selection
 85c:	80 b5       	in	r24, 0x20	; 32
 85e:	8f 7b       	andi	r24, 0xBF	; 191
 860:	80 bd       	out	0x20, r24	; 32
	UCSRA &= ~(1 << U2X);						// Normal Transmission Mode
 862:	59 98       	cbi	0x0b, 1	; 11
	UBRRH = 0;
 864:	10 bc       	out	0x20, r1	; 32
	UBRRL = 103;
 866:	87 e6       	ldi	r24, 0x67	; 103
 868:	89 b9       	out	0x09, r24	; 9
	UCSRB |= (1 << RXEN) | (1 << TXEN);
 86a:	8a b1       	in	r24, 0x0a	; 10
 86c:	88 61       	ori	r24, 0x18	; 24
 86e:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1 << USBS) | (3 << UCSZ0);
 870:	80 b5       	in	r24, 0x20	; 32
 872:	8e 68       	ori	r24, 0x8E	; 142
 874:	80 bd       	out	0x20, r24	; 32
 876:	08 95       	ret

00000878 <__subsf3>:
 878:	50 58       	subi	r21, 0x80	; 128

0000087a <__addsf3>:
 87a:	bb 27       	eor	r27, r27
 87c:	aa 27       	eor	r26, r26
 87e:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__addsf3x>
 882:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__fp_round>
 886:	0e 94 25 05 	call	0xa4a	; 0xa4a <__fp_pscA>
 88a:	38 f0       	brcs	.+14     	; 0x89a <__addsf3+0x20>
 88c:	0e 94 2c 05 	call	0xa58	; 0xa58 <__fp_pscB>
 890:	20 f0       	brcs	.+8      	; 0x89a <__addsf3+0x20>
 892:	39 f4       	brne	.+14     	; 0x8a2 <__addsf3+0x28>
 894:	9f 3f       	cpi	r25, 0xFF	; 255
 896:	19 f4       	brne	.+6      	; 0x89e <__addsf3+0x24>
 898:	26 f4       	brtc	.+8      	; 0x8a2 <__addsf3+0x28>
 89a:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__fp_nan>
 89e:	0e f4       	brtc	.+2      	; 0x8a2 <__addsf3+0x28>
 8a0:	e0 95       	com	r30
 8a2:	e7 fb       	bst	r30, 7
 8a4:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__fp_inf>

000008a8 <__addsf3x>:
 8a8:	e9 2f       	mov	r30, r25
 8aa:	0e 94 44 05 	call	0xa88	; 0xa88 <__fp_split3>
 8ae:	58 f3       	brcs	.-42     	; 0x886 <__addsf3+0xc>
 8b0:	ba 17       	cp	r27, r26
 8b2:	62 07       	cpc	r22, r18
 8b4:	73 07       	cpc	r23, r19
 8b6:	84 07       	cpc	r24, r20
 8b8:	95 07       	cpc	r25, r21
 8ba:	20 f0       	brcs	.+8      	; 0x8c4 <__addsf3x+0x1c>
 8bc:	79 f4       	brne	.+30     	; 0x8dc <__addsf3x+0x34>
 8be:	a6 f5       	brtc	.+104    	; 0x928 <__addsf3x+0x80>
 8c0:	0c 94 66 05 	jmp	0xacc	; 0xacc <__fp_zero>
 8c4:	0e f4       	brtc	.+2      	; 0x8c8 <__addsf3x+0x20>
 8c6:	e0 95       	com	r30
 8c8:	0b 2e       	mov	r0, r27
 8ca:	ba 2f       	mov	r27, r26
 8cc:	a0 2d       	mov	r26, r0
 8ce:	0b 01       	movw	r0, r22
 8d0:	b9 01       	movw	r22, r18
 8d2:	90 01       	movw	r18, r0
 8d4:	0c 01       	movw	r0, r24
 8d6:	ca 01       	movw	r24, r20
 8d8:	a0 01       	movw	r20, r0
 8da:	11 24       	eor	r1, r1
 8dc:	ff 27       	eor	r31, r31
 8de:	59 1b       	sub	r21, r25
 8e0:	99 f0       	breq	.+38     	; 0x908 <__addsf3x+0x60>
 8e2:	59 3f       	cpi	r21, 0xF9	; 249
 8e4:	50 f4       	brcc	.+20     	; 0x8fa <__addsf3x+0x52>
 8e6:	50 3e       	cpi	r21, 0xE0	; 224
 8e8:	68 f1       	brcs	.+90     	; 0x944 <__addsf3x+0x9c>
 8ea:	1a 16       	cp	r1, r26
 8ec:	f0 40       	sbci	r31, 0x00	; 0
 8ee:	a2 2f       	mov	r26, r18
 8f0:	23 2f       	mov	r18, r19
 8f2:	34 2f       	mov	r19, r20
 8f4:	44 27       	eor	r20, r20
 8f6:	58 5f       	subi	r21, 0xF8	; 248
 8f8:	f3 cf       	rjmp	.-26     	; 0x8e0 <__addsf3x+0x38>
 8fa:	46 95       	lsr	r20
 8fc:	37 95       	ror	r19
 8fe:	27 95       	ror	r18
 900:	a7 95       	ror	r26
 902:	f0 40       	sbci	r31, 0x00	; 0
 904:	53 95       	inc	r21
 906:	c9 f7       	brne	.-14     	; 0x8fa <__addsf3x+0x52>
 908:	7e f4       	brtc	.+30     	; 0x928 <__addsf3x+0x80>
 90a:	1f 16       	cp	r1, r31
 90c:	ba 0b       	sbc	r27, r26
 90e:	62 0b       	sbc	r22, r18
 910:	73 0b       	sbc	r23, r19
 912:	84 0b       	sbc	r24, r20
 914:	ba f0       	brmi	.+46     	; 0x944 <__addsf3x+0x9c>
 916:	91 50       	subi	r25, 0x01	; 1
 918:	a1 f0       	breq	.+40     	; 0x942 <__addsf3x+0x9a>
 91a:	ff 0f       	add	r31, r31
 91c:	bb 1f       	adc	r27, r27
 91e:	66 1f       	adc	r22, r22
 920:	77 1f       	adc	r23, r23
 922:	88 1f       	adc	r24, r24
 924:	c2 f7       	brpl	.-16     	; 0x916 <__addsf3x+0x6e>
 926:	0e c0       	rjmp	.+28     	; 0x944 <__addsf3x+0x9c>
 928:	ba 0f       	add	r27, r26
 92a:	62 1f       	adc	r22, r18
 92c:	73 1f       	adc	r23, r19
 92e:	84 1f       	adc	r24, r20
 930:	48 f4       	brcc	.+18     	; 0x944 <__addsf3x+0x9c>
 932:	87 95       	ror	r24
 934:	77 95       	ror	r23
 936:	67 95       	ror	r22
 938:	b7 95       	ror	r27
 93a:	f7 95       	ror	r31
 93c:	9e 3f       	cpi	r25, 0xFE	; 254
 93e:	08 f0       	brcs	.+2      	; 0x942 <__addsf3x+0x9a>
 940:	b0 cf       	rjmp	.-160    	; 0x8a2 <__addsf3+0x28>
 942:	93 95       	inc	r25
 944:	88 0f       	add	r24, r24
 946:	08 f0       	brcs	.+2      	; 0x94a <__addsf3x+0xa2>
 948:	99 27       	eor	r25, r25
 94a:	ee 0f       	add	r30, r30
 94c:	97 95       	ror	r25
 94e:	87 95       	ror	r24
 950:	08 95       	ret

00000952 <__fixsfsi>:
 952:	0e 94 b0 04 	call	0x960	; 0x960 <__fixunssfsi>
 956:	68 94       	set
 958:	b1 11       	cpse	r27, r1
 95a:	0c 94 67 05 	jmp	0xace	; 0xace <__fp_szero>
 95e:	08 95       	ret

00000960 <__fixunssfsi>:
 960:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fp_splitA>
 964:	88 f0       	brcs	.+34     	; 0x988 <__fixunssfsi+0x28>
 966:	9f 57       	subi	r25, 0x7F	; 127
 968:	98 f0       	brcs	.+38     	; 0x990 <__fixunssfsi+0x30>
 96a:	b9 2f       	mov	r27, r25
 96c:	99 27       	eor	r25, r25
 96e:	b7 51       	subi	r27, 0x17	; 23
 970:	b0 f0       	brcs	.+44     	; 0x99e <__fixunssfsi+0x3e>
 972:	e1 f0       	breq	.+56     	; 0x9ac <__fixunssfsi+0x4c>
 974:	66 0f       	add	r22, r22
 976:	77 1f       	adc	r23, r23
 978:	88 1f       	adc	r24, r24
 97a:	99 1f       	adc	r25, r25
 97c:	1a f0       	brmi	.+6      	; 0x984 <__fixunssfsi+0x24>
 97e:	ba 95       	dec	r27
 980:	c9 f7       	brne	.-14     	; 0x974 <__fixunssfsi+0x14>
 982:	14 c0       	rjmp	.+40     	; 0x9ac <__fixunssfsi+0x4c>
 984:	b1 30       	cpi	r27, 0x01	; 1
 986:	91 f0       	breq	.+36     	; 0x9ac <__fixunssfsi+0x4c>
 988:	0e 94 66 05 	call	0xacc	; 0xacc <__fp_zero>
 98c:	b1 e0       	ldi	r27, 0x01	; 1
 98e:	08 95       	ret
 990:	0c 94 66 05 	jmp	0xacc	; 0xacc <__fp_zero>
 994:	67 2f       	mov	r22, r23
 996:	78 2f       	mov	r23, r24
 998:	88 27       	eor	r24, r24
 99a:	b8 5f       	subi	r27, 0xF8	; 248
 99c:	39 f0       	breq	.+14     	; 0x9ac <__fixunssfsi+0x4c>
 99e:	b9 3f       	cpi	r27, 0xF9	; 249
 9a0:	cc f3       	brlt	.-14     	; 0x994 <__fixunssfsi+0x34>
 9a2:	86 95       	lsr	r24
 9a4:	77 95       	ror	r23
 9a6:	67 95       	ror	r22
 9a8:	b3 95       	inc	r27
 9aa:	d9 f7       	brne	.-10     	; 0x9a2 <__fixunssfsi+0x42>
 9ac:	3e f4       	brtc	.+14     	; 0x9bc <__fixunssfsi+0x5c>
 9ae:	90 95       	com	r25
 9b0:	80 95       	com	r24
 9b2:	70 95       	com	r23
 9b4:	61 95       	neg	r22
 9b6:	7f 4f       	sbci	r23, 0xFF	; 255
 9b8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ba:	9f 4f       	sbci	r25, 0xFF	; 255
 9bc:	08 95       	ret

000009be <__floatunsisf>:
 9be:	e8 94       	clt
 9c0:	09 c0       	rjmp	.+18     	; 0x9d4 <__floatsisf+0x12>

000009c2 <__floatsisf>:
 9c2:	97 fb       	bst	r25, 7
 9c4:	3e f4       	brtc	.+14     	; 0x9d4 <__floatsisf+0x12>
 9c6:	90 95       	com	r25
 9c8:	80 95       	com	r24
 9ca:	70 95       	com	r23
 9cc:	61 95       	neg	r22
 9ce:	7f 4f       	sbci	r23, 0xFF	; 255
 9d0:	8f 4f       	sbci	r24, 0xFF	; 255
 9d2:	9f 4f       	sbci	r25, 0xFF	; 255
 9d4:	99 23       	and	r25, r25
 9d6:	a9 f0       	breq	.+42     	; 0xa02 <__floatsisf+0x40>
 9d8:	f9 2f       	mov	r31, r25
 9da:	96 e9       	ldi	r25, 0x96	; 150
 9dc:	bb 27       	eor	r27, r27
 9de:	93 95       	inc	r25
 9e0:	f6 95       	lsr	r31
 9e2:	87 95       	ror	r24
 9e4:	77 95       	ror	r23
 9e6:	67 95       	ror	r22
 9e8:	b7 95       	ror	r27
 9ea:	f1 11       	cpse	r31, r1
 9ec:	f8 cf       	rjmp	.-16     	; 0x9de <__floatsisf+0x1c>
 9ee:	fa f4       	brpl	.+62     	; 0xa2e <__floatsisf+0x6c>
 9f0:	bb 0f       	add	r27, r27
 9f2:	11 f4       	brne	.+4      	; 0x9f8 <__floatsisf+0x36>
 9f4:	60 ff       	sbrs	r22, 0
 9f6:	1b c0       	rjmp	.+54     	; 0xa2e <__floatsisf+0x6c>
 9f8:	6f 5f       	subi	r22, 0xFF	; 255
 9fa:	7f 4f       	sbci	r23, 0xFF	; 255
 9fc:	8f 4f       	sbci	r24, 0xFF	; 255
 9fe:	9f 4f       	sbci	r25, 0xFF	; 255
 a00:	16 c0       	rjmp	.+44     	; 0xa2e <__floatsisf+0x6c>
 a02:	88 23       	and	r24, r24
 a04:	11 f0       	breq	.+4      	; 0xa0a <__floatsisf+0x48>
 a06:	96 e9       	ldi	r25, 0x96	; 150
 a08:	11 c0       	rjmp	.+34     	; 0xa2c <__floatsisf+0x6a>
 a0a:	77 23       	and	r23, r23
 a0c:	21 f0       	breq	.+8      	; 0xa16 <__floatsisf+0x54>
 a0e:	9e e8       	ldi	r25, 0x8E	; 142
 a10:	87 2f       	mov	r24, r23
 a12:	76 2f       	mov	r23, r22
 a14:	05 c0       	rjmp	.+10     	; 0xa20 <__floatsisf+0x5e>
 a16:	66 23       	and	r22, r22
 a18:	71 f0       	breq	.+28     	; 0xa36 <__floatsisf+0x74>
 a1a:	96 e8       	ldi	r25, 0x86	; 134
 a1c:	86 2f       	mov	r24, r22
 a1e:	70 e0       	ldi	r23, 0x00	; 0
 a20:	60 e0       	ldi	r22, 0x00	; 0
 a22:	2a f0       	brmi	.+10     	; 0xa2e <__floatsisf+0x6c>
 a24:	9a 95       	dec	r25
 a26:	66 0f       	add	r22, r22
 a28:	77 1f       	adc	r23, r23
 a2a:	88 1f       	adc	r24, r24
 a2c:	da f7       	brpl	.-10     	; 0xa24 <__floatsisf+0x62>
 a2e:	88 0f       	add	r24, r24
 a30:	96 95       	lsr	r25
 a32:	87 95       	ror	r24
 a34:	97 f9       	bld	r25, 7
 a36:	08 95       	ret

00000a38 <__fp_inf>:
 a38:	97 f9       	bld	r25, 7
 a3a:	9f 67       	ori	r25, 0x7F	; 127
 a3c:	80 e8       	ldi	r24, 0x80	; 128
 a3e:	70 e0       	ldi	r23, 0x00	; 0
 a40:	60 e0       	ldi	r22, 0x00	; 0
 a42:	08 95       	ret

00000a44 <__fp_nan>:
 a44:	9f ef       	ldi	r25, 0xFF	; 255
 a46:	80 ec       	ldi	r24, 0xC0	; 192
 a48:	08 95       	ret

00000a4a <__fp_pscA>:
 a4a:	00 24       	eor	r0, r0
 a4c:	0a 94       	dec	r0
 a4e:	16 16       	cp	r1, r22
 a50:	17 06       	cpc	r1, r23
 a52:	18 06       	cpc	r1, r24
 a54:	09 06       	cpc	r0, r25
 a56:	08 95       	ret

00000a58 <__fp_pscB>:
 a58:	00 24       	eor	r0, r0
 a5a:	0a 94       	dec	r0
 a5c:	12 16       	cp	r1, r18
 a5e:	13 06       	cpc	r1, r19
 a60:	14 06       	cpc	r1, r20
 a62:	05 06       	cpc	r0, r21
 a64:	08 95       	ret

00000a66 <__fp_round>:
 a66:	09 2e       	mov	r0, r25
 a68:	03 94       	inc	r0
 a6a:	00 0c       	add	r0, r0
 a6c:	11 f4       	brne	.+4      	; 0xa72 <__fp_round+0xc>
 a6e:	88 23       	and	r24, r24
 a70:	52 f0       	brmi	.+20     	; 0xa86 <__fp_round+0x20>
 a72:	bb 0f       	add	r27, r27
 a74:	40 f4       	brcc	.+16     	; 0xa86 <__fp_round+0x20>
 a76:	bf 2b       	or	r27, r31
 a78:	11 f4       	brne	.+4      	; 0xa7e <__fp_round+0x18>
 a7a:	60 ff       	sbrs	r22, 0
 a7c:	04 c0       	rjmp	.+8      	; 0xa86 <__fp_round+0x20>
 a7e:	6f 5f       	subi	r22, 0xFF	; 255
 a80:	7f 4f       	sbci	r23, 0xFF	; 255
 a82:	8f 4f       	sbci	r24, 0xFF	; 255
 a84:	9f 4f       	sbci	r25, 0xFF	; 255
 a86:	08 95       	ret

00000a88 <__fp_split3>:
 a88:	57 fd       	sbrc	r21, 7
 a8a:	90 58       	subi	r25, 0x80	; 128
 a8c:	44 0f       	add	r20, r20
 a8e:	55 1f       	adc	r21, r21
 a90:	59 f0       	breq	.+22     	; 0xaa8 <__fp_splitA+0x10>
 a92:	5f 3f       	cpi	r21, 0xFF	; 255
 a94:	71 f0       	breq	.+28     	; 0xab2 <__fp_splitA+0x1a>
 a96:	47 95       	ror	r20

00000a98 <__fp_splitA>:
 a98:	88 0f       	add	r24, r24
 a9a:	97 fb       	bst	r25, 7
 a9c:	99 1f       	adc	r25, r25
 a9e:	61 f0       	breq	.+24     	; 0xab8 <__fp_splitA+0x20>
 aa0:	9f 3f       	cpi	r25, 0xFF	; 255
 aa2:	79 f0       	breq	.+30     	; 0xac2 <__fp_splitA+0x2a>
 aa4:	87 95       	ror	r24
 aa6:	08 95       	ret
 aa8:	12 16       	cp	r1, r18
 aaa:	13 06       	cpc	r1, r19
 aac:	14 06       	cpc	r1, r20
 aae:	55 1f       	adc	r21, r21
 ab0:	f2 cf       	rjmp	.-28     	; 0xa96 <__fp_split3+0xe>
 ab2:	46 95       	lsr	r20
 ab4:	f1 df       	rcall	.-30     	; 0xa98 <__fp_splitA>
 ab6:	08 c0       	rjmp	.+16     	; 0xac8 <__fp_splitA+0x30>
 ab8:	16 16       	cp	r1, r22
 aba:	17 06       	cpc	r1, r23
 abc:	18 06       	cpc	r1, r24
 abe:	99 1f       	adc	r25, r25
 ac0:	f1 cf       	rjmp	.-30     	; 0xaa4 <__fp_splitA+0xc>
 ac2:	86 95       	lsr	r24
 ac4:	71 05       	cpc	r23, r1
 ac6:	61 05       	cpc	r22, r1
 ac8:	08 94       	sec
 aca:	08 95       	ret

00000acc <__fp_zero>:
 acc:	e8 94       	clt

00000ace <__fp_szero>:
 ace:	bb 27       	eor	r27, r27
 ad0:	66 27       	eor	r22, r22
 ad2:	77 27       	eor	r23, r23
 ad4:	cb 01       	movw	r24, r22
 ad6:	97 f9       	bld	r25, 7
 ad8:	08 95       	ret

00000ada <__mulsf3>:
 ada:	0e 94 80 05 	call	0xb00	; 0xb00 <__mulsf3x>
 ade:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__fp_round>
 ae2:	0e 94 25 05 	call	0xa4a	; 0xa4a <__fp_pscA>
 ae6:	38 f0       	brcs	.+14     	; 0xaf6 <__mulsf3+0x1c>
 ae8:	0e 94 2c 05 	call	0xa58	; 0xa58 <__fp_pscB>
 aec:	20 f0       	brcs	.+8      	; 0xaf6 <__mulsf3+0x1c>
 aee:	95 23       	and	r25, r21
 af0:	11 f0       	breq	.+4      	; 0xaf6 <__mulsf3+0x1c>
 af2:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__fp_inf>
 af6:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__fp_nan>
 afa:	11 24       	eor	r1, r1
 afc:	0c 94 67 05 	jmp	0xace	; 0xace <__fp_szero>

00000b00 <__mulsf3x>:
 b00:	0e 94 44 05 	call	0xa88	; 0xa88 <__fp_split3>
 b04:	70 f3       	brcs	.-36     	; 0xae2 <__mulsf3+0x8>

00000b06 <__mulsf3_pse>:
 b06:	95 9f       	mul	r25, r21
 b08:	c1 f3       	breq	.-16     	; 0xafa <__mulsf3+0x20>
 b0a:	95 0f       	add	r25, r21
 b0c:	50 e0       	ldi	r21, 0x00	; 0
 b0e:	55 1f       	adc	r21, r21
 b10:	62 9f       	mul	r22, r18
 b12:	f0 01       	movw	r30, r0
 b14:	72 9f       	mul	r23, r18
 b16:	bb 27       	eor	r27, r27
 b18:	f0 0d       	add	r31, r0
 b1a:	b1 1d       	adc	r27, r1
 b1c:	63 9f       	mul	r22, r19
 b1e:	aa 27       	eor	r26, r26
 b20:	f0 0d       	add	r31, r0
 b22:	b1 1d       	adc	r27, r1
 b24:	aa 1f       	adc	r26, r26
 b26:	64 9f       	mul	r22, r20
 b28:	66 27       	eor	r22, r22
 b2a:	b0 0d       	add	r27, r0
 b2c:	a1 1d       	adc	r26, r1
 b2e:	66 1f       	adc	r22, r22
 b30:	82 9f       	mul	r24, r18
 b32:	22 27       	eor	r18, r18
 b34:	b0 0d       	add	r27, r0
 b36:	a1 1d       	adc	r26, r1
 b38:	62 1f       	adc	r22, r18
 b3a:	73 9f       	mul	r23, r19
 b3c:	b0 0d       	add	r27, r0
 b3e:	a1 1d       	adc	r26, r1
 b40:	62 1f       	adc	r22, r18
 b42:	83 9f       	mul	r24, r19
 b44:	a0 0d       	add	r26, r0
 b46:	61 1d       	adc	r22, r1
 b48:	22 1f       	adc	r18, r18
 b4a:	74 9f       	mul	r23, r20
 b4c:	33 27       	eor	r19, r19
 b4e:	a0 0d       	add	r26, r0
 b50:	61 1d       	adc	r22, r1
 b52:	23 1f       	adc	r18, r19
 b54:	84 9f       	mul	r24, r20
 b56:	60 0d       	add	r22, r0
 b58:	21 1d       	adc	r18, r1
 b5a:	82 2f       	mov	r24, r18
 b5c:	76 2f       	mov	r23, r22
 b5e:	6a 2f       	mov	r22, r26
 b60:	11 24       	eor	r1, r1
 b62:	9f 57       	subi	r25, 0x7F	; 127
 b64:	50 40       	sbci	r21, 0x00	; 0
 b66:	9a f0       	brmi	.+38     	; 0xb8e <__mulsf3_pse+0x88>
 b68:	f1 f0       	breq	.+60     	; 0xba6 <__mulsf3_pse+0xa0>
 b6a:	88 23       	and	r24, r24
 b6c:	4a f0       	brmi	.+18     	; 0xb80 <__mulsf3_pse+0x7a>
 b6e:	ee 0f       	add	r30, r30
 b70:	ff 1f       	adc	r31, r31
 b72:	bb 1f       	adc	r27, r27
 b74:	66 1f       	adc	r22, r22
 b76:	77 1f       	adc	r23, r23
 b78:	88 1f       	adc	r24, r24
 b7a:	91 50       	subi	r25, 0x01	; 1
 b7c:	50 40       	sbci	r21, 0x00	; 0
 b7e:	a9 f7       	brne	.-22     	; 0xb6a <__mulsf3_pse+0x64>
 b80:	9e 3f       	cpi	r25, 0xFE	; 254
 b82:	51 05       	cpc	r21, r1
 b84:	80 f0       	brcs	.+32     	; 0xba6 <__mulsf3_pse+0xa0>
 b86:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__fp_inf>
 b8a:	0c 94 67 05 	jmp	0xace	; 0xace <__fp_szero>
 b8e:	5f 3f       	cpi	r21, 0xFF	; 255
 b90:	e4 f3       	brlt	.-8      	; 0xb8a <__mulsf3_pse+0x84>
 b92:	98 3e       	cpi	r25, 0xE8	; 232
 b94:	d4 f3       	brlt	.-12     	; 0xb8a <__mulsf3_pse+0x84>
 b96:	86 95       	lsr	r24
 b98:	77 95       	ror	r23
 b9a:	67 95       	ror	r22
 b9c:	b7 95       	ror	r27
 b9e:	f7 95       	ror	r31
 ba0:	e7 95       	ror	r30
 ba2:	9f 5f       	subi	r25, 0xFF	; 255
 ba4:	c1 f7       	brne	.-16     	; 0xb96 <__mulsf3_pse+0x90>
 ba6:	fe 2b       	or	r31, r30
 ba8:	88 0f       	add	r24, r24
 baa:	91 1d       	adc	r25, r1
 bac:	96 95       	lsr	r25
 bae:	87 95       	ror	r24
 bb0:	97 f9       	bld	r25, 7
 bb2:	08 95       	ret

00000bb4 <_exit>:
 bb4:	f8 94       	cli

00000bb6 <__stop_program>:
 bb6:	ff cf       	rjmp	.-2      	; 0xbb6 <__stop_program>
