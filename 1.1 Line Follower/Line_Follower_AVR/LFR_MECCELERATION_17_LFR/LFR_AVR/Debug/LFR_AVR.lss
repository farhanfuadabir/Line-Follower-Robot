
LFR_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000110c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006e  00800060  0000110c  000011a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000043  008000ce  008000ce  0000120e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000120e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  0000127c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e93  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a08  00000000  00000000  00003297  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001183  00000000  00000000  00003c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c8  00000000  00000000  00004e24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000090d  00000000  00000000  000051ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cef  00000000  00000000  00005af9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000067e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 33 01 	jmp	0x266	; 0x266 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e0       	ldi	r30, 0x0C	; 12
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 3c       	cpi	r26, 0xCE	; 206
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ae ec       	ldi	r26, 0xCE	; 206
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 31       	cpi	r26, 0x11	; 17
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 85 04 	call	0x90a	; 0x90a <main>
      8a:	0c 94 84 08 	jmp	0x1108	; 0x1108 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <adc_init>:
#include "ADC_routine.h"
#include "serial_lib.h"

void adc_init()
{
	ADMUX |= (1 << REFS0);									    //reference AVcc 5volt
      92:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1 << ADEN);										//enable ADC Module
      94:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);		//prescaler 128
      96:	86 b1       	in	r24, 0x06	; 6
      98:	87 60       	ori	r24, 0x07	; 7
      9a:	86 b9       	out	0x06, r24	; 6
      9c:	08 95       	ret

0000009e <adcRead>:
}

int adcRead(uint8_t channel)
{
	ADMUX  &= ~(0x1F);				//disable all ADC channel
      9e:	97 b1       	in	r25, 0x07	; 7
      a0:	90 7e       	andi	r25, 0xE0	; 224
      a2:	97 b9       	out	0x07, r25	; 7
	ADMUX |= channel;		//set the ADC channel
      a4:	97 b1       	in	r25, 0x07	; 7
      a6:	89 2b       	or	r24, r25
      a8:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);			//start ADC conversion
      aa:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1<<ADSC));		//wait until conversion complete
      ac:	36 99       	sbic	0x06, 6	; 6
      ae:	fe cf       	rjmp	.-4      	; 0xac <adcRead+0xe>
	return ADC;						//return the ADC converted digital value
      b0:	84 b1       	in	r24, 0x04	; 4
      b2:	95 b1       	in	r25, 0x05	; 5
}
      b4:	08 95       	ret

000000b6 <sensorValueConversion>:
void timercount(uint16_t durationmillis)
{
	TCCR1B |= (1 << WGM12);
	unsigned long timerlimit = ((F_CPU / 1024) * (durationmillis / 1000)) - 1;
	OCR1A = timerlimit;
	TCCR1B |= (1 << CS12) | (1 << CS10);
      b6:	9f 92       	push	r9
      b8:	af 92       	push	r10
      ba:	bf 92       	push	r11
      bc:	cf 92       	push	r12
      be:	df 92       	push	r13
      c0:	ef 92       	push	r14
      c2:	ff 92       	push	r15
      c4:	0f 93       	push	r16
      c6:	1f 93       	push	r17
      c8:	cf 93       	push	r28
      ca:	df 93       	push	r29
      cc:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <sensorCount>
      d0:	10 92 d3 00 	sts	0x00D3, r1	; 0x8000d3 <leftFlag>
      d4:	10 92 d4 00 	sts	0x00D4, r1	; 0x8000d4 <rightFlag>
      d8:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <allFlag>
      dc:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <rightAcuteFlag>
      e0:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <leftAcuteFlag>
      e4:	0f 2e       	mov	r0, r31
      e6:	f5 e9       	ldi	r31, 0x95	; 149
      e8:	cf 2e       	mov	r12, r31
      ea:	f0 e0       	ldi	r31, 0x00	; 0
      ec:	df 2e       	mov	r13, r31
      ee:	f0 2d       	mov	r31, r0
      f0:	0f ef       	ldi	r16, 0xFF	; 255
      f2:	1f ef       	ldi	r17, 0xFF	; 255
      f4:	0f 2e       	mov	r0, r31
      f6:	fe ef       	ldi	r31, 0xFE	; 254
      f8:	ff 2e       	mov	r15, r31
      fa:	f0 2d       	mov	r31, r0
      fc:	d1 e0       	ldi	r29, 0x01	; 1
      fe:	c0 e0       	ldi	r28, 0x00	; 0
     100:	0f 2e       	mov	r0, r31
     102:	f5 e0       	ldi	r31, 0x05	; 5
     104:	bf 2e       	mov	r11, r31
     106:	f0 2d       	mov	r31, r0
     108:	a1 2c       	mov	r10, r1
     10a:	e1 2c       	mov	r14, r1
     10c:	99 24       	eor	r9, r9
     10e:	93 94       	inc	r9
     110:	06 c0       	rjmp	.+12     	; 0x11e <sensorValueConversion+0x68>
     112:	cf 5f       	subi	r28, 0xFF	; 255
     114:	df 5f       	subi	r29, 0xFF	; 255
     116:	f3 94       	inc	r15
     118:	f3 94       	inc	r15
     11a:	0f 5f       	subi	r16, 0xFF	; 255
     11c:	1f 4f       	sbci	r17, 0xFF	; 255
     11e:	8c 2f       	mov	r24, r28
     120:	0e 94 4f 00 	call	0x9e	; 0x9e <adcRead>
     124:	f6 01       	movw	r30, r12
     126:	21 91       	ld	r18, Z+
     128:	31 91       	ld	r19, Z+
     12a:	6f 01       	movw	r12, r30
     12c:	28 17       	cp	r18, r24
     12e:	39 07       	cpc	r19, r25
     130:	f0 f4       	brcc	.+60     	; 0x16e <sensorValueConversion+0xb8>
     132:	c1 11       	cpse	r28, r1
     134:	03 c0       	rjmp	.+6      	; 0x13c <sensorValueConversion+0x86>
     136:	90 92 d3 00 	sts	0x00D3, r9	; 0x8000d3 <leftFlag>
     13a:	eb cf       	rjmp	.-42     	; 0x112 <sensorValueConversion+0x5c>
     13c:	c7 30       	cpi	r28, 0x07	; 7
     13e:	21 f4       	brne	.+8      	; 0x148 <sensorValueConversion+0x92>
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <rightFlag>
     146:	15 c0       	rjmp	.+42     	; 0x172 <sensorValueConversion+0xbc>
     148:	8b 2d       	mov	r24, r11
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	08 17       	cp	r16, r24
     14e:	19 07       	cpc	r17, r25
     150:	14 f4       	brge	.+4      	; 0x156 <sensorValueConversion+0xa0>
     152:	b0 2e       	mov	r11, r16
     154:	06 c0       	rjmp	.+12     	; 0x162 <sensorValueConversion+0xac>
     156:	8a 2d       	mov	r24, r10
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	80 17       	cp	r24, r16
     15c:	91 07       	cpc	r25, r17
     15e:	0c f4       	brge	.+2      	; 0x162 <sensorValueConversion+0xac>
     160:	a0 2e       	mov	r10, r16
     162:	ef 0c       	add	r14, r15
     164:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <sensorCount>
     168:	8f 5f       	subi	r24, 0xFF	; 255
     16a:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <sensorCount>
     16e:	d8 30       	cpi	r29, 0x08	; 8
     170:	80 f2       	brcs	.-96     	; 0x112 <sensorValueConversion+0x5c>
     172:	20 91 d7 00 	lds	r18, 0x00D7	; 0x8000d7 <sensorCount>
     176:	42 2f       	mov	r20, r18
     178:	50 e0       	ldi	r21, 0x00	; 0
     17a:	8a 2d       	mov	r24, r10
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	8b 19       	sub	r24, r11
     180:	91 09       	sbc	r25, r1
     182:	01 96       	adiw	r24, 0x01	; 1
     184:	48 17       	cp	r20, r24
     186:	59 07       	cpc	r21, r25
     188:	11 f5       	brne	.+68     	; 0x1ce <sensorValueConversion+0x118>
     18a:	f5 e0       	ldi	r31, 0x05	; 5
     18c:	af 12       	cpse	r10, r31
     18e:	06 c0       	rjmp	.+12     	; 0x19c <sensorValueConversion+0xe6>
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	8b 15       	cp	r24, r11
     194:	80 f4       	brcc	.+32     	; 0x1b6 <sensorValueConversion+0x100>
     196:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <rightAcuteFlag>
     19a:	11 c0       	rjmp	.+34     	; 0x1be <sensorValueConversion+0x108>
     19c:	b1 10       	cpse	r11, r1
     19e:	0b c0       	rjmp	.+22     	; 0x1b6 <sensorValueConversion+0x100>
     1a0:	e3 e0       	ldi	r30, 0x03	; 3
     1a2:	ea 15       	cp	r30, r10
     1a4:	40 f0       	brcs	.+16     	; 0x1b6 <sensorValueConversion+0x100>
     1a6:	81 e0       	ldi	r24, 0x01	; 1
     1a8:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <leftAcuteFlag>
     1ac:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <rightAcuteFlag>
     1b0:	81 30       	cpi	r24, 0x01	; 1
     1b2:	69 f4       	brne	.+26     	; 0x1ce <sensorValueConversion+0x118>
     1b4:	08 c0       	rjmp	.+16     	; 0x1c6 <sensorValueConversion+0x110>
     1b6:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <rightAcuteFlag>
     1ba:	81 30       	cpi	r24, 0x01	; 1
     1bc:	41 f4       	brne	.+16     	; 0x1ce <sensorValueConversion+0x118>
     1be:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <leftAcuteFlag>
     1c2:	81 30       	cpi	r24, 0x01	; 1
     1c4:	21 f4       	brne	.+8      	; 0x1ce <sensorValueConversion+0x118>
     1c6:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <rightAcuteFlag>
     1ca:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <leftAcuteFlag>
     1ce:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <leftFlag>
     1d2:	81 30       	cpi	r24, 0x01	; 1
     1d4:	51 f4       	brne	.+20     	; 0x1ea <sensorValueConversion+0x134>
     1d6:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <rightFlag>
     1da:	81 30       	cpi	r24, 0x01	; 1
     1dc:	31 f4       	brne	.+12     	; 0x1ea <sensorValueConversion+0x134>
     1de:	10 92 d3 00 	sts	0x00D3, r1	; 0x8000d3 <leftFlag>
     1e2:	10 92 d4 00 	sts	0x00D4, r1	; 0x8000d4 <rightFlag>
     1e6:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <allFlag>
     1ea:	8e 2d       	mov	r24, r14
     1ec:	62 2f       	mov	r22, r18
     1ee:	0e 94 15 08 	call	0x102a	; 0x102a <__udivmodqi4>
     1f2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <weightedValue>
     1f6:	26 30       	cpi	r18, 0x06	; 6
     1f8:	71 f4       	brne	.+28     	; 0x216 <sensorValueConversion+0x160>
     1fa:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <allFlag>
     1fe:	81 30       	cpi	r24, 0x01	; 1
     200:	51 f4       	brne	.+20     	; 0x216 <sensorValueConversion+0x160>
     202:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <stopFlag>
     206:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <stopFlag+0x1>
     20a:	01 96       	adiw	r24, 0x01	; 1
     20c:	90 93 d6 00 	sts	0x00D6, r25	; 0x8000d6 <stopFlag+0x1>
     210:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <stopFlag>
     214:	04 c0       	rjmp	.+8      	; 0x21e <sensorValueConversion+0x168>
     216:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <stopFlag+0x1>
     21a:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <stopFlag>
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	1f 91       	pop	r17
     224:	0f 91       	pop	r16
     226:	ff 90       	pop	r15
     228:	ef 90       	pop	r14
     22a:	df 90       	pop	r13
     22c:	cf 90       	pop	r12
     22e:	bf 90       	pop	r11
     230:	af 90       	pop	r10
     232:	9f 90       	pop	r9
     234:	08 95       	ret

00000236 <setTimer>:
	
}

void setTimer(uint16_t durationMicros)
{
	duration = durationMicros;
     236:	90 93 ee 00 	sts	0x00EE, r25	; 0x8000ee <duration+0x1>
     23a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <duration>
	TIMSK |= (1 << OCIE1A);										// Set Timer1 Interrupt ON
     23e:	89 b7       	in	r24, 0x39	; 57
     240:	80 61       	ori	r24, 0x10	; 16
     242:	89 bf       	out	0x39, r24	; 57
	sei();														// Set Global Interrupt
     244:	78 94       	sei
	TCNT1 = 0;													// Reset Timer Count
     246:	1d bc       	out	0x2d, r1	; 45
     248:	1c bc       	out	0x2c, r1	; 44
	OCR1A = 0xF9;												// Compare Value for 1ms
     24a:	89 ef       	ldi	r24, 0xF9	; 249
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	9b bd       	out	0x2b, r25	; 43
     250:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1 << CS10) | (1 << CS11) | (1 << WGM12);			// Set Prescaler to 64 and CTC Mode
     252:	8e b5       	in	r24, 0x2e	; 46
     254:	8b 60       	ori	r24, 0x0B	; 11
     256:	8e bd       	out	0x2e, r24	; 46
     258:	08 95       	ret

0000025a <timerOff>:
}

void timerOff(void)
{
	TCCR1B = 0x00;
     25a:	1e bc       	out	0x2e, r1	; 46
	TIMSK = 0x00;
     25c:	19 be       	out	0x39, r1	; 57
	cli();
     25e:	f8 94       	cli
	TCNT1 = 0;
     260:	1d bc       	out	0x2d, r1	; 45
     262:	1c bc       	out	0x2c, r1	; 44
     264:	08 95       	ret

00000266 <__vector_7>:
}

ISR(TIMER1_COMPA_vect)
{
     266:	1f 92       	push	r1
     268:	0f 92       	push	r0
     26a:	0f b6       	in	r0, 0x3f	; 63
     26c:	0f 92       	push	r0
     26e:	11 24       	eor	r1, r1
     270:	2f 93       	push	r18
     272:	3f 93       	push	r19
     274:	8f 93       	push	r24
     276:	9f 93       	push	r25
	if (speedFlag == 0)
     278:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <speedFlag>
     27c:	81 11       	cpse	r24, r1
     27e:	20 c0       	rjmp	.+64     	; 0x2c0 <__vector_7+0x5a>
	{
		timerOverflow++;
     280:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <timerOverflow>
     284:	90 91 f0 00 	lds	r25, 0x00F0	; 0x8000f0 <timerOverflow+0x1>
     288:	01 96       	adiw	r24, 0x01	; 1
     28a:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <timerOverflow+0x1>
     28e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <timerOverflow>
		TCNT1 = 0;
     292:	1d bc       	out	0x2d, r1	; 45
     294:	1c bc       	out	0x2c, r1	; 44
		if (timerOverflow >= duration)
     296:	20 91 ef 00 	lds	r18, 0x00EF	; 0x8000ef <timerOverflow>
     29a:	30 91 f0 00 	lds	r19, 0x00F0	; 0x8000f0 <timerOverflow+0x1>
     29e:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <duration>
     2a2:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <duration+0x1>
     2a6:	28 17       	cp	r18, r24
     2a8:	39 07       	cpc	r19, r25
     2aa:	50 f0       	brcs	.+20     	; 0x2c0 <__vector_7+0x5a>
		{
			TCCR1B |= 0;
     2ac:	8e b5       	in	r24, 0x2e	; 46
     2ae:	8e bd       	out	0x2e, r24	; 46
			timerFlag = 1;
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <timerFlag>
			timerOverflow = 0;
     2b6:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <timerOverflow+0x1>
     2ba:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <timerOverflow>
			cli();
     2be:	f8 94       	cli
// 		else if (timerOverflow > (duration / 2))
// 		{
// 			maxSpeed = 200;
// 		}
// 	}
}
     2c0:	9f 91       	pop	r25
     2c2:	8f 91       	pop	r24
     2c4:	3f 91       	pop	r19
     2c6:	2f 91       	pop	r18
     2c8:	0f 90       	pop	r0
     2ca:	0f be       	out	0x3f, r0	; 63
     2cc:	0f 90       	pop	r0
     2ce:	1f 90       	pop	r1
     2d0:	18 95       	reti

000002d2 <setRotationForward>:
	motor2b_PORT &= ~(1 << motor2b_PIN);
}

void setRotationForward(void)
{
	enable1(0);
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0e 94 33 06 	call	0xc66	; 0xc66 <PWM0>
	enable2(0);
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	0e 94 35 06 	call	0xc6a	; 0xc6a <PWM2>
	
	motor1a_PORT |= (1 << motor1a_PIN);
     2e2:	af 9a       	sbi	0x15, 7	; 21
	motor1b_PORT &= ~(1 << motor1b_PIN);
     2e4:	ae 98       	cbi	0x15, 6	; 21
	motor2a_PORT |= (1 << motor2a_PIN);
     2e6:	ad 9a       	sbi	0x15, 5	; 21
	motor2b_PORT &= ~(1 << motor2b_PIN);
     2e8:	ac 98       	cbi	0x15, 4	; 21
     2ea:	08 95       	ret

000002ec <setRotationLeftSharp>:
}

void setRotationLeftSharp(void)
{
	enable1(0);
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0e 94 33 06 	call	0xc66	; 0xc66 <PWM0>
	enable2(0);
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	0e 94 35 06 	call	0xc6a	; 0xc6a <PWM2>
	
	motor1a_PORT &= ~(1 << motor1a_PIN);
     2fc:	af 98       	cbi	0x15, 7	; 21
	motor1b_PORT |= (1 << motor1b_PIN);
     2fe:	ae 9a       	sbi	0x15, 6	; 21
	motor2a_PORT |= (1 << motor2a_PIN);
     300:	ad 9a       	sbi	0x15, 5	; 21
	motor2b_PORT &= ~(1 << motor2b_PIN);
     302:	ac 98       	cbi	0x15, 4	; 21
     304:	08 95       	ret

00000306 <setRotationRightSharp>:
}

void setRotationRightSharp(void)
{
	enable1(0);
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	0e 94 33 06 	call	0xc66	; 0xc66 <PWM0>
	enable2(0);
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	0e 94 35 06 	call	0xc6a	; 0xc6a <PWM2>
	
	motor1a_PORT |= (1 << motor1a_PIN);
     316:	af 9a       	sbi	0x15, 7	; 21
	motor1b_PORT &= ~(1 << motor1b_PIN);
     318:	ae 98       	cbi	0x15, 6	; 21
	motor2a_PORT &= ~(1 << motor2a_PIN);
     31a:	ad 98       	cbi	0x15, 5	; 21
	motor2b_PORT |= (1 << motor2b_PIN);
     31c:	ac 9a       	sbi	0x15, 4	; 21
     31e:	08 95       	ret

00000320 <PID_Correction>:
// 		}
// 	}
}

void PID_Correction(void)
{
     320:	8f 92       	push	r8
     322:	9f 92       	push	r9
     324:	af 92       	push	r10
     326:	bf 92       	push	r11
     328:	cf 92       	push	r12
     32a:	df 92       	push	r13
     32c:	ef 92       	push	r14
     32e:	ff 92       	push	r15
	error = weightedValue - setPoint;
     330:	60 91 d8 00 	lds	r22, 0x00D8	; 0x8000d8 <weightedValue>
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	65 50       	subi	r22, 0x05	; 5
     338:	71 09       	sbc	r23, r1
     33a:	07 2e       	mov	r0, r23
     33c:	00 0c       	add	r0, r0
     33e:	88 0b       	sbc	r24, r24
     340:	99 0b       	sbc	r25, r25
     342:	0e 94 1c 07 	call	0xe38	; 0xe38 <__floatsisf>
     346:	6b 01       	movw	r12, r22
     348:	7c 01       	movw	r14, r24
     34a:	60 93 e8 00 	sts	0x00E8, r22	; 0x8000e8 <error>
     34e:	70 93 e9 00 	sts	0x00E9, r23	; 0x8000e9 <error+0x1>
     352:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <error+0x2>
     356:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <error+0x3>

	correction = ((Kp * error) + (Kd * (error - prev_error))/* + (Ki * sum_error)*/);
     35a:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <prev_error>
     35e:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <prev_error+0x1>
     362:	40 91 e6 00 	lds	r20, 0x00E6	; 0x8000e6 <prev_error+0x2>
     366:	50 91 e7 00 	lds	r21, 0x00E7	; 0x8000e7 <prev_error+0x3>
     36a:	0e 94 77 06 	call	0xcee	; 0xcee <__subsf3>
     36e:	4b 01       	movw	r8, r22
     370:	5c 01       	movw	r10, r24
     372:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Kd>
     376:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Kd+0x1>
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 1a 07 	call	0xe34	; 0xe34 <__floatunsisf>
     382:	9b 01       	movw	r18, r22
     384:	ac 01       	movw	r20, r24
     386:	c5 01       	movw	r24, r10
     388:	b4 01       	movw	r22, r8
     38a:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3>
     38e:	4b 01       	movw	r8, r22
     390:	5c 01       	movw	r10, r24
     392:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <Kp>
     396:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <Kp+0x1>
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	0e 94 1a 07 	call	0xe34	; 0xe34 <__floatunsisf>
     3a2:	a7 01       	movw	r20, r14
     3a4:	96 01       	movw	r18, r12
     3a6:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3>
     3aa:	9b 01       	movw	r18, r22
     3ac:	ac 01       	movw	r20, r24
     3ae:	c5 01       	movw	r24, r10
     3b0:	b4 01       	movw	r22, r8
     3b2:	0e 94 78 06 	call	0xcf0	; 0xcf0 <__addsf3>
     3b6:	60 93 e0 00 	sts	0x00E0, r22	; 0x8000e0 <correction>
     3ba:	70 93 e1 00 	sts	0x00E1, r23	; 0x8000e1 <correction+0x1>
     3be:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <correction+0x2>
     3c2:	90 93 e3 00 	sts	0x00E3, r25	; 0x8000e3 <correction+0x3>

	prev_error = error;
     3c6:	c0 92 e4 00 	sts	0x00E4, r12	; 0x8000e4 <prev_error>
     3ca:	d0 92 e5 00 	sts	0x00E5, r13	; 0x8000e5 <prev_error+0x1>
     3ce:	e0 92 e6 00 	sts	0x00E6, r14	; 0x8000e6 <prev_error+0x2>
     3d2:	f0 92 e7 00 	sts	0x00E7, r15	; 0x8000e7 <prev_error+0x3>
	motorResponse = (int)correction;
     3d6:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__fixsfsi>
     3da:	86 2f       	mov	r24, r22
     3dc:	97 2f       	mov	r25, r23
     3de:	26 2f       	mov	r18, r22
     3e0:	37 2f       	mov	r19, r23
     3e2:	30 93 df 00 	sts	0x00DF, r19	; 0x8000df <motorResponse+0x1>
     3e6:	20 93 de 00 	sts	0x00DE, r18	; 0x8000de <motorResponse>

	if(motorResponse > maxSpeed)
     3ea:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <maxSpeed>
     3ee:	42 2f       	mov	r20, r18
     3f0:	50 e0       	ldi	r21, 0x00	; 0
     3f2:	48 17       	cp	r20, r24
     3f4:	59 07       	cpc	r21, r25
     3f6:	ec f4       	brge	.+58     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
	{
		reverseSpeed = (motorResponse - maxSpeed);
     3f8:	62 1b       	sub	r22, r18
		if (reverseSpeed > maxSpeed) reverseSpeed = maxSpeed;
     3fa:	26 17       	cp	r18, r22
     3fc:	18 f0       	brcs	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	prev_error = error;
	motorResponse = (int)correction;

	if(motorResponse > maxSpeed)
	{
		reverseSpeed = (motorResponse - maxSpeed);
     3fe:	60 93 d9 00 	sts	0x00D9, r22	; 0x8000d9 <reverseSpeed>
     402:	02 c0       	rjmp	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		if (reverseSpeed > maxSpeed) reverseSpeed = maxSpeed;
     404:	20 93 d9 00 	sts	0x00D9, r18	; 0x8000d9 <reverseSpeed>
		motorResponse = maxSpeed;
     408:	50 93 df 00 	sts	0x00DF, r21	; 0x8000df <motorResponse+0x1>
     40c:	40 93 de 00 	sts	0x00DE, r20	; 0x8000de <motorResponse>
		
		setRotationRightSharp();
     410:	0e 94 83 01 	call	0x306	; 0x306 <setRotationRightSharp>
		
		RMspeed = reverseSpeed;
     414:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <reverseSpeed>
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	90 93 db 00 	sts	0x00DB, r25	; 0x8000db <RMspeed+0x1>
     41e:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <RMspeed>
		LMspeed = maxSpeed/* - (maxSpeed / speedCoefficient)*/;
     422:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <maxSpeed>
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	90 93 dd 00 	sts	0x00DD, r25	; 0x8000dd <LMspeed+0x1>
     42c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <LMspeed>
     430:	55 c0       	rjmp	.+170    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
	}
	
	else if(motorResponse < -maxSpeed)
     432:	ee 27       	eor	r30, r30
     434:	ff 27       	eor	r31, r31
     436:	e4 1b       	sub	r30, r20
     438:	f5 0b       	sbc	r31, r21
     43a:	8e 17       	cp	r24, r30
     43c:	9f 07       	cpc	r25, r31
     43e:	f4 f4       	brge	.+60     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
	{
		reverseSpeed = (-motorResponse - maxSpeed);
     440:	62 0f       	add	r22, r18
     442:	61 95       	neg	r22
		if (reverseSpeed > maxSpeed) reverseSpeed = maxSpeed;
     444:	26 17       	cp	r18, r22
     446:	18 f0       	brcs	.+6      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
		LMspeed = maxSpeed/* - (maxSpeed / speedCoefficient)*/;
	}
	
	else if(motorResponse < -maxSpeed)
	{
		reverseSpeed = (-motorResponse - maxSpeed);
     448:	60 93 d9 00 	sts	0x00D9, r22	; 0x8000d9 <reverseSpeed>
     44c:	02 c0       	rjmp	.+4      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
		if (reverseSpeed > maxSpeed) reverseSpeed = maxSpeed;
     44e:	20 93 d9 00 	sts	0x00D9, r18	; 0x8000d9 <reverseSpeed>
		motorResponse = -maxSpeed;
     452:	f0 93 df 00 	sts	0x00DF, r31	; 0x8000df <motorResponse+0x1>
     456:	e0 93 de 00 	sts	0x00DE, r30	; 0x8000de <motorResponse>
		
		setRotationLeftSharp();
     45a:	0e 94 76 01 	call	0x2ec	; 0x2ec <setRotationLeftSharp>
		
		RMspeed = maxSpeed;
     45e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <maxSpeed>
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	90 93 db 00 	sts	0x00DB, r25	; 0x8000db <RMspeed+0x1>
     468:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <RMspeed>
		LMspeed = reverseSpeed;
     46c:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <reverseSpeed>
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	90 93 dd 00 	sts	0x00DD, r25	; 0x8000dd <LMspeed+0x1>
     476:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <LMspeed>
     47a:	30 c0       	rjmp	.+96     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
	}
	


	else if(motorResponse >= 0 && motorResponse < maxSpeed)
     47c:	99 23       	and	r25, r25
     47e:	c4 f0       	brlt	.+48     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     480:	84 17       	cp	r24, r20
     482:	95 07       	cpc	r25, r21
     484:	5c f5       	brge	.+86     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
	{
		setRotationForward();
     486:	0e 94 69 01 	call	0x2d2	; 0x2d2 <setRotationForward>
		
		RMspeed = maxSpeed - motorResponse/* - (maxSpeed / speedCoefficient)*/;
     48a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <maxSpeed>
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	20 91 de 00 	lds	r18, 0x00DE	; 0x8000de <motorResponse>
     494:	30 91 df 00 	lds	r19, 0x00DF	; 0x8000df <motorResponse+0x1>
     498:	ac 01       	movw	r20, r24
     49a:	42 1b       	sub	r20, r18
     49c:	53 0b       	sbc	r21, r19
     49e:	50 93 db 00 	sts	0x00DB, r21	; 0x8000db <RMspeed+0x1>
     4a2:	40 93 da 00 	sts	0x00DA, r20	; 0x8000da <RMspeed>
		LMspeed = maxSpeed;		
     4a6:	90 93 dd 00 	sts	0x00DD, r25	; 0x8000dd <LMspeed+0x1>
     4aa:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <LMspeed>
     4ae:	16 c0       	rjmp	.+44     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
	}

	else if(motorResponse < 0 && motorResponse > -maxSpeed)
     4b0:	e8 17       	cp	r30, r24
     4b2:	f9 07       	cpc	r31, r25
     4b4:	9c f4       	brge	.+38     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
	{
		setRotationForward();
     4b6:	0e 94 69 01 	call	0x2d2	; 0x2d2 <setRotationForward>
		
		RMspeed = maxSpeed/* - (maxSpeed / speedCoefficient)*/;
     4ba:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <maxSpeed>
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	90 93 db 00 	sts	0x00DB, r25	; 0x8000db <RMspeed+0x1>
     4c4:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <RMspeed>
		LMspeed = maxSpeed + motorResponse;
     4c8:	20 91 de 00 	lds	r18, 0x00DE	; 0x8000de <motorResponse>
     4cc:	30 91 df 00 	lds	r19, 0x00DF	; 0x8000df <motorResponse+0x1>
     4d0:	82 0f       	add	r24, r18
     4d2:	93 1f       	adc	r25, r19
     4d4:	90 93 dd 00 	sts	0x00DD, r25	; 0x8000dd <LMspeed+0x1>
     4d8:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <LMspeed>
// 	if (RMspeed < 0) RMspeed = 0;
// 	if (RMspeed > maxSpeed) RMspeed = maxSpeed;
// 	if (LMspeed < 0) LMspeed = 0;
// 	if (LMspeed > maxSpeed) LMspeed = maxSpeed;

}
     4dc:	ff 90       	pop	r15
     4de:	ef 90       	pop	r14
     4e0:	df 90       	pop	r13
     4e2:	cf 90       	pop	r12
     4e4:	bf 90       	pop	r11
     4e6:	af 90       	pop	r10
     4e8:	9f 90       	pop	r9
     4ea:	8f 90       	pop	r8
     4ec:	08 95       	ret

000004ee <Forward>:
	motor2b_PORT |= (1 << motor2b_PIN);
}

void Forward(void)
{
	enable1(0);
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 33 06 	call	0xc66	; 0xc66 <PWM0>
	enable2(0);
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	0e 94 35 06 	call	0xc6a	; 0xc6a <PWM2>
	
	motor1a_PORT |= (1 << motor1a_PIN);
     4fe:	af 9a       	sbi	0x15, 7	; 21
	motor1b_PORT &= ~(1 << motor1b_PIN);
     500:	ae 98       	cbi	0x15, 6	; 21
	motor2a_PORT |= (1 << motor2a_PIN);
     502:	ad 9a       	sbi	0x15, 5	; 21
	motor2b_PORT &= ~(1 << motor2b_PIN);
     504:	ac 98       	cbi	0x15, 4	; 21

	enable1(maxSpeed);
     506:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <maxSpeed>
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	0e 94 33 06 	call	0xc66	; 0xc66 <PWM0>
	enable2(maxSpeed);
     510:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <maxSpeed>
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	0e 94 35 06 	call	0xc6a	; 0xc6a <PWM2>
     51a:	08 95       	ret

0000051c <Backward>:
}

void Backward(void)
{
	enable1(0);
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	0e 94 33 06 	call	0xc66	; 0xc66 <PWM0>
	enable2(0);
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	0e 94 35 06 	call	0xc6a	; 0xc6a <PWM2>
	
	motor1a_PORT &= ~(1 << motor1a_PIN);
     52c:	af 98       	cbi	0x15, 7	; 21
	motor1b_PORT |= (1 << motor1b_PIN);
     52e:	ae 9a       	sbi	0x15, 6	; 21
	motor2a_PORT &= ~(1 << motor2a_PIN);
     530:	ad 98       	cbi	0x15, 5	; 21
	motor2b_PORT |= (1 << motor2b_PIN);
     532:	ac 9a       	sbi	0x15, 4	; 21

	enable1(130);
     534:	82 e8       	ldi	r24, 0x82	; 130
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	0e 94 33 06 	call	0xc66	; 0xc66 <PWM0>
	enable2(130);
     53c:	82 e8       	ldi	r24, 0x82	; 130
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0e 94 35 06 	call	0xc6a	; 0xc6a <PWM2>
     544:	08 95       	ret

00000546 <Stop>:

}

void Stop(void)
{
	Backward();
     546:	0e 94 8e 02 	call	0x51c	; 0x51c <Backward>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     54a:	8f e8       	ldi	r24, 0x8F	; 143
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	01 97       	sbiw	r24, 0x01	; 1
     550:	f1 f7       	brne	.-4      	; 0x54e <Stop+0x8>
     552:	00 c0       	rjmp	.+0      	; 0x554 <Stop+0xe>
     554:	00 00       	nop
	_delay_us(100);
	enable1(0);
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	0e 94 33 06 	call	0xc66	; 0xc66 <PWM0>
	enable2(0);
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	0e 94 35 06 	call	0xc6a	; 0xc6a <PWM2>
	
	motor1a_PORT &= ~(1 << motor1a_PIN);
     566:	af 98       	cbi	0x15, 7	; 21
	motor1b_PORT &= ~(1 << motor1b_PIN);
     568:	ae 98       	cbi	0x15, 6	; 21
	motor2a_PORT &= ~(1 << motor2a_PIN);
     56a:	ad 98       	cbi	0x15, 5	; 21
	motor2b_PORT &= ~(1 << motor2b_PIN);
     56c:	ac 98       	cbi	0x15, 4	; 21
     56e:	08 95       	ret

00000570 <RightSharp>:
	enable1(130);
	enable2(130);
}

void RightSharp(uint8_t motorSpeed)
{
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	c8 2f       	mov	r28, r24
	enable1(0);
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 33 06 	call	0xc66	; 0xc66 <PWM0>
	enable2(0);
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	0e 94 35 06 	call	0xc6a	; 0xc6a <PWM2>
	
	motor1a_PORT |= (1 << motor1a_PIN);
     586:	af 9a       	sbi	0x15, 7	; 21
	motor1b_PORT &= ~(1 << motor1b_PIN);
     588:	ae 98       	cbi	0x15, 6	; 21
	motor2a_PORT &= ~(1 << motor2a_PIN);
     58a:	ad 98       	cbi	0x15, 5	; 21
	motor2b_PORT |= (1 << motor2b_PIN);
     58c:	ac 9a       	sbi	0x15, 4	; 21

	enable1(motorSpeed);
     58e:	d0 e0       	ldi	r29, 0x00	; 0
     590:	ce 01       	movw	r24, r28
     592:	0e 94 33 06 	call	0xc66	; 0xc66 <PWM0>
	enable2(motorSpeed);
     596:	ce 01       	movw	r24, r28
     598:	0e 94 35 06 	call	0xc6a	; 0xc6a <PWM2>
}
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	08 95       	ret

000005a2 <autoCalibration>:
	OCR1A = timerlimit;
	TCCR1B |= (1 << CS12) | (1 << CS10);
}

void autoCalibration(void)
{
     5a2:	5f 92       	push	r5
     5a4:	6f 92       	push	r6
     5a6:	7f 92       	push	r7
     5a8:	8f 92       	push	r8
     5aa:	9f 92       	push	r9
     5ac:	af 92       	push	r10
     5ae:	bf 92       	push	r11
     5b0:	cf 92       	push	r12
     5b2:	df 92       	push	r13
     5b4:	ef 92       	push	r14
     5b6:	ff 92       	push	r15
     5b8:	0f 93       	push	r16
     5ba:	1f 93       	push	r17
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
	int currentValue = 0;
	setTimer(2000);
     5c0:	80 ed       	ldi	r24, 0xD0	; 208
     5c2:	97 e0       	ldi	r25, 0x07	; 7
     5c4:	0e 94 1b 01 	call	0x236	; 0x236 <setTimer>
	
	RightSharp(170);
     5c8:	8a ea       	ldi	r24, 0xAA	; 170
     5ca:	0e 94 b8 02 	call	0x570	; 0x570 <RightSharp>
	while (timerFlag == 0)
     5ce:	1d c0       	rjmp	.+58     	; 0x60a <autoCalibration+0x68>
	{
		for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
		{
			currentValue = adcRead(sensorNumber);
     5d0:	8c 2f       	mov	r24, r28
     5d2:	0e 94 4f 00 	call	0x9e	; 0x9e <adcRead>
			if(currentValue > SensorMaxValue[sensorNumber]) SensorMaxValue[sensorNumber] = currentValue;
     5d6:	28 2f       	mov	r18, r24
     5d8:	39 2f       	mov	r19, r25
     5da:	f7 01       	movw	r30, r14
     5dc:	40 81       	ld	r20, Z
     5de:	51 81       	ldd	r21, Z+1	; 0x01
     5e0:	42 17       	cp	r20, r18
     5e2:	53 07       	cpc	r21, r19
     5e4:	10 f4       	brcc	.+4      	; 0x5ea <autoCalibration+0x48>
     5e6:	80 83       	st	Z, r24
     5e8:	91 83       	std	Z+1, r25	; 0x01
			if(currentValue < SensorMinValue[sensorNumber]) SensorMinValue[sensorNumber] = currentValue;
     5ea:	f8 01       	movw	r30, r16
     5ec:	40 81       	ld	r20, Z
     5ee:	51 81       	ldd	r21, Z+1	; 0x01
     5f0:	24 17       	cp	r18, r20
     5f2:	35 07       	cpc	r19, r21
     5f4:	10 f4       	brcc	.+4      	; 0x5fa <autoCalibration+0x58>
     5f6:	80 83       	st	Z, r24
     5f8:	91 83       	std	Z+1, r25	; 0x01
	setTimer(2000);
	
	RightSharp(170);
	while (timerFlag == 0)
	{
		for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
     5fa:	cf 5f       	subi	r28, 0xFF	; 255
     5fc:	f2 e0       	ldi	r31, 0x02	; 2
     5fe:	ef 0e       	add	r14, r31
     600:	f1 1c       	adc	r15, r1
     602:	0e 5f       	subi	r16, 0xFE	; 254
     604:	1f 4f       	sbci	r17, 0xFF	; 255
     606:	c8 30       	cpi	r28, 0x08	; 8
     608:	19 f7       	brne	.-58     	; 0x5d0 <autoCalibration+0x2e>
{
	int currentValue = 0;
	setTimer(2000);
	
	RightSharp(170);
	while (timerFlag == 0)
     60a:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <timerFlag>
     60e:	81 11       	cpse	r24, r1
     610:	0a c0       	rjmp	.+20     	; 0x626 <autoCalibration+0x84>
     612:	0f 2e       	mov	r0, r31
     614:	f1 ef       	ldi	r31, 0xF1	; 241
     616:	ef 2e       	mov	r14, r31
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	ff 2e       	mov	r15, r31
     61c:	f0 2d       	mov	r31, r0
     61e:	05 e6       	ldi	r16, 0x65	; 101
     620:	10 e0       	ldi	r17, 0x00	; 0
     622:	c0 e0       	ldi	r28, 0x00	; 0
     624:	d5 cf       	rjmp	.-86     	; 0x5d0 <autoCalibration+0x2e>
			currentValue = adcRead(sensorNumber);
			if(currentValue > SensorMaxValue[sensorNumber]) SensorMaxValue[sensorNumber] = currentValue;
			if(currentValue < SensorMinValue[sensorNumber]) SensorMinValue[sensorNumber] = currentValue;
		}
	}
	timerFlag = 0;
     626:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <timerFlag>
	timerOff();
     62a:	0e 94 2d 01 	call	0x25a	; 0x25a <timerOff>
	Stop();
     62e:	0e 94 a3 02 	call	0x546	; 0x546 <Stop>
	Serial_sendString("MAX\t");
     632:	88 ea       	ldi	r24, 0xA8	; 168
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	0e 94 49 06 	call	0xc92	; 0xc92 <Serial_sendString>
     63a:	01 ef       	ldi	r16, 0xF1	; 241
     63c:	10 e0       	ldi	r17, 0x00	; 0
     63e:	c1 e0       	ldi	r28, 0x01	; 1
     640:	d1 e0       	ldi	r29, 0x01	; 1
     642:	78 01       	movw	r14, r16
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
	{
		Serial_sendInt(SensorMaxValue[sensorNumber], DEC);
     644:	6a e0       	ldi	r22, 0x0A	; 10
     646:	70 e0       	ldi	r23, 0x00	; 0
     648:	f7 01       	movw	r30, r14
     64a:	81 91       	ld	r24, Z+
     64c:	91 91       	ld	r25, Z+
     64e:	7f 01       	movw	r14, r30
     650:	0e 94 58 06 	call	0xcb0	; 0xcb0 <Serial_sendInt>
		Serial_sendChar('\t');
     654:	89 e0       	ldi	r24, 0x09	; 9
     656:	0e 94 45 06 	call	0xc8a	; 0xc8a <Serial_sendChar>
	}
	timerFlag = 0;
	timerOff();
	Stop();
	Serial_sendString("MAX\t");
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
     65a:	ec 16       	cp	r14, r28
     65c:	fd 06       	cpc	r15, r29
     65e:	91 f7       	brne	.-28     	; 0x644 <autoCalibration+0xa2>
	{
		Serial_sendInt(SensorMaxValue[sensorNumber], DEC);
		Serial_sendChar('\t');
	}
	Serial_sendChar('\n');
     660:	8a e0       	ldi	r24, 0x0A	; 10
     662:	0e 94 45 06 	call	0xc8a	; 0xc8a <Serial_sendChar>
	
	Serial_sendString("MIN\t");
     666:	8d ea       	ldi	r24, 0xAD	; 173
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	0e 94 49 06 	call	0xc92	; 0xc92 <Serial_sendString>
     66e:	0f 2e       	mov	r0, r31
     670:	f5 e6       	ldi	r31, 0x65	; 101
     672:	6f 2e       	mov	r6, r31
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	7f 2e       	mov	r7, r31
     678:	f0 2d       	mov	r31, r0
     67a:	0f 2e       	mov	r0, r31
     67c:	f5 e7       	ldi	r31, 0x75	; 117
     67e:	cf 2e       	mov	r12, r31
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	df 2e       	mov	r13, r31
     684:	f0 2d       	mov	r31, r0
     686:	73 01       	movw	r14, r6
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
	{
		Serial_sendInt(SensorMinValue[sensorNumber], DEC);
     688:	6a e0       	ldi	r22, 0x0A	; 10
     68a:	70 e0       	ldi	r23, 0x00	; 0
     68c:	f7 01       	movw	r30, r14
     68e:	81 91       	ld	r24, Z+
     690:	91 91       	ld	r25, Z+
     692:	7f 01       	movw	r14, r30
     694:	0e 94 58 06 	call	0xcb0	; 0xcb0 <Serial_sendInt>
		Serial_sendChar('\t');
     698:	89 e0       	ldi	r24, 0x09	; 9
     69a:	0e 94 45 06 	call	0xc8a	; 0xc8a <Serial_sendChar>
		Serial_sendChar('\t');
	}
	Serial_sendChar('\n');
	
	Serial_sendString("MIN\t");
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
     69e:	ec 14       	cp	r14, r12
     6a0:	fd 04       	cpc	r15, r13
     6a2:	91 f7       	brne	.-28     	; 0x688 <autoCalibration+0xe6>
	{
		Serial_sendInt(SensorMinValue[sensorNumber], DEC);
		Serial_sendChar('\t');
	}
	Serial_sendChar('\n');
     6a4:	8a e0       	ldi	r24, 0x0A	; 10
     6a6:	0e 94 45 06 	call	0xc8a	; 0xc8a <Serial_sendChar>
	
	Serial_sendString("THR\t");
     6aa:	82 eb       	ldi	r24, 0xB2	; 178
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	0e 94 49 06 	call	0xc92	; 0xc92 <Serial_sendString>
     6b2:	0f 2e       	mov	r0, r31
     6b4:	f5 e9       	ldi	r31, 0x95	; 149
     6b6:	ef 2e       	mov	r14, r31
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	ff 2e       	mov	r15, r31
     6bc:	f0 2d       	mov	r31, r0
     6be:	47 01       	movw	r8, r14
     6c0:	0f 2e       	mov	r0, r31
     6c2:	f5 e6       	ldi	r31, 0x65	; 101
     6c4:	af 2e       	mov	r10, r31
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	bf 2e       	mov	r11, r31
     6ca:	f0 2d       	mov	r31, r0
     6cc:	0f 2e       	mov	r0, r31
     6ce:	f1 ef       	ldi	r31, 0xF1	; 241
     6d0:	cf 2e       	mov	r12, r31
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	df 2e       	mov	r13, r31
     6d6:	f0 2d       	mov	r31, r0
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
	{
		threshold[sensorNumber] = SensorMinValue[sensorNumber] + (SensorMaxValue[sensorNumber] - SensorMinValue[sensorNumber]) * 7 / 10;
     6d8:	f6 01       	movw	r30, r12
     6da:	81 91       	ld	r24, Z+
     6dc:	91 91       	ld	r25, Z+
     6de:	6f 01       	movw	r12, r30
     6e0:	f5 01       	movw	r30, r10
     6e2:	41 91       	ld	r20, Z+
     6e4:	51 91       	ld	r21, Z+
     6e6:	5f 01       	movw	r10, r30
     6e8:	84 1b       	sub	r24, r20
     6ea:	95 0b       	sbc	r25, r21
     6ec:	9c 01       	movw	r18, r24
     6ee:	22 0f       	add	r18, r18
     6f0:	33 1f       	adc	r19, r19
     6f2:	22 0f       	add	r18, r18
     6f4:	33 1f       	adc	r19, r19
     6f6:	22 0f       	add	r18, r18
     6f8:	33 1f       	adc	r19, r19
     6fa:	28 1b       	sub	r18, r24
     6fc:	39 0b       	sbc	r19, r25
     6fe:	ad ec       	ldi	r26, 0xCD	; 205
     700:	bc ec       	ldi	r27, 0xCC	; 204
     702:	0e 94 35 08 	call	0x106a	; 0x106a <__umulhisi3>
     706:	96 95       	lsr	r25
     708:	87 95       	ror	r24
     70a:	96 95       	lsr	r25
     70c:	87 95       	ror	r24
     70e:	96 95       	lsr	r25
     710:	87 95       	ror	r24
     712:	84 0f       	add	r24, r20
     714:	95 1f       	adc	r25, r21
     716:	f4 01       	movw	r30, r8
     718:	81 93       	st	Z+, r24
     71a:	91 93       	st	Z+, r25
     71c:	4f 01       	movw	r8, r30

//		threshold[sensorNumber] = (SensorMaxValue[sensorNumber] + SensorMinValue[sensorNumber]) / 2;
		Serial_sendInt(threshold[sensorNumber], DEC);
     71e:	6a e0       	ldi	r22, 0x0A	; 10
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	0e 94 58 06 	call	0xcb0	; 0xcb0 <Serial_sendInt>
		Serial_sendChar('\t');
     726:	89 e0       	ldi	r24, 0x09	; 9
     728:	0e 94 45 06 	call	0xc8a	; 0xc8a <Serial_sendChar>
		Serial_sendChar('\t');
	}
	Serial_sendChar('\n');
	
	Serial_sendString("THR\t");
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
     72c:	cc 16       	cp	r12, r28
     72e:	dd 06       	cpc	r13, r29
     730:	99 f6       	brne	.-90     	; 0x6d8 <autoCalibration+0x136>

//		threshold[sensorNumber] = (SensorMaxValue[sensorNumber] + SensorMinValue[sensorNumber]) / 2;
		Serial_sendInt(threshold[sensorNumber], DEC);
		Serial_sendChar('\t');
	}
	Serial_sendChar('\n');
     732:	8a e0       	ldi	r24, 0x0A	; 10
     734:	0e 94 45 06 	call	0xc8a	; 0xc8a <Serial_sendChar>
	
	Serial_sendString("UTH\t");
     738:	87 eb       	ldi	r24, 0xB7	; 183
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	0e 94 49 06 	call	0xc92	; 0xc92 <Serial_sendString>
     740:	0f 2e       	mov	r0, r31
     742:	f5 e8       	ldi	r31, 0x85	; 133
     744:	8f 2e       	mov	r8, r31
     746:	f0 e0       	ldi	r31, 0x00	; 0
     748:	9f 2e       	mov	r9, r31
     74a:	f0 2d       	mov	r31, r0
     74c:	0f 2e       	mov	r0, r31
     74e:	f5 e9       	ldi	r31, 0x95	; 149
     750:	af 2e       	mov	r10, r31
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	bf 2e       	mov	r11, r31
     756:	f0 2d       	mov	r31, r0
     758:	0f 2e       	mov	r0, r31
     75a:	f1 ef       	ldi	r31, 0xF1	; 241
     75c:	cf 2e       	mov	r12, r31
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	df 2e       	mov	r13, r31
     762:	f0 2d       	mov	r31, r0
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
	{
		upperThreshold[sensorNumber] = threshold[sensorNumber] + ((SensorMaxValue[sensorNumber] - threshold[sensorNumber]) * 30 / 100); 
     764:	0f 2e       	mov	r0, r31
     766:	fe e1       	ldi	r31, 0x1E	; 30
     768:	5f 2e       	mov	r5, r31
     76a:	f0 2d       	mov	r31, r0
     76c:	f6 01       	movw	r30, r12
     76e:	81 91       	ld	r24, Z+
     770:	91 91       	ld	r25, Z+
     772:	6f 01       	movw	r12, r30
     774:	f5 01       	movw	r30, r10
     776:	41 91       	ld	r20, Z+
     778:	51 91       	ld	r21, Z+
     77a:	5f 01       	movw	r10, r30
     77c:	84 1b       	sub	r24, r20
     77e:	95 0b       	sbc	r25, r21
     780:	58 9e       	mul	r5, r24
     782:	90 01       	movw	r18, r0
     784:	59 9e       	mul	r5, r25
     786:	30 0d       	add	r19, r0
     788:	11 24       	eor	r1, r1
     78a:	36 95       	lsr	r19
     78c:	27 95       	ror	r18
     78e:	36 95       	lsr	r19
     790:	27 95       	ror	r18
     792:	ab e7       	ldi	r26, 0x7B	; 123
     794:	b4 e1       	ldi	r27, 0x14	; 20
     796:	0e 94 35 08 	call	0x106a	; 0x106a <__umulhisi3>
     79a:	96 95       	lsr	r25
     79c:	87 95       	ror	r24
     79e:	84 0f       	add	r24, r20
     7a0:	95 1f       	adc	r25, r21
     7a2:	f4 01       	movw	r30, r8
     7a4:	81 93       	st	Z+, r24
     7a6:	91 93       	st	Z+, r25
     7a8:	4f 01       	movw	r8, r30
		Serial_sendInt(upperThreshold[sensorNumber], DEC);
     7aa:	6a e0       	ldi	r22, 0x0A	; 10
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	0e 94 58 06 	call	0xcb0	; 0xcb0 <Serial_sendInt>
		Serial_sendChar('\t');
     7b2:	89 e0       	ldi	r24, 0x09	; 9
     7b4:	0e 94 45 06 	call	0xc8a	; 0xc8a <Serial_sendChar>
		Serial_sendChar('\t');
	}
	Serial_sendChar('\n');
	
	Serial_sendString("UTH\t");
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
     7b8:	cc 16       	cp	r12, r28
     7ba:	dd 06       	cpc	r13, r29
     7bc:	b9 f6       	brne	.-82     	; 0x76c <autoCalibration+0x1ca>
	{
		upperThreshold[sensorNumber] = threshold[sensorNumber] + ((SensorMaxValue[sensorNumber] - threshold[sensorNumber]) * 30 / 100); 
		Serial_sendInt(upperThreshold[sensorNumber], DEC);
		Serial_sendChar('\t');
	}
	Serial_sendChar('\n');
     7be:	8a e0       	ldi	r24, 0x0A	; 10
     7c0:	0e 94 45 06 	call	0xc8a	; 0xc8a <Serial_sendChar>
	
	Serial_sendString("LTH\t");
     7c4:	8c eb       	ldi	r24, 0xBC	; 188
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	0e 94 49 06 	call	0xc92	; 0xc92 <Serial_sendString>
     7cc:	0f 2e       	mov	r0, r31
     7ce:	f5 e7       	ldi	r31, 0x75	; 117
     7d0:	af 2e       	mov	r10, r31
     7d2:	f0 e0       	ldi	r31, 0x00	; 0
     7d4:	bf 2e       	mov	r11, r31
     7d6:	f0 2d       	mov	r31, r0
     7d8:	0f 2e       	mov	r0, r31
     7da:	f5 ea       	ldi	r31, 0xA5	; 165
     7dc:	8f 2e       	mov	r8, r31
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	9f 2e       	mov	r9, r31
     7e2:	f0 2d       	mov	r31, r0
     7e4:	0f 2e       	mov	r0, r31
     7e6:	f5 e6       	ldi	r31, 0x65	; 101
     7e8:	cf 2e       	mov	r12, r31
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	df 2e       	mov	r13, r31
     7ee:	f0 2d       	mov	r31, r0
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
	{
		lowerThreshold[sensorNumber] = threshold[sensorNumber] - ((threshold[sensorNumber] - SensorMinValue[sensorNumber]) * 30 / 100);
     7f0:	0f 2e       	mov	r0, r31
     7f2:	fe e1       	ldi	r31, 0x1E	; 30
     7f4:	5f 2e       	mov	r5, r31
     7f6:	f0 2d       	mov	r31, r0
     7f8:	f7 01       	movw	r30, r14
     7fa:	41 91       	ld	r20, Z+
     7fc:	51 91       	ld	r21, Z+
     7fe:	7f 01       	movw	r14, r30
     800:	f6 01       	movw	r30, r12
     802:	81 91       	ld	r24, Z+
     804:	91 91       	ld	r25, Z+
     806:	6f 01       	movw	r12, r30
     808:	9a 01       	movw	r18, r20
     80a:	28 1b       	sub	r18, r24
     80c:	39 0b       	sbc	r19, r25
     80e:	c9 01       	movw	r24, r18
     810:	58 9e       	mul	r5, r24
     812:	90 01       	movw	r18, r0
     814:	59 9e       	mul	r5, r25
     816:	30 0d       	add	r19, r0
     818:	11 24       	eor	r1, r1
     81a:	36 95       	lsr	r19
     81c:	27 95       	ror	r18
     81e:	36 95       	lsr	r19
     820:	27 95       	ror	r18
     822:	ab e7       	ldi	r26, 0x7B	; 123
     824:	b4 e1       	ldi	r27, 0x14	; 20
     826:	0e 94 35 08 	call	0x106a	; 0x106a <__umulhisi3>
     82a:	96 95       	lsr	r25
     82c:	87 95       	ror	r24
     82e:	fa 01       	movw	r30, r20
     830:	e8 1b       	sub	r30, r24
     832:	f9 0b       	sbc	r31, r25
     834:	cf 01       	movw	r24, r30
     836:	f5 01       	movw	r30, r10
     838:	81 93       	st	Z+, r24
     83a:	91 93       	st	Z+, r25
     83c:	5f 01       	movw	r10, r30
		Serial_sendInt(lowerThreshold[sensorNumber], DEC);
     83e:	6a e0       	ldi	r22, 0x0A	; 10
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	0e 94 58 06 	call	0xcb0	; 0xcb0 <Serial_sendInt>
		Serial_sendChar('\t');
     846:	89 e0       	ldi	r24, 0x09	; 9
     848:	0e 94 45 06 	call	0xc8a	; 0xc8a <Serial_sendChar>
		Serial_sendChar('\t');
	}
	Serial_sendChar('\n');
	
	Serial_sendString("LTH\t");
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
     84c:	8e 14       	cp	r8, r14
     84e:	9f 04       	cpc	r9, r15
     850:	99 f6       	brne	.-90     	; 0x7f8 <autoCalibration+0x256>
	{
		lowerThreshold[sensorNumber] = threshold[sensorNumber] - ((threshold[sensorNumber] - SensorMinValue[sensorNumber]) * 30 / 100);
		Serial_sendInt(lowerThreshold[sensorNumber], DEC);
		Serial_sendChar('\t');
	}
	Serial_sendChar('\n');
     852:	8a e0       	ldi	r24, 0x0A	; 10
     854:	0e 94 45 06 	call	0xc8a	; 0xc8a <Serial_sendChar>
		
	Serial_sendString("PRO\t");
     858:	81 ec       	ldi	r24, 0xC1	; 193
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	0e 94 49 06 	call	0xc92	; 0xc92 <Serial_sendString>
     860:	0f 2e       	mov	r0, r31
     862:	f1 e0       	ldi	r31, 0x01	; 1
     864:	ef 2e       	mov	r14, r31
     866:	f1 e0       	ldi	r31, 0x01	; 1
     868:	ff 2e       	mov	r15, r31
     86a:	f0 2d       	mov	r31, r0
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
	{
		proportionality[sensorNumber] = 20000 / (SensorMaxValue[sensorNumber] - SensorMinValue[sensorNumber]);
     86c:	0f 2e       	mov	r0, r31
     86e:	f0 e2       	ldi	r31, 0x20	; 32
     870:	cf 2e       	mov	r12, r31
     872:	fe e4       	ldi	r31, 0x4E	; 78
     874:	df 2e       	mov	r13, r31
     876:	f0 2d       	mov	r31, r0
     878:	f8 01       	movw	r30, r16
     87a:	61 91       	ld	r22, Z+
     87c:	71 91       	ld	r23, Z+
     87e:	8f 01       	movw	r16, r30
     880:	f3 01       	movw	r30, r6
     882:	81 91       	ld	r24, Z+
     884:	91 91       	ld	r25, Z+
     886:	3f 01       	movw	r6, r30
     888:	68 1b       	sub	r22, r24
     88a:	79 0b       	sbc	r23, r25
     88c:	c6 01       	movw	r24, r12
     88e:	0e 94 21 08 	call	0x1042	; 0x1042 <__udivmodhi4>
     892:	cb 01       	movw	r24, r22
     894:	f7 01       	movw	r30, r14
     896:	61 93       	st	Z+, r22
     898:	71 93       	st	Z+, r23
     89a:	7f 01       	movw	r14, r30
		Serial_sendInt(proportionality[sensorNumber], DEC);
     89c:	6a e0       	ldi	r22, 0x0A	; 10
     89e:	70 e0       	ldi	r23, 0x00	; 0
     8a0:	0e 94 58 06 	call	0xcb0	; 0xcb0 <Serial_sendInt>
		Serial_sendChar('\t');
     8a4:	89 e0       	ldi	r24, 0x09	; 9
     8a6:	0e 94 45 06 	call	0xc8a	; 0xc8a <Serial_sendChar>
		Serial_sendChar('\t');
	}
	Serial_sendChar('\n');
		
	Serial_sendString("PRO\t");
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
     8aa:	0c 17       	cp	r16, r28
     8ac:	1d 07       	cpc	r17, r29
     8ae:	21 f7       	brne	.-56     	; 0x878 <__stack+0x19>
	{
		proportionality[sensorNumber] = 20000 / (SensorMaxValue[sensorNumber] - SensorMinValue[sensorNumber]);
		Serial_sendInt(proportionality[sensorNumber], DEC);
		Serial_sendChar('\t');
	}
	Serial_sendString("\n\n\n\n\n\n");
     8b0:	86 ec       	ldi	r24, 0xC6	; 198
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	0e 94 49 06 	call	0xc92	; 0xc92 <Serial_sendString>
	
	
}
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	1f 91       	pop	r17
     8be:	0f 91       	pop	r16
     8c0:	ff 90       	pop	r15
     8c2:	ef 90       	pop	r14
     8c4:	df 90       	pop	r13
     8c6:	cf 90       	pop	r12
     8c8:	bf 90       	pop	r11
     8ca:	af 90       	pop	r10
     8cc:	9f 90       	pop	r9
     8ce:	8f 90       	pop	r8
     8d0:	7f 90       	pop	r7
     8d2:	6f 90       	pop	r6
     8d4:	5f 90       	pop	r5
     8d6:	08 95       	ret

000008d8 <LeftSharp>:
	enable1(motorSpeed);
	enable2(motorSpeed);
}

void LeftSharp(uint8_t motorSpeed)
{
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
     8dc:	c8 2f       	mov	r28, r24
	enable1(0);
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	0e 94 33 06 	call	0xc66	; 0xc66 <PWM0>
	enable2(0);
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	0e 94 35 06 	call	0xc6a	; 0xc6a <PWM2>
	
	motor1a_PORT &= ~(1 << motor1a_PIN);
     8ee:	af 98       	cbi	0x15, 7	; 21
	motor1b_PORT |= (1 << motor1b_PIN);
     8f0:	ae 9a       	sbi	0x15, 6	; 21
	motor2a_PORT |= (1 << motor2a_PIN);
     8f2:	ad 9a       	sbi	0x15, 5	; 21
	motor2b_PORT &= ~(1 << motor2b_PIN);
     8f4:	ac 98       	cbi	0x15, 4	; 21

	enable1(motorSpeed);
     8f6:	d0 e0       	ldi	r29, 0x00	; 0
     8f8:	ce 01       	movw	r24, r28
     8fa:	0e 94 33 06 	call	0xc66	; 0xc66 <PWM0>
	enable2(motorSpeed);
     8fe:	ce 01       	movw	r24, r28
     900:	0e 94 35 06 	call	0xc6a	; 0xc6a <PWM2>
}
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	08 95       	ret

0000090a <main>:
#define sonarSetPoint  8

int main(void)
{
	// Input-Output settings
	trig1_DDR |= (1 << trig1_PIN);
     90a:	8c 9a       	sbi	0x11, 4	; 17
	trig2_DDR |= (1 << trig2_PIN);
     90c:	8d 9a       	sbi	0x11, 5	; 17
	trig3_DDR |= (1 << trig3_PIN);
     90e:	b9 9a       	sbi	0x17, 1	; 23
	echo1_DDR &= ~(1 << echo1_PIN);
     910:	8b 98       	cbi	0x11, 3	; 17
	echo2_DDR &= ~(1 << echo2_PIN);
     912:	8a 98       	cbi	0x11, 2	; 17
	echo3_DDR &= ~(1 << echo3_PIN);
     914:	ba 98       	cbi	0x17, 2	; 23
	motor1a_DDR |= (1 << motor1a_PIN);
     916:	a7 9a       	sbi	0x14, 7	; 20
	motor1b_DDR |= (1 << motor1b_PIN);
     918:	a6 9a       	sbi	0x14, 6	; 20
	motor2a_DDR |= (1 << motor2a_PIN);
     91a:	a5 9a       	sbi	0x14, 5	; 20
	motor2b_DDR |= (1 << motor2b_PIN);
     91c:	a4 9a       	sbi	0x14, 4	; 20
	enable1_DDR |= (1 << enable1_PIN);
     91e:	8f 9a       	sbi	0x11, 7	; 17
	enable2_DDR |= (1 << enable2_PIN);	
     920:	bb 9a       	sbi	0x17, 3	; 23

	
	trig1_PORT &= ~(1 << trig1_PIN);
     922:	94 98       	cbi	0x12, 4	; 18
	trig1_PORT |= (1 << trig1_PIN);
     924:	94 9a       	sbi	0x12, 4	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     926:	2f ef       	ldi	r18, 0xFF	; 255
     928:	89 e6       	ldi	r24, 0x69	; 105
     92a:	98 e1       	ldi	r25, 0x18	; 24
     92c:	21 50       	subi	r18, 0x01	; 1
     92e:	80 40       	sbci	r24, 0x00	; 0
     930:	90 40       	sbci	r25, 0x00	; 0
     932:	e1 f7       	brne	.-8      	; 0x92c <main+0x22>
     934:	00 c0       	rjmp	.+0      	; 0x936 <main+0x2c>
     936:	00 00       	nop
	_delay_ms(500);
	trig1_PORT &= ~(1 << trig1_PIN);
     938:	94 98       	cbi	0x12, 4	; 18
	int8_t sonarError = 0;
	int sonarCorrection = 0;

	// Initializations	
	
	adc_init();
     93a:	0e 94 49 00 	call	0x92	; 0x92 <adc_init>
	UART_init();
     93e:	0e 94 37 06 	call	0xc6e	; 0xc6e <UART_init>
	PWM0_init();
     942:	0e 94 1f 06 	call	0xc3e	; 0xc3e <PWM0_init>
	PWM2_init();
     946:	0e 94 29 06 	call	0xc52	; 0xc52 <PWM2_init>
	setRotationForward();
     94a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <setRotationForward>
     94e:	2f ef       	ldi	r18, 0xFF	; 255
     950:	83 ed       	ldi	r24, 0xD3	; 211
     952:	90 e3       	ldi	r25, 0x30	; 48
     954:	21 50       	subi	r18, 0x01	; 1
     956:	80 40       	sbci	r24, 0x00	; 0
     958:	90 40       	sbci	r25, 0x00	; 0
     95a:	e1 f7       	brne	.-8      	; 0x954 <main+0x4a>
     95c:	00 c0       	rjmp	.+0      	; 0x95e <main+0x54>
     95e:	00 00       	nop
	
	
	_delay_ms(1000);
	autoCalibration();
     960:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <autoCalibration>
     964:	2f ef       	ldi	r18, 0xFF	; 255
     966:	8b e7       	ldi	r24, 0x7B	; 123
     968:	92 e9       	ldi	r25, 0x92	; 146
     96a:	21 50       	subi	r18, 0x01	; 1
     96c:	80 40       	sbci	r24, 0x00	; 0
     96e:	90 40       	sbci	r25, 0x00	; 0
     970:	e1 f7       	brne	.-8      	; 0x96a <main+0x60>
     972:	00 c0       	rjmp	.+0      	; 0x974 <main+0x6a>
     974:	00 00       	nop
	_delay_ms(3000);
	rightSkipFlag = 1;
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__data_end>
	
	speedFlag = 1;
     97c:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <speedFlag>

	Forward();
     980:	0e 94 77 02 	call	0x4ee	; 0x4ee <Forward>
// 	enable1(255);
// 	enable2(255);
// 	_delay_ms(10000);
    while (1) 
    {	
		sensorValueConversion();
     984:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>


/*****************************************************Line Follow Turns****************************************************/


		if (leftFlag == 1 && weightedValue < 7 && weightedValue > 3)
     988:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <leftFlag>
     98c:	81 30       	cpi	r24, 0x01	; 1
     98e:	09 f0       	breq	.+2      	; 0x992 <main+0x88>
     990:	65 c0       	rjmp	.+202    	; 0xa5c <main+0x152>
     992:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <weightedValue>
     996:	84 50       	subi	r24, 0x04	; 4
     998:	83 30       	cpi	r24, 0x03	; 3
     99a:	08 f0       	brcs	.+2      	; 0x99e <main+0x94>
     99c:	c9 c0       	rjmp	.+402    	; 0xb30 <main+0x226>
		{
			Backward();
     99e:	0e 94 8e 02 	call	0x51c	; 0x51c <Backward>
     9a2:	8f e3       	ldi	r24, 0x3F	; 63
     9a4:	9c e9       	ldi	r25, 0x9C	; 156
     9a6:	01 97       	sbiw	r24, 0x01	; 1
     9a8:	f1 f7       	brne	.-4      	; 0x9a6 <main+0x9c>
     9aa:	00 c0       	rjmp	.+0      	; 0x9ac <main+0xa2>
     9ac:	00 00       	nop
			_delay_ms(10);
			Forward();
     9ae:	0e 94 77 02 	call	0x4ee	; 0x4ee <Forward>
			enable1(180);
     9b2:	84 eb       	ldi	r24, 0xB4	; 180
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	0e 94 33 06 	call	0xc66	; 0xc66 <PWM0>
			enable2(180);
     9ba:	84 eb       	ldi	r24, 0xB4	; 180
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	0e 94 35 06 	call	0xc6a	; 0xc6a <PWM2>
			while (leftFlag == 1)
     9c2:	0c c0       	rjmp	.+24     	; 0x9dc <main+0xd2>
			{
				sensorValueConversion();
     9c4:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
				if (allFlag == 1 || rightFlag == 1) break;
     9c8:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <allFlag>
     9cc:	81 30       	cpi	r24, 0x01	; 1
     9ce:	09 f4       	brne	.+2      	; 0x9d2 <main+0xc8>
     9d0:	25 c1       	rjmp	.+586    	; 0xc1c <main+0x312>
     9d2:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <rightFlag>
     9d6:	81 30       	cpi	r24, 0x01	; 1
     9d8:	09 f4       	brne	.+2      	; 0x9dc <main+0xd2>
     9da:	1b c1       	rjmp	.+566    	; 0xc12 <main+0x308>
			Backward();
			_delay_ms(10);
			Forward();
			enable1(180);
			enable2(180);
			while (leftFlag == 1)
     9dc:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <leftFlag>
     9e0:	81 30       	cpi	r24, 0x01	; 1
     9e2:	81 f3       	breq	.-32     	; 0x9c4 <main+0xba>
			{
				sensorValueConversion();
				if (allFlag == 1 || rightFlag == 1) break;
			}

			if (allFlag == 0 && rightFlag == 0)
     9e4:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <allFlag>
     9e8:	81 11       	cpse	r24, r1
     9ea:	38 c0       	rjmp	.+112    	; 0xa5c <main+0x152>
     9ec:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <rightFlag>
     9f0:	81 11       	cpse	r24, r1
     9f2:	09 c1       	rjmp	.+530    	; 0xc06 <main+0x2fc>
     9f4:	9f ef       	ldi	r25, 0xFF	; 255
     9f6:	27 ee       	ldi	r18, 0xE7	; 231
     9f8:	83 e0       	ldi	r24, 0x03	; 3
     9fa:	91 50       	subi	r25, 0x01	; 1
     9fc:	20 40       	sbci	r18, 0x00	; 0
     9fe:	80 40       	sbci	r24, 0x00	; 0
     a00:	e1 f7       	brne	.-8      	; 0x9fa <main+0xf0>
     a02:	00 c0       	rjmp	.+0      	; 0xa04 <main+0xfa>
     a04:	00 00       	nop
			{
				_delay_ms(80);
				// 				sensorValueConversion();

				LeftSharp(140);
     a06:	8c e8       	ldi	r24, 0x8C	; 140
     a08:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <LeftSharp>
				//				_delay_ms(100);
				
				while (leftFlag == 0) sensorValueConversion();
     a0c:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <leftFlag>
     a10:	81 11       	cpse	r24, r1
     a12:	09 c0       	rjmp	.+18     	; 0xa26 <main+0x11c>
     a14:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
     a18:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <leftFlag>
     a1c:	88 23       	and	r24, r24
     a1e:	d1 f3       	breq	.-12     	; 0xa14 <main+0x10a>
     a20:	02 c0       	rjmp	.+4      	; 0xa26 <main+0x11c>
				
				while (sensorCount == 0 || weightedValue > 6 || weightedValue < 3) sensorValueConversion();
     a22:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
     a26:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <sensorCount>
     a2a:	88 23       	and	r24, r24
     a2c:	d1 f3       	breq	.-12     	; 0xa22 <main+0x118>
     a2e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <weightedValue>
     a32:	83 50       	subi	r24, 0x03	; 3
     a34:	84 30       	cpi	r24, 0x04	; 4
     a36:	a8 f7       	brcc	.-22     	; 0xa22 <main+0x118>
				Forward();
     a38:	0e 94 77 02 	call	0x4ee	; 0x4ee <Forward>
     a3c:	9f ef       	ldi	r25, 0xFF	; 255
     a3e:	29 ef       	ldi	r18, 0xF9	; 249
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	91 50       	subi	r25, 0x01	; 1
     a44:	20 40       	sbci	r18, 0x00	; 0
     a46:	80 40       	sbci	r24, 0x00	; 0
     a48:	e1 f7       	brne	.-8      	; 0xa42 <main+0x138>
     a4a:	00 c0       	rjmp	.+0      	; 0xa4c <main+0x142>
     a4c:	00 00       	nop
				_delay_ms(20);
				allFlag = 0;
     a4e:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <allFlag>
				leftFlag = 0;
     a52:	10 92 d3 00 	sts	0x00D3, r1	; 0x8000d3 <leftFlag>
				rightFlag = 0;
     a56:	10 92 d4 00 	sts	0x00D4, r1	; 0x8000d4 <rightFlag>
     a5a:	c1 c0       	rjmp	.+386    	; 0xbde <main+0x2d4>
// 			_delay_ms(300);
// 			rightSkipFlag = 0;
// 		}
// 

	 if (rightFlag == 1 && weightedValue < 7 && weightedValue > 3)
     a5c:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <rightFlag>
     a60:	81 30       	cpi	r24, 0x01	; 1
     a62:	09 f0       	breq	.+2      	; 0xa66 <main+0x15c>
     a64:	65 c0       	rjmp	.+202    	; 0xb30 <main+0x226>
     a66:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <weightedValue>
     a6a:	84 50       	subi	r24, 0x04	; 4
     a6c:	83 30       	cpi	r24, 0x03	; 3
     a6e:	08 f0       	brcs	.+2      	; 0xa72 <main+0x168>
     a70:	5f c0       	rjmp	.+190    	; 0xb30 <main+0x226>
		{
			Backward();
     a72:	0e 94 8e 02 	call	0x51c	; 0x51c <Backward>
     a76:	8f e3       	ldi	r24, 0x3F	; 63
     a78:	9c e9       	ldi	r25, 0x9C	; 156
     a7a:	01 97       	sbiw	r24, 0x01	; 1
     a7c:	f1 f7       	brne	.-4      	; 0xa7a <main+0x170>
     a7e:	00 c0       	rjmp	.+0      	; 0xa80 <main+0x176>
     a80:	00 00       	nop
			_delay_ms(10);
			Forward();
     a82:	0e 94 77 02 	call	0x4ee	; 0x4ee <Forward>
			enable1(180);
     a86:	84 eb       	ldi	r24, 0xB4	; 180
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 33 06 	call	0xc66	; 0xc66 <PWM0>
			enable2(180);
     a8e:	84 eb       	ldi	r24, 0xB4	; 180
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	0e 94 35 06 	call	0xc6a	; 0xc6a <PWM2>
			while (rightFlag == 1)
     a96:	0c c0       	rjmp	.+24     	; 0xab0 <main+0x1a6>
			{
				sensorValueConversion();
     a98:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
				if (allFlag == 1 || leftFlag == 1) break;
     a9c:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <allFlag>
     aa0:	81 30       	cpi	r24, 0x01	; 1
     aa2:	09 f4       	brne	.+2      	; 0xaa6 <main+0x19c>
     aa4:	4a c0       	rjmp	.+148    	; 0xb3a <main+0x230>
     aa6:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <leftFlag>
     aaa:	81 30       	cpi	r24, 0x01	; 1
     aac:	09 f4       	brne	.+2      	; 0xab0 <main+0x1a6>
     aae:	c2 c0       	rjmp	.+388    	; 0xc34 <main+0x32a>
			Backward();
			_delay_ms(10);
			Forward();
			enable1(180);
			enable2(180);
			while (rightFlag == 1)
     ab0:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <rightFlag>
     ab4:	81 30       	cpi	r24, 0x01	; 1
     ab6:	81 f3       	breq	.-32     	; 0xa98 <main+0x18e>
			{
				sensorValueConversion();
				if (allFlag == 1 || leftFlag == 1) break;
			}
			
			if (allFlag == 0 && leftFlag == 0)
     ab8:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <allFlag>
     abc:	81 11       	cpse	r24, r1
     abe:	38 c0       	rjmp	.+112    	; 0xb30 <main+0x226>
     ac0:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <leftFlag>
     ac4:	81 11       	cpse	r24, r1
     ac6:	8b c0       	rjmp	.+278    	; 0xbde <main+0x2d4>
     ac8:	9f ef       	ldi	r25, 0xFF	; 255
     aca:	27 ee       	ldi	r18, 0xE7	; 231
     acc:	83 e0       	ldi	r24, 0x03	; 3
     ace:	91 50       	subi	r25, 0x01	; 1
     ad0:	20 40       	sbci	r18, 0x00	; 0
     ad2:	80 40       	sbci	r24, 0x00	; 0
     ad4:	e1 f7       	brne	.-8      	; 0xace <main+0x1c4>
     ad6:	00 c0       	rjmp	.+0      	; 0xad8 <main+0x1ce>
     ad8:	00 00       	nop
			{
				// 				Backward();
				_delay_ms(80);
				// 				sensorValueConversion();

				RightSharp(140);
     ada:	8c e8       	ldi	r24, 0x8C	; 140
     adc:	0e 94 b8 02 	call	0x570	; 0x570 <RightSharp>
				//				_delay_ms(100);
				
				while (rightFlag == 0) sensorValueConversion();
     ae0:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <rightFlag>
     ae4:	81 11       	cpse	r24, r1
     ae6:	09 c0       	rjmp	.+18     	; 0xafa <main+0x1f0>
     ae8:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
     aec:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <rightFlag>
     af0:	88 23       	and	r24, r24
     af2:	d1 f3       	breq	.-12     	; 0xae8 <main+0x1de>
     af4:	02 c0       	rjmp	.+4      	; 0xafa <main+0x1f0>
				
				while (sensorCount == 0 || weightedValue > 7 || weightedValue < 4) sensorValueConversion();
     af6:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
     afa:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <sensorCount>
     afe:	88 23       	and	r24, r24
     b00:	d1 f3       	breq	.-12     	; 0xaf6 <main+0x1ec>
     b02:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <weightedValue>
     b06:	84 50       	subi	r24, 0x04	; 4
     b08:	84 30       	cpi	r24, 0x04	; 4
     b0a:	a8 f7       	brcc	.-22     	; 0xaf6 <main+0x1ec>
				Forward();
     b0c:	0e 94 77 02 	call	0x4ee	; 0x4ee <Forward>
     b10:	9f ef       	ldi	r25, 0xFF	; 255
     b12:	29 ef       	ldi	r18, 0xF9	; 249
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	91 50       	subi	r25, 0x01	; 1
     b18:	20 40       	sbci	r18, 0x00	; 0
     b1a:	80 40       	sbci	r24, 0x00	; 0
     b1c:	e1 f7       	brne	.-8      	; 0xb16 <main+0x20c>
     b1e:	00 c0       	rjmp	.+0      	; 0xb20 <main+0x216>
     b20:	00 00       	nop
				_delay_ms(20);
				allFlag = 0;
     b22:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <allFlag>
				leftFlag = 0;
     b26:	10 92 d3 00 	sts	0x00D3, r1	; 0x8000d3 <leftFlag>
				rightFlag = 0;
     b2a:	10 92 d4 00 	sts	0x00D4, r1	; 0x8000d4 <rightFlag>
     b2e:	57 c0       	rjmp	.+174    	; 0xbde <main+0x2d4>
// 				maxSpeed = 180;
				
			}
		}
		
		if (allFlag == 1/* && weightedValue < 7 && weightedValue > 3*/)
     b30:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <allFlag>
     b34:	81 30       	cpi	r24, 0x01	; 1
     b36:	09 f0       	breq	.+2      	; 0xb3a <main+0x230>
     b38:	52 c0       	rjmp	.+164    	; 0xbde <main+0x2d4>
		{
			Forward();
     b3a:	0e 94 77 02 	call	0x4ee	; 0x4ee <Forward>
			while (allFlag == 1 && stopFlag < 200) sensorValueConversion();
     b3e:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <allFlag>
     b42:	81 30       	cpi	r24, 0x01	; 1
     b44:	a1 f4       	brne	.+40     	; 0xb6e <main+0x264>
     b46:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <stopFlag>
     b4a:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <stopFlag+0x1>
     b4e:	88 3c       	cpi	r24, 0xC8	; 200
     b50:	91 05       	cpc	r25, r1
     b52:	6c f4       	brge	.+26     	; 0xb6e <main+0x264>
     b54:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
     b58:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <allFlag>
     b5c:	81 30       	cpi	r24, 0x01	; 1
     b5e:	39 f4       	brne	.+14     	; 0xb6e <main+0x264>
     b60:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <stopFlag>
     b64:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <stopFlag+0x1>
     b68:	88 3c       	cpi	r24, 0xC8	; 200
     b6a:	91 05       	cpc	r25, r1
     b6c:	9c f3       	brlt	.-26     	; 0xb54 <main+0x24a>
     b6e:	9f ef       	ldi	r25, 0xFF	; 255
     b70:	21 ee       	ldi	r18, 0xE1	; 225
     b72:	84 e0       	ldi	r24, 0x04	; 4
     b74:	91 50       	subi	r25, 0x01	; 1
     b76:	20 40       	sbci	r18, 0x00	; 0
     b78:	80 40       	sbci	r24, 0x00	; 0
     b7a:	e1 f7       	brne	.-8      	; 0xb74 <main+0x26a>
     b7c:	00 c0       	rjmp	.+0      	; 0xb7e <main+0x274>
     b7e:	00 00       	nop

			_delay_ms(100);

			if (stopFlag >= 200)
     b80:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <stopFlag>
     b84:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <stopFlag+0x1>
     b88:	88 3c       	cpi	r24, 0xC8	; 200
     b8a:	91 05       	cpc	r25, r1
     b8c:	44 f1       	brlt	.+80     	; 0xbde <main+0x2d4>
			{
				Backward();
     b8e:	0e 94 8e 02 	call	0x51c	; 0x51c <Backward>
     b92:	8f e3       	ldi	r24, 0x3F	; 63
     b94:	9c e9       	ldi	r25, 0x9C	; 156
     b96:	01 97       	sbiw	r24, 0x01	; 1
     b98:	f1 f7       	brne	.-4      	; 0xb96 <main+0x28c>
     b9a:	00 c0       	rjmp	.+0      	; 0xb9c <main+0x292>
     b9c:	00 00       	nop
				_delay_ms(10);
				Stop();
     b9e:	0e 94 a3 02 	call	0x546	; 0x546 <Stop>
				trig1_PORT &= ~(1 << trig1_PIN);
     ba2:	94 98       	cbi	0x12, 4	; 18
				trig1_PORT |= (1 << trig1_PIN);
     ba4:	94 9a       	sbi	0x12, 4	; 18
     ba6:	9f ef       	ldi	r25, 0xFF	; 255
     ba8:	27 ea       	ldi	r18, 0xA7	; 167
     baa:	81 e6       	ldi	r24, 0x61	; 97
     bac:	91 50       	subi	r25, 0x01	; 1
     bae:	20 40       	sbci	r18, 0x00	; 0
     bb0:	80 40       	sbci	r24, 0x00	; 0
     bb2:	e1 f7       	brne	.-8      	; 0xbac <main+0x2a2>
     bb4:	00 c0       	rjmp	.+0      	; 0xbb6 <main+0x2ac>
     bb6:	00 00       	nop
				_delay_ms(2000);
				trig1_PORT &= ~(1 << trig1_PIN);
     bb8:	94 98       	cbi	0x12, 4	; 18
				while (sensorCount == 6 && allFlag == 1) sensorValueConversion();
     bba:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <sensorCount>
     bbe:	86 30       	cpi	r24, 0x06	; 6
     bc0:	71 f4       	brne	.+28     	; 0xbde <main+0x2d4>
     bc2:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <allFlag>
     bc6:	81 30       	cpi	r24, 0x01	; 1
     bc8:	51 f4       	brne	.+20     	; 0xbde <main+0x2d4>
     bca:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
     bce:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <sensorCount>
     bd2:	86 30       	cpi	r24, 0x06	; 6
     bd4:	21 f4       	brne	.+8      	; 0xbde <main+0x2d4>
     bd6:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <allFlag>
     bda:	81 30       	cpi	r24, 0x01	; 1
     bdc:	b1 f3       	breq	.-20     	; 0xbca <main+0x2c0>
/*****************************************************Stop Sequence****************************************************/
		

/**********************************************************PID********************************************************/

		if (weightedValue != 255)
     bde:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <weightedValue>
     be2:	8f 3f       	cpi	r24, 0xFF	; 255
     be4:	09 f4       	brne	.+2      	; 0xbe8 <main+0x2de>
     be6:	ce ce       	rjmp	.-612    	; 0x984 <main+0x7a>
		{
			PID_Correction();
     be8:	0e 94 90 01 	call	0x320	; 0x320 <PID_Correction>
			enable1(LMspeed);
     bec:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <LMspeed>
     bf0:	90 91 dd 00 	lds	r25, 0x00DD	; 0x8000dd <LMspeed+0x1>
     bf4:	0e 94 33 06 	call	0xc66	; 0xc66 <PWM0>
			enable2(RMspeed);
     bf8:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <RMspeed>
     bfc:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <RMspeed+0x1>
     c00:	0e 94 35 06 	call	0xc6a	; 0xc6a <PWM2>
     c04:	bf ce       	rjmp	.-642    	; 0x984 <main+0x7a>
// 			_delay_ms(300);
// 			rightSkipFlag = 0;
// 		}
// 

	 if (rightFlag == 1 && weightedValue < 7 && weightedValue > 3)
     c06:	81 30       	cpi	r24, 0x01	; 1
     c08:	51 f7       	brne	.-44     	; 0xbde <main+0x2d4>
     c0a:	0e c0       	rjmp	.+28     	; 0xc28 <main+0x31e>
			{
				sensorValueConversion();
				if (allFlag == 1 || rightFlag == 1) break;
			}

			if (allFlag == 0 && rightFlag == 0)
     c0c:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <rightFlag>
     c10:	fa cf       	rjmp	.-12     	; 0xc06 <main+0x2fc>
     c12:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <allFlag>
     c16:	88 23       	and	r24, r24
     c18:	c9 f3       	breq	.-14     	; 0xc0c <main+0x302>
     c1a:	20 cf       	rjmp	.-448    	; 0xa5c <main+0x152>
// 			_delay_ms(300);
// 			rightSkipFlag = 0;
// 		}
// 

	 if (rightFlag == 1 && weightedValue < 7 && weightedValue > 3)
     c1c:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <rightFlag>
     c20:	81 30       	cpi	r24, 0x01	; 1
     c22:	09 f0       	breq	.+2      	; 0xc26 <main+0x31c>
     c24:	8a cf       	rjmp	.-236    	; 0xb3a <main+0x230>
     c26:	1f cf       	rjmp	.-450    	; 0xa66 <main+0x15c>
     c28:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <weightedValue>
     c2c:	84 50       	subi	r24, 0x04	; 4
     c2e:	83 30       	cpi	r24, 0x03	; 3
     c30:	b0 f6       	brcc	.-84     	; 0xbde <main+0x2d4>
     c32:	1f cf       	rjmp	.-450    	; 0xa72 <main+0x168>
			{
				sensorValueConversion();
				if (allFlag == 1 || leftFlag == 1) break;
			}
			
			if (allFlag == 0 && leftFlag == 0)
     c34:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <allFlag>
     c38:	88 23       	and	r24, r24
     c3a:	89 f2       	breq	.-94     	; 0xbde <main+0x2d4>
     c3c:	79 cf       	rjmp	.-270    	; 0xb30 <main+0x226>

00000c3e <PWM0_init>:
	OCR1A = dutyCycle;
}

void PWM1B(int dutyCycle)
{
	OCR1B = dutyCycle;
     c3e:	83 b7       	in	r24, 0x33	; 51
     c40:	88 64       	ori	r24, 0x48	; 72
     c42:	83 bf       	out	0x33, r24	; 51
     c44:	83 b7       	in	r24, 0x33	; 51
     c46:	80 62       	ori	r24, 0x20	; 32
     c48:	83 bf       	out	0x33, r24	; 51
     c4a:	83 b7       	in	r24, 0x33	; 51
     c4c:	81 60       	ori	r24, 0x01	; 1
     c4e:	83 bf       	out	0x33, r24	; 51
     c50:	08 95       	ret

00000c52 <PWM2_init>:
     c52:	85 b5       	in	r24, 0x25	; 37
     c54:	88 64       	ori	r24, 0x48	; 72
     c56:	85 bd       	out	0x25, r24	; 37
     c58:	85 b5       	in	r24, 0x25	; 37
     c5a:	80 62       	ori	r24, 0x20	; 32
     c5c:	85 bd       	out	0x25, r24	; 37
     c5e:	85 b5       	in	r24, 0x25	; 37
     c60:	81 60       	ori	r24, 0x01	; 1
     c62:	85 bd       	out	0x25, r24	; 37
     c64:	08 95       	ret

00000c66 <PWM0>:
     c66:	8c bf       	out	0x3c, r24	; 60
     c68:	08 95       	ret

00000c6a <PWM2>:
}

void PWM2(int dutyCycle)
{
	OCR2 = dutyCycle;
     c6a:	83 bd       	out	0x23, r24	; 35
     c6c:	08 95       	ret

00000c6e <UART_init>:
#include "serial_lib.h"

void UART_init(void)
{
	UCSRC &= ~(1 << UMSEL);						// Asynchronous Mode Selection
     c6e:	80 b5       	in	r24, 0x20	; 32
     c70:	8f 7b       	andi	r24, 0xBF	; 191
     c72:	80 bd       	out	0x20, r24	; 32
	UCSRA &= ~(1 << U2X);						// Normal Transmission Mode
     c74:	59 98       	cbi	0x0b, 1	; 11
	UBRRH = 0;
     c76:	10 bc       	out	0x20, r1	; 32
	UBRRL = 103;
     c78:	87 e6       	ldi	r24, 0x67	; 103
     c7a:	89 b9       	out	0x09, r24	; 9
	UCSRB |= (1 << RXEN) | (1 << TXEN);
     c7c:	8a b1       	in	r24, 0x0a	; 10
     c7e:	88 61       	ori	r24, 0x18	; 24
     c80:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1 << USBS) | (3 << UCSZ0);
     c82:	80 b5       	in	r24, 0x20	; 32
     c84:	8e 68       	ori	r24, 0x8E	; 142
     c86:	80 bd       	out	0x20, r24	; 32
     c88:	08 95       	ret

00000c8a <Serial_sendChar>:
	Serial_sendString(intBuffer);
}

void Serial_sendChar(char c)
{
	while (!(UCSRA & (1 << UDRE)));
     c8a:	5d 9b       	sbis	0x0b, 5	; 11
     c8c:	fe cf       	rjmp	.-4      	; 0xc8a <Serial_sendChar>
	UDR = c;
     c8e:	8c b9       	out	0x0c, r24	; 12
     c90:	08 95       	ret

00000c92 <Serial_sendString>:
}

void Serial_sendString(char *s)
{
     c92:	cf 93       	push	r28
     c94:	df 93       	push	r29
     c96:	ec 01       	movw	r28, r24
	for(int i = 0; s[i] != '\0'; i++)
     c98:	88 81       	ld	r24, Y
     c9a:	88 23       	and	r24, r24
     c9c:	31 f0       	breq	.+12     	; 0xcaa <Serial_sendString+0x18>
     c9e:	21 96       	adiw	r28, 0x01	; 1
	{
		Serial_sendChar(s[i]);
     ca0:	0e 94 45 06 	call	0xc8a	; 0xc8a <Serial_sendChar>
	UDR = c;
}

void Serial_sendString(char *s)
{
	for(int i = 0; s[i] != '\0'; i++)
     ca4:	89 91       	ld	r24, Y+
     ca6:	81 11       	cpse	r24, r1
     ca8:	fb cf       	rjmp	.-10     	; 0xca0 <Serial_sendString+0xe>
	{
		Serial_sendChar(s[i]);
	}
}
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	08 95       	ret

00000cb0 <Serial_sendInt>:
// 	
// 	UDR = data;
// }

void Serial_sendInt(unsigned int data, int intBase)
{
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
     cb8:	64 97       	sbiw	r28, 0x14	; 20
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	f8 94       	cli
     cbe:	de bf       	out	0x3e, r29	; 62
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	cd bf       	out	0x3d, r28	; 61
     cc4:	ab 01       	movw	r20, r22
	while (!(UCSRA & (1 << UDRE)));
     cc6:	5d 9b       	sbis	0x0b, 5	; 11
     cc8:	fe cf       	rjmp	.-4      	; 0xcc6 <Serial_sendInt+0x16>
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
     cca:	be 01       	movw	r22, r28
     ccc:	6f 5f       	subi	r22, 0xFF	; 255
     cce:	7f 4f       	sbci	r23, 0xFF	; 255
     cd0:	0e 94 44 08 	call	0x1088	; 0x1088 <itoa>
	char intBuffer[20];
	itoa(data, intBuffer, intBase);
	Serial_sendString(intBuffer);
     cd4:	ce 01       	movw	r24, r28
     cd6:	01 96       	adiw	r24, 0x01	; 1
     cd8:	0e 94 49 06 	call	0xc92	; 0xc92 <Serial_sendString>
}
     cdc:	64 96       	adiw	r28, 0x14	; 20
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	de bf       	out	0x3e, r29	; 62
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	cd bf       	out	0x3d, r28	; 61
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	08 95       	ret

00000cee <__subsf3>:
     cee:	50 58       	subi	r21, 0x80	; 128

00000cf0 <__addsf3>:
     cf0:	bb 27       	eor	r27, r27
     cf2:	aa 27       	eor	r26, r26
     cf4:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__addsf3x>
     cf8:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__fp_round>
     cfc:	0e 94 60 07 	call	0xec0	; 0xec0 <__fp_pscA>
     d00:	38 f0       	brcs	.+14     	; 0xd10 <__addsf3+0x20>
     d02:	0e 94 67 07 	call	0xece	; 0xece <__fp_pscB>
     d06:	20 f0       	brcs	.+8      	; 0xd10 <__addsf3+0x20>
     d08:	39 f4       	brne	.+14     	; 0xd18 <__addsf3+0x28>
     d0a:	9f 3f       	cpi	r25, 0xFF	; 255
     d0c:	19 f4       	brne	.+6      	; 0xd14 <__addsf3+0x24>
     d0e:	26 f4       	brtc	.+8      	; 0xd18 <__addsf3+0x28>
     d10:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__fp_nan>
     d14:	0e f4       	brtc	.+2      	; 0xd18 <__addsf3+0x28>
     d16:	e0 95       	com	r30
     d18:	e7 fb       	bst	r30, 7
     d1a:	0c 94 57 07 	jmp	0xeae	; 0xeae <__fp_inf>

00000d1e <__addsf3x>:
     d1e:	e9 2f       	mov	r30, r25
     d20:	0e 94 7f 07 	call	0xefe	; 0xefe <__fp_split3>
     d24:	58 f3       	brcs	.-42     	; 0xcfc <__addsf3+0xc>
     d26:	ba 17       	cp	r27, r26
     d28:	62 07       	cpc	r22, r18
     d2a:	73 07       	cpc	r23, r19
     d2c:	84 07       	cpc	r24, r20
     d2e:	95 07       	cpc	r25, r21
     d30:	20 f0       	brcs	.+8      	; 0xd3a <__addsf3x+0x1c>
     d32:	79 f4       	brne	.+30     	; 0xd52 <__addsf3x+0x34>
     d34:	a6 f5       	brtc	.+104    	; 0xd9e <__addsf3x+0x80>
     d36:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <__fp_zero>
     d3a:	0e f4       	brtc	.+2      	; 0xd3e <__addsf3x+0x20>
     d3c:	e0 95       	com	r30
     d3e:	0b 2e       	mov	r0, r27
     d40:	ba 2f       	mov	r27, r26
     d42:	a0 2d       	mov	r26, r0
     d44:	0b 01       	movw	r0, r22
     d46:	b9 01       	movw	r22, r18
     d48:	90 01       	movw	r18, r0
     d4a:	0c 01       	movw	r0, r24
     d4c:	ca 01       	movw	r24, r20
     d4e:	a0 01       	movw	r20, r0
     d50:	11 24       	eor	r1, r1
     d52:	ff 27       	eor	r31, r31
     d54:	59 1b       	sub	r21, r25
     d56:	99 f0       	breq	.+38     	; 0xd7e <__addsf3x+0x60>
     d58:	59 3f       	cpi	r21, 0xF9	; 249
     d5a:	50 f4       	brcc	.+20     	; 0xd70 <__addsf3x+0x52>
     d5c:	50 3e       	cpi	r21, 0xE0	; 224
     d5e:	68 f1       	brcs	.+90     	; 0xdba <__addsf3x+0x9c>
     d60:	1a 16       	cp	r1, r26
     d62:	f0 40       	sbci	r31, 0x00	; 0
     d64:	a2 2f       	mov	r26, r18
     d66:	23 2f       	mov	r18, r19
     d68:	34 2f       	mov	r19, r20
     d6a:	44 27       	eor	r20, r20
     d6c:	58 5f       	subi	r21, 0xF8	; 248
     d6e:	f3 cf       	rjmp	.-26     	; 0xd56 <__addsf3x+0x38>
     d70:	46 95       	lsr	r20
     d72:	37 95       	ror	r19
     d74:	27 95       	ror	r18
     d76:	a7 95       	ror	r26
     d78:	f0 40       	sbci	r31, 0x00	; 0
     d7a:	53 95       	inc	r21
     d7c:	c9 f7       	brne	.-14     	; 0xd70 <__addsf3x+0x52>
     d7e:	7e f4       	brtc	.+30     	; 0xd9e <__addsf3x+0x80>
     d80:	1f 16       	cp	r1, r31
     d82:	ba 0b       	sbc	r27, r26
     d84:	62 0b       	sbc	r22, r18
     d86:	73 0b       	sbc	r23, r19
     d88:	84 0b       	sbc	r24, r20
     d8a:	ba f0       	brmi	.+46     	; 0xdba <__addsf3x+0x9c>
     d8c:	91 50       	subi	r25, 0x01	; 1
     d8e:	a1 f0       	breq	.+40     	; 0xdb8 <__addsf3x+0x9a>
     d90:	ff 0f       	add	r31, r31
     d92:	bb 1f       	adc	r27, r27
     d94:	66 1f       	adc	r22, r22
     d96:	77 1f       	adc	r23, r23
     d98:	88 1f       	adc	r24, r24
     d9a:	c2 f7       	brpl	.-16     	; 0xd8c <__addsf3x+0x6e>
     d9c:	0e c0       	rjmp	.+28     	; 0xdba <__addsf3x+0x9c>
     d9e:	ba 0f       	add	r27, r26
     da0:	62 1f       	adc	r22, r18
     da2:	73 1f       	adc	r23, r19
     da4:	84 1f       	adc	r24, r20
     da6:	48 f4       	brcc	.+18     	; 0xdba <__addsf3x+0x9c>
     da8:	87 95       	ror	r24
     daa:	77 95       	ror	r23
     dac:	67 95       	ror	r22
     dae:	b7 95       	ror	r27
     db0:	f7 95       	ror	r31
     db2:	9e 3f       	cpi	r25, 0xFE	; 254
     db4:	08 f0       	brcs	.+2      	; 0xdb8 <__addsf3x+0x9a>
     db6:	b0 cf       	rjmp	.-160    	; 0xd18 <__addsf3+0x28>
     db8:	93 95       	inc	r25
     dba:	88 0f       	add	r24, r24
     dbc:	08 f0       	brcs	.+2      	; 0xdc0 <__addsf3x+0xa2>
     dbe:	99 27       	eor	r25, r25
     dc0:	ee 0f       	add	r30, r30
     dc2:	97 95       	ror	r25
     dc4:	87 95       	ror	r24
     dc6:	08 95       	ret

00000dc8 <__fixsfsi>:
     dc8:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__fixunssfsi>
     dcc:	68 94       	set
     dce:	b1 11       	cpse	r27, r1
     dd0:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__fp_szero>
     dd4:	08 95       	ret

00000dd6 <__fixunssfsi>:
     dd6:	0e 94 87 07 	call	0xf0e	; 0xf0e <__fp_splitA>
     dda:	88 f0       	brcs	.+34     	; 0xdfe <__fixunssfsi+0x28>
     ddc:	9f 57       	subi	r25, 0x7F	; 127
     dde:	98 f0       	brcs	.+38     	; 0xe06 <__fixunssfsi+0x30>
     de0:	b9 2f       	mov	r27, r25
     de2:	99 27       	eor	r25, r25
     de4:	b7 51       	subi	r27, 0x17	; 23
     de6:	b0 f0       	brcs	.+44     	; 0xe14 <__fixunssfsi+0x3e>
     de8:	e1 f0       	breq	.+56     	; 0xe22 <__fixunssfsi+0x4c>
     dea:	66 0f       	add	r22, r22
     dec:	77 1f       	adc	r23, r23
     dee:	88 1f       	adc	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	1a f0       	brmi	.+6      	; 0xdfa <__fixunssfsi+0x24>
     df4:	ba 95       	dec	r27
     df6:	c9 f7       	brne	.-14     	; 0xdea <__fixunssfsi+0x14>
     df8:	14 c0       	rjmp	.+40     	; 0xe22 <__fixunssfsi+0x4c>
     dfa:	b1 30       	cpi	r27, 0x01	; 1
     dfc:	91 f0       	breq	.+36     	; 0xe22 <__fixunssfsi+0x4c>
     dfe:	0e 94 a1 07 	call	0xf42	; 0xf42 <__fp_zero>
     e02:	b1 e0       	ldi	r27, 0x01	; 1
     e04:	08 95       	ret
     e06:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <__fp_zero>
     e0a:	67 2f       	mov	r22, r23
     e0c:	78 2f       	mov	r23, r24
     e0e:	88 27       	eor	r24, r24
     e10:	b8 5f       	subi	r27, 0xF8	; 248
     e12:	39 f0       	breq	.+14     	; 0xe22 <__fixunssfsi+0x4c>
     e14:	b9 3f       	cpi	r27, 0xF9	; 249
     e16:	cc f3       	brlt	.-14     	; 0xe0a <__fixunssfsi+0x34>
     e18:	86 95       	lsr	r24
     e1a:	77 95       	ror	r23
     e1c:	67 95       	ror	r22
     e1e:	b3 95       	inc	r27
     e20:	d9 f7       	brne	.-10     	; 0xe18 <__fixunssfsi+0x42>
     e22:	3e f4       	brtc	.+14     	; 0xe32 <__fixunssfsi+0x5c>
     e24:	90 95       	com	r25
     e26:	80 95       	com	r24
     e28:	70 95       	com	r23
     e2a:	61 95       	neg	r22
     e2c:	7f 4f       	sbci	r23, 0xFF	; 255
     e2e:	8f 4f       	sbci	r24, 0xFF	; 255
     e30:	9f 4f       	sbci	r25, 0xFF	; 255
     e32:	08 95       	ret

00000e34 <__floatunsisf>:
     e34:	e8 94       	clt
     e36:	09 c0       	rjmp	.+18     	; 0xe4a <__floatsisf+0x12>

00000e38 <__floatsisf>:
     e38:	97 fb       	bst	r25, 7
     e3a:	3e f4       	brtc	.+14     	; 0xe4a <__floatsisf+0x12>
     e3c:	90 95       	com	r25
     e3e:	80 95       	com	r24
     e40:	70 95       	com	r23
     e42:	61 95       	neg	r22
     e44:	7f 4f       	sbci	r23, 0xFF	; 255
     e46:	8f 4f       	sbci	r24, 0xFF	; 255
     e48:	9f 4f       	sbci	r25, 0xFF	; 255
     e4a:	99 23       	and	r25, r25
     e4c:	a9 f0       	breq	.+42     	; 0xe78 <__floatsisf+0x40>
     e4e:	f9 2f       	mov	r31, r25
     e50:	96 e9       	ldi	r25, 0x96	; 150
     e52:	bb 27       	eor	r27, r27
     e54:	93 95       	inc	r25
     e56:	f6 95       	lsr	r31
     e58:	87 95       	ror	r24
     e5a:	77 95       	ror	r23
     e5c:	67 95       	ror	r22
     e5e:	b7 95       	ror	r27
     e60:	f1 11       	cpse	r31, r1
     e62:	f8 cf       	rjmp	.-16     	; 0xe54 <__floatsisf+0x1c>
     e64:	fa f4       	brpl	.+62     	; 0xea4 <__floatsisf+0x6c>
     e66:	bb 0f       	add	r27, r27
     e68:	11 f4       	brne	.+4      	; 0xe6e <__floatsisf+0x36>
     e6a:	60 ff       	sbrs	r22, 0
     e6c:	1b c0       	rjmp	.+54     	; 0xea4 <__floatsisf+0x6c>
     e6e:	6f 5f       	subi	r22, 0xFF	; 255
     e70:	7f 4f       	sbci	r23, 0xFF	; 255
     e72:	8f 4f       	sbci	r24, 0xFF	; 255
     e74:	9f 4f       	sbci	r25, 0xFF	; 255
     e76:	16 c0       	rjmp	.+44     	; 0xea4 <__floatsisf+0x6c>
     e78:	88 23       	and	r24, r24
     e7a:	11 f0       	breq	.+4      	; 0xe80 <__floatsisf+0x48>
     e7c:	96 e9       	ldi	r25, 0x96	; 150
     e7e:	11 c0       	rjmp	.+34     	; 0xea2 <__floatsisf+0x6a>
     e80:	77 23       	and	r23, r23
     e82:	21 f0       	breq	.+8      	; 0xe8c <__floatsisf+0x54>
     e84:	9e e8       	ldi	r25, 0x8E	; 142
     e86:	87 2f       	mov	r24, r23
     e88:	76 2f       	mov	r23, r22
     e8a:	05 c0       	rjmp	.+10     	; 0xe96 <__floatsisf+0x5e>
     e8c:	66 23       	and	r22, r22
     e8e:	71 f0       	breq	.+28     	; 0xeac <__floatsisf+0x74>
     e90:	96 e8       	ldi	r25, 0x86	; 134
     e92:	86 2f       	mov	r24, r22
     e94:	70 e0       	ldi	r23, 0x00	; 0
     e96:	60 e0       	ldi	r22, 0x00	; 0
     e98:	2a f0       	brmi	.+10     	; 0xea4 <__floatsisf+0x6c>
     e9a:	9a 95       	dec	r25
     e9c:	66 0f       	add	r22, r22
     e9e:	77 1f       	adc	r23, r23
     ea0:	88 1f       	adc	r24, r24
     ea2:	da f7       	brpl	.-10     	; 0xe9a <__floatsisf+0x62>
     ea4:	88 0f       	add	r24, r24
     ea6:	96 95       	lsr	r25
     ea8:	87 95       	ror	r24
     eaa:	97 f9       	bld	r25, 7
     eac:	08 95       	ret

00000eae <__fp_inf>:
     eae:	97 f9       	bld	r25, 7
     eb0:	9f 67       	ori	r25, 0x7F	; 127
     eb2:	80 e8       	ldi	r24, 0x80	; 128
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	08 95       	ret

00000eba <__fp_nan>:
     eba:	9f ef       	ldi	r25, 0xFF	; 255
     ebc:	80 ec       	ldi	r24, 0xC0	; 192
     ebe:	08 95       	ret

00000ec0 <__fp_pscA>:
     ec0:	00 24       	eor	r0, r0
     ec2:	0a 94       	dec	r0
     ec4:	16 16       	cp	r1, r22
     ec6:	17 06       	cpc	r1, r23
     ec8:	18 06       	cpc	r1, r24
     eca:	09 06       	cpc	r0, r25
     ecc:	08 95       	ret

00000ece <__fp_pscB>:
     ece:	00 24       	eor	r0, r0
     ed0:	0a 94       	dec	r0
     ed2:	12 16       	cp	r1, r18
     ed4:	13 06       	cpc	r1, r19
     ed6:	14 06       	cpc	r1, r20
     ed8:	05 06       	cpc	r0, r21
     eda:	08 95       	ret

00000edc <__fp_round>:
     edc:	09 2e       	mov	r0, r25
     ede:	03 94       	inc	r0
     ee0:	00 0c       	add	r0, r0
     ee2:	11 f4       	brne	.+4      	; 0xee8 <__fp_round+0xc>
     ee4:	88 23       	and	r24, r24
     ee6:	52 f0       	brmi	.+20     	; 0xefc <__fp_round+0x20>
     ee8:	bb 0f       	add	r27, r27
     eea:	40 f4       	brcc	.+16     	; 0xefc <__fp_round+0x20>
     eec:	bf 2b       	or	r27, r31
     eee:	11 f4       	brne	.+4      	; 0xef4 <__fp_round+0x18>
     ef0:	60 ff       	sbrs	r22, 0
     ef2:	04 c0       	rjmp	.+8      	; 0xefc <__fp_round+0x20>
     ef4:	6f 5f       	subi	r22, 0xFF	; 255
     ef6:	7f 4f       	sbci	r23, 0xFF	; 255
     ef8:	8f 4f       	sbci	r24, 0xFF	; 255
     efa:	9f 4f       	sbci	r25, 0xFF	; 255
     efc:	08 95       	ret

00000efe <__fp_split3>:
     efe:	57 fd       	sbrc	r21, 7
     f00:	90 58       	subi	r25, 0x80	; 128
     f02:	44 0f       	add	r20, r20
     f04:	55 1f       	adc	r21, r21
     f06:	59 f0       	breq	.+22     	; 0xf1e <__fp_splitA+0x10>
     f08:	5f 3f       	cpi	r21, 0xFF	; 255
     f0a:	71 f0       	breq	.+28     	; 0xf28 <__fp_splitA+0x1a>
     f0c:	47 95       	ror	r20

00000f0e <__fp_splitA>:
     f0e:	88 0f       	add	r24, r24
     f10:	97 fb       	bst	r25, 7
     f12:	99 1f       	adc	r25, r25
     f14:	61 f0       	breq	.+24     	; 0xf2e <__fp_splitA+0x20>
     f16:	9f 3f       	cpi	r25, 0xFF	; 255
     f18:	79 f0       	breq	.+30     	; 0xf38 <__fp_splitA+0x2a>
     f1a:	87 95       	ror	r24
     f1c:	08 95       	ret
     f1e:	12 16       	cp	r1, r18
     f20:	13 06       	cpc	r1, r19
     f22:	14 06       	cpc	r1, r20
     f24:	55 1f       	adc	r21, r21
     f26:	f2 cf       	rjmp	.-28     	; 0xf0c <__fp_split3+0xe>
     f28:	46 95       	lsr	r20
     f2a:	f1 df       	rcall	.-30     	; 0xf0e <__fp_splitA>
     f2c:	08 c0       	rjmp	.+16     	; 0xf3e <__fp_splitA+0x30>
     f2e:	16 16       	cp	r1, r22
     f30:	17 06       	cpc	r1, r23
     f32:	18 06       	cpc	r1, r24
     f34:	99 1f       	adc	r25, r25
     f36:	f1 cf       	rjmp	.-30     	; 0xf1a <__fp_splitA+0xc>
     f38:	86 95       	lsr	r24
     f3a:	71 05       	cpc	r23, r1
     f3c:	61 05       	cpc	r22, r1
     f3e:	08 94       	sec
     f40:	08 95       	ret

00000f42 <__fp_zero>:
     f42:	e8 94       	clt

00000f44 <__fp_szero>:
     f44:	bb 27       	eor	r27, r27
     f46:	66 27       	eor	r22, r22
     f48:	77 27       	eor	r23, r23
     f4a:	cb 01       	movw	r24, r22
     f4c:	97 f9       	bld	r25, 7
     f4e:	08 95       	ret

00000f50 <__mulsf3>:
     f50:	0e 94 bb 07 	call	0xf76	; 0xf76 <__mulsf3x>
     f54:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__fp_round>
     f58:	0e 94 60 07 	call	0xec0	; 0xec0 <__fp_pscA>
     f5c:	38 f0       	brcs	.+14     	; 0xf6c <__mulsf3+0x1c>
     f5e:	0e 94 67 07 	call	0xece	; 0xece <__fp_pscB>
     f62:	20 f0       	brcs	.+8      	; 0xf6c <__mulsf3+0x1c>
     f64:	95 23       	and	r25, r21
     f66:	11 f0       	breq	.+4      	; 0xf6c <__mulsf3+0x1c>
     f68:	0c 94 57 07 	jmp	0xeae	; 0xeae <__fp_inf>
     f6c:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__fp_nan>
     f70:	11 24       	eor	r1, r1
     f72:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__fp_szero>

00000f76 <__mulsf3x>:
     f76:	0e 94 7f 07 	call	0xefe	; 0xefe <__fp_split3>
     f7a:	70 f3       	brcs	.-36     	; 0xf58 <__mulsf3+0x8>

00000f7c <__mulsf3_pse>:
     f7c:	95 9f       	mul	r25, r21
     f7e:	c1 f3       	breq	.-16     	; 0xf70 <__mulsf3+0x20>
     f80:	95 0f       	add	r25, r21
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	55 1f       	adc	r21, r21
     f86:	62 9f       	mul	r22, r18
     f88:	f0 01       	movw	r30, r0
     f8a:	72 9f       	mul	r23, r18
     f8c:	bb 27       	eor	r27, r27
     f8e:	f0 0d       	add	r31, r0
     f90:	b1 1d       	adc	r27, r1
     f92:	63 9f       	mul	r22, r19
     f94:	aa 27       	eor	r26, r26
     f96:	f0 0d       	add	r31, r0
     f98:	b1 1d       	adc	r27, r1
     f9a:	aa 1f       	adc	r26, r26
     f9c:	64 9f       	mul	r22, r20
     f9e:	66 27       	eor	r22, r22
     fa0:	b0 0d       	add	r27, r0
     fa2:	a1 1d       	adc	r26, r1
     fa4:	66 1f       	adc	r22, r22
     fa6:	82 9f       	mul	r24, r18
     fa8:	22 27       	eor	r18, r18
     faa:	b0 0d       	add	r27, r0
     fac:	a1 1d       	adc	r26, r1
     fae:	62 1f       	adc	r22, r18
     fb0:	73 9f       	mul	r23, r19
     fb2:	b0 0d       	add	r27, r0
     fb4:	a1 1d       	adc	r26, r1
     fb6:	62 1f       	adc	r22, r18
     fb8:	83 9f       	mul	r24, r19
     fba:	a0 0d       	add	r26, r0
     fbc:	61 1d       	adc	r22, r1
     fbe:	22 1f       	adc	r18, r18
     fc0:	74 9f       	mul	r23, r20
     fc2:	33 27       	eor	r19, r19
     fc4:	a0 0d       	add	r26, r0
     fc6:	61 1d       	adc	r22, r1
     fc8:	23 1f       	adc	r18, r19
     fca:	84 9f       	mul	r24, r20
     fcc:	60 0d       	add	r22, r0
     fce:	21 1d       	adc	r18, r1
     fd0:	82 2f       	mov	r24, r18
     fd2:	76 2f       	mov	r23, r22
     fd4:	6a 2f       	mov	r22, r26
     fd6:	11 24       	eor	r1, r1
     fd8:	9f 57       	subi	r25, 0x7F	; 127
     fda:	50 40       	sbci	r21, 0x00	; 0
     fdc:	9a f0       	brmi	.+38     	; 0x1004 <__mulsf3_pse+0x88>
     fde:	f1 f0       	breq	.+60     	; 0x101c <__mulsf3_pse+0xa0>
     fe0:	88 23       	and	r24, r24
     fe2:	4a f0       	brmi	.+18     	; 0xff6 <__mulsf3_pse+0x7a>
     fe4:	ee 0f       	add	r30, r30
     fe6:	ff 1f       	adc	r31, r31
     fe8:	bb 1f       	adc	r27, r27
     fea:	66 1f       	adc	r22, r22
     fec:	77 1f       	adc	r23, r23
     fee:	88 1f       	adc	r24, r24
     ff0:	91 50       	subi	r25, 0x01	; 1
     ff2:	50 40       	sbci	r21, 0x00	; 0
     ff4:	a9 f7       	brne	.-22     	; 0xfe0 <__mulsf3_pse+0x64>
     ff6:	9e 3f       	cpi	r25, 0xFE	; 254
     ff8:	51 05       	cpc	r21, r1
     ffa:	80 f0       	brcs	.+32     	; 0x101c <__mulsf3_pse+0xa0>
     ffc:	0c 94 57 07 	jmp	0xeae	; 0xeae <__fp_inf>
    1000:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__fp_szero>
    1004:	5f 3f       	cpi	r21, 0xFF	; 255
    1006:	e4 f3       	brlt	.-8      	; 0x1000 <__mulsf3_pse+0x84>
    1008:	98 3e       	cpi	r25, 0xE8	; 232
    100a:	d4 f3       	brlt	.-12     	; 0x1000 <__mulsf3_pse+0x84>
    100c:	86 95       	lsr	r24
    100e:	77 95       	ror	r23
    1010:	67 95       	ror	r22
    1012:	b7 95       	ror	r27
    1014:	f7 95       	ror	r31
    1016:	e7 95       	ror	r30
    1018:	9f 5f       	subi	r25, 0xFF	; 255
    101a:	c1 f7       	brne	.-16     	; 0x100c <__mulsf3_pse+0x90>
    101c:	fe 2b       	or	r31, r30
    101e:	88 0f       	add	r24, r24
    1020:	91 1d       	adc	r25, r1
    1022:	96 95       	lsr	r25
    1024:	87 95       	ror	r24
    1026:	97 f9       	bld	r25, 7
    1028:	08 95       	ret

0000102a <__udivmodqi4>:
    102a:	99 1b       	sub	r25, r25
    102c:	79 e0       	ldi	r23, 0x09	; 9
    102e:	04 c0       	rjmp	.+8      	; 0x1038 <__udivmodqi4_ep>

00001030 <__udivmodqi4_loop>:
    1030:	99 1f       	adc	r25, r25
    1032:	96 17       	cp	r25, r22
    1034:	08 f0       	brcs	.+2      	; 0x1038 <__udivmodqi4_ep>
    1036:	96 1b       	sub	r25, r22

00001038 <__udivmodqi4_ep>:
    1038:	88 1f       	adc	r24, r24
    103a:	7a 95       	dec	r23
    103c:	c9 f7       	brne	.-14     	; 0x1030 <__udivmodqi4_loop>
    103e:	80 95       	com	r24
    1040:	08 95       	ret

00001042 <__udivmodhi4>:
    1042:	aa 1b       	sub	r26, r26
    1044:	bb 1b       	sub	r27, r27
    1046:	51 e1       	ldi	r21, 0x11	; 17
    1048:	07 c0       	rjmp	.+14     	; 0x1058 <__udivmodhi4_ep>

0000104a <__udivmodhi4_loop>:
    104a:	aa 1f       	adc	r26, r26
    104c:	bb 1f       	adc	r27, r27
    104e:	a6 17       	cp	r26, r22
    1050:	b7 07       	cpc	r27, r23
    1052:	10 f0       	brcs	.+4      	; 0x1058 <__udivmodhi4_ep>
    1054:	a6 1b       	sub	r26, r22
    1056:	b7 0b       	sbc	r27, r23

00001058 <__udivmodhi4_ep>:
    1058:	88 1f       	adc	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	5a 95       	dec	r21
    105e:	a9 f7       	brne	.-22     	; 0x104a <__udivmodhi4_loop>
    1060:	80 95       	com	r24
    1062:	90 95       	com	r25
    1064:	bc 01       	movw	r22, r24
    1066:	cd 01       	movw	r24, r26
    1068:	08 95       	ret

0000106a <__umulhisi3>:
    106a:	a2 9f       	mul	r26, r18
    106c:	b0 01       	movw	r22, r0
    106e:	b3 9f       	mul	r27, r19
    1070:	c0 01       	movw	r24, r0
    1072:	a3 9f       	mul	r26, r19
    1074:	70 0d       	add	r23, r0
    1076:	81 1d       	adc	r24, r1
    1078:	11 24       	eor	r1, r1
    107a:	91 1d       	adc	r25, r1
    107c:	b2 9f       	mul	r27, r18
    107e:	70 0d       	add	r23, r0
    1080:	81 1d       	adc	r24, r1
    1082:	11 24       	eor	r1, r1
    1084:	91 1d       	adc	r25, r1
    1086:	08 95       	ret

00001088 <itoa>:
    1088:	45 32       	cpi	r20, 0x25	; 37
    108a:	51 05       	cpc	r21, r1
    108c:	20 f4       	brcc	.+8      	; 0x1096 <itoa+0xe>
    108e:	42 30       	cpi	r20, 0x02	; 2
    1090:	10 f0       	brcs	.+4      	; 0x1096 <itoa+0xe>
    1092:	0c 94 4f 08 	jmp	0x109e	; 0x109e <__itoa_ncheck>
    1096:	fb 01       	movw	r30, r22
    1098:	10 82       	st	Z, r1
    109a:	cb 01       	movw	r24, r22
    109c:	08 95       	ret

0000109e <__itoa_ncheck>:
    109e:	bb 27       	eor	r27, r27
    10a0:	4a 30       	cpi	r20, 0x0A	; 10
    10a2:	31 f4       	brne	.+12     	; 0x10b0 <__itoa_ncheck+0x12>
    10a4:	99 23       	and	r25, r25
    10a6:	22 f4       	brpl	.+8      	; 0x10b0 <__itoa_ncheck+0x12>
    10a8:	bd e2       	ldi	r27, 0x2D	; 45
    10aa:	90 95       	com	r25
    10ac:	81 95       	neg	r24
    10ae:	9f 4f       	sbci	r25, 0xFF	; 255
    10b0:	0c 94 5b 08 	jmp	0x10b6	; 0x10b6 <__utoa_common>

000010b4 <__utoa_ncheck>:
    10b4:	bb 27       	eor	r27, r27

000010b6 <__utoa_common>:
    10b6:	fb 01       	movw	r30, r22
    10b8:	55 27       	eor	r21, r21
    10ba:	aa 27       	eor	r26, r26
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	aa 1f       	adc	r26, r26
    10c2:	a4 17       	cp	r26, r20
    10c4:	10 f0       	brcs	.+4      	; 0x10ca <__utoa_common+0x14>
    10c6:	a4 1b       	sub	r26, r20
    10c8:	83 95       	inc	r24
    10ca:	50 51       	subi	r21, 0x10	; 16
    10cc:	b9 f7       	brne	.-18     	; 0x10bc <__utoa_common+0x6>
    10ce:	a0 5d       	subi	r26, 0xD0	; 208
    10d0:	aa 33       	cpi	r26, 0x3A	; 58
    10d2:	08 f0       	brcs	.+2      	; 0x10d6 <__utoa_common+0x20>
    10d4:	a9 5d       	subi	r26, 0xD9	; 217
    10d6:	a1 93       	st	Z+, r26
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	79 f7       	brne	.-34     	; 0x10ba <__utoa_common+0x4>
    10dc:	b1 11       	cpse	r27, r1
    10de:	b1 93       	st	Z+, r27
    10e0:	11 92       	st	Z+, r1
    10e2:	cb 01       	movw	r24, r22
    10e4:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <strrev>

000010e8 <strrev>:
    10e8:	dc 01       	movw	r26, r24
    10ea:	fc 01       	movw	r30, r24
    10ec:	67 2f       	mov	r22, r23
    10ee:	71 91       	ld	r23, Z+
    10f0:	77 23       	and	r23, r23
    10f2:	e1 f7       	brne	.-8      	; 0x10ec <strrev+0x4>
    10f4:	32 97       	sbiw	r30, 0x02	; 2
    10f6:	04 c0       	rjmp	.+8      	; 0x1100 <strrev+0x18>
    10f8:	7c 91       	ld	r23, X
    10fa:	6d 93       	st	X+, r22
    10fc:	70 83       	st	Z, r23
    10fe:	62 91       	ld	r22, -Z
    1100:	ae 17       	cp	r26, r30
    1102:	bf 07       	cpc	r27, r31
    1104:	c8 f3       	brcs	.-14     	; 0x10f8 <strrev+0x10>
    1106:	08 95       	ret

00001108 <_exit>:
    1108:	f8 94       	cli

0000110a <__stop_program>:
    110a:	ff cf       	rjmp	.-2      	; 0x110a <__stop_program>
