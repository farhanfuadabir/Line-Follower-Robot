
LFR_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000012a6  0000133a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  00800078  00800078  00001352  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001352  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001384  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001213  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000555  00000000  00000000  0000276b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000094e  00000000  00000000  00002cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d4  00000000  00000000  00003610  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000543  00000000  00000000  000039e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000857  00000000  00000000  00003f27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  0000477e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__vector_1>
       8:	0c 94 c5 06 	jmp	0xd8a	; 0xd8a <__vector_2>
       c:	0c 94 10 07 	jmp	0xe20	; 0xe20 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 5f 07 	jmp	0xebe	; 0xebe <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 76 07 	jmp	0xeec	; 0xeec <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ea       	ldi	r30, 0xA6	; 166
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 39       	cpi	r26, 0x9F	; 159
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3e 05 	call	0xa7c	; 0xa7c <main>
      8a:	0c 94 51 09 	jmp	0x12a2	; 0x12a2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <adc_init>:
      92:	3e 9a       	sbi	0x07, 6	; 7
      94:	37 9a       	sbi	0x06, 7	; 6
      96:	86 b1       	in	r24, 0x06	; 6
      98:	87 60       	ori	r24, 0x07	; 7
      9a:	86 b9       	out	0x06, r24	; 6
      9c:	08 95       	ret

0000009e <adcRead>:
      9e:	97 b1       	in	r25, 0x07	; 7
      a0:	90 7e       	andi	r25, 0xE0	; 224
      a2:	97 b9       	out	0x07, r25	; 7
      a4:	97 b1       	in	r25, 0x07	; 7
      a6:	89 2b       	or	r24, r25
      a8:	87 b9       	out	0x07, r24	; 7
      aa:	36 9a       	sbi	0x06, 6	; 6
      ac:	36 99       	sbic	0x06, 6	; 6
      ae:	fe cf       	rjmp	.-4      	; 0xac <adcRead+0xe>
      b0:	84 b1       	in	r24, 0x04	; 4
      b2:	95 b1       	in	r25, 0x05	; 5
      b4:	08 95       	ret

000000b6 <sensorValueConversion>:
	trig2_PORT &= ~(1 << trig2_PIN);
	trig3_PORT &= ~(1 << trig3_PIN);
		
	distance1 = .0353 * pulse1 / 2;
	distance2 = .0353 * pulse2 / 2;
	distance3 = .0353 * pulse3 / 2;
      b6:	bf 92       	push	r11
      b8:	cf 92       	push	r12
      ba:	df 92       	push	r13
      bc:	ef 92       	push	r14
      be:	ff 92       	push	r15
      c0:	0f 93       	push	r16
      c2:	1f 93       	push	r17
		enable2(RMspeed);
	}
}

void sensorValueConversion(void)
{
      c4:	cf 93       	push	r28
      c6:	df 93       	push	r29
	int digitalValue = 0;
	sensorValue = 0;
      c8:	10 92 9e 00 	sts	0x009E, r1
      cc:	10 92 9d 00 	sts	0x009D, r1
      d0:	08 e7       	ldi	r16, 0x78	; 120
      d2:	10 e0       	ldi	r17, 0x00	; 0
      d4:	c0 e0       	ldi	r28, 0x00	; 0
      d6:	d0 e0       	ldi	r29, 0x00	; 0
      d8:	0f 2e       	mov	r0, r31
      da:	f7 e0       	ldi	r31, 0x07	; 7
      dc:	df 2e       	mov	r13, r31
      de:	f0 2d       	mov	r31, r0
	signed int sensorNumber = 0;
	
	for (sensorNumber = 7; sensorNumber >= 0; sensorNumber--)
	{
		int temp = adcRead(sensorNumber);
		if (temp > compareValue[sensorNumber]) digitalValue = 0;
      e0:	ee 24       	eor	r14, r14
      e2:	e3 94       	inc	r14
      e4:	f1 2c       	mov	r15, r1
      e6:	b1 2c       	mov	r11, r1
      e8:	c1 2c       	mov	r12, r1
	sensorValue = 0;
	signed int sensorNumber = 0;
	
	for (sensorNumber = 7; sensorNumber >= 0; sensorNumber--)
	{
		int temp = adcRead(sensorNumber);
      ea:	8d 2d       	mov	r24, r13
      ec:	8c 1b       	sub	r24, r28
      ee:	0e 94 4f 00 	call	0x9e	; 0x9e <adcRead>
		if (temp > compareValue[sensorNumber]) digitalValue = 0;
		else digitalValue = 1;
		sensorValue |= (digitalValue << (7 - sensorNumber));
      f2:	40 91 9d 00 	lds	r20, 0x009D
      f6:	50 91 9e 00 	lds	r21, 0x009E
	signed int sensorNumber = 0;
	
	for (sensorNumber = 7; sensorNumber >= 0; sensorNumber--)
	{
		int temp = adcRead(sensorNumber);
		if (temp > compareValue[sensorNumber]) digitalValue = 0;
      fa:	2e 2d       	mov	r18, r14
      fc:	3f 2d       	mov	r19, r15
      fe:	f8 01       	movw	r30, r16
     100:	72 91       	ld	r23, -Z
     102:	62 91       	ld	r22, -Z
     104:	8f 01       	movw	r16, r30
     106:	68 17       	cp	r22, r24
     108:	79 07       	cpc	r23, r25
     10a:	10 f4       	brcc	.+4      	; 0x110 <sensorValueConversion+0x5a>
     10c:	2b 2d       	mov	r18, r11
     10e:	3c 2d       	mov	r19, r12
		else digitalValue = 1;
		sensorValue |= (digitalValue << (7 - sensorNumber));
     110:	0c 2e       	mov	r0, r28
     112:	02 c0       	rjmp	.+4      	; 0x118 <sensorValueConversion+0x62>
     114:	22 0f       	add	r18, r18
     116:	33 1f       	adc	r19, r19
     118:	0a 94       	dec	r0
     11a:	e2 f7       	brpl	.-8      	; 0x114 <sensorValueConversion+0x5e>
     11c:	24 2b       	or	r18, r20
     11e:	35 2b       	or	r19, r21
     120:	30 93 9e 00 	sts	0x009E, r19
     124:	20 93 9d 00 	sts	0x009D, r18
     128:	21 96       	adiw	r28, 0x01	; 1
{
	int digitalValue = 0;
	sensorValue = 0;
	signed int sensorNumber = 0;
	
	for (sensorNumber = 7; sensorNumber >= 0; sensorNumber--)
     12a:	c8 30       	cpi	r28, 0x08	; 8
     12c:	d1 05       	cpc	r29, r1
     12e:	e9 f6       	brne	.-70     	; 0xea <sensorValueConversion+0x34>
		else digitalValue = 1;
		sensorValue |= (digitalValue << (7 - sensorNumber));
// 		Serial_sendInt(temp, DEC);
// 		Serial_sendString("\t");
	}
}
     130:	df 91       	pop	r29
     132:	cf 91       	pop	r28
     134:	1f 91       	pop	r17
     136:	0f 91       	pop	r16
     138:	ff 90       	pop	r15
     13a:	ef 90       	pop	r14
     13c:	df 90       	pop	r13
     13e:	cf 90       	pop	r12
     140:	bf 90       	pop	r11
     142:	08 95       	ret

00000144 <sensorMapping>:



void sensorMapping(void)
{
	prev_mappedValue = mappedValue;
     144:	80 91 9b 00 	lds	r24, 0x009B
     148:	90 91 9c 00 	lds	r25, 0x009C
     14c:	90 93 9a 00 	sts	0x009A, r25
     150:	80 93 99 00 	sts	0x0099, r24
	if (sensorValue == 0b00000000) mappedValue = prev_mappedValue;
     154:	80 91 9d 00 	lds	r24, 0x009D
     158:	90 91 9e 00 	lds	r25, 0x009E
     15c:	89 2b       	or	r24, r25
     15e:	49 f4       	brne	.+18     	; 0x172 <sensorMapping+0x2e>
     160:	80 91 99 00 	lds	r24, 0x0099
     164:	90 91 9a 00 	lds	r25, 0x009A
     168:	90 93 9c 00 	sts	0x009C, r25
     16c:	80 93 9b 00 	sts	0x009B, r24
     170:	08 95       	ret
	else if (sensorValue == 0b11111111) mappedValue = 0;
     172:	80 91 9d 00 	lds	r24, 0x009D
     176:	90 91 9e 00 	lds	r25, 0x009E
     17a:	8f 3f       	cpi	r24, 0xFF	; 255
     17c:	91 05       	cpc	r25, r1
     17e:	29 f4       	brne	.+10     	; 0x18a <sensorMapping+0x46>
     180:	10 92 9c 00 	sts	0x009C, r1
     184:	10 92 9b 00 	sts	0x009B, r1
     188:	08 95       	ret
	
	else if ((sensorValue == 0b00011001) || (sensorValue == 0b00001001) || (sensorValue == 0b00010001) || (sensorValue == 0b00110001) || (sensorValue == 0b01110001) || (sensorValue == 0b01100001) || (sensorValue == 0b01100011)) mappedValue = 120;
     18a:	80 91 9d 00 	lds	r24, 0x009D
     18e:	90 91 9e 00 	lds	r25, 0x009E
     192:	49 97       	sbiw	r24, 0x19	; 25
     194:	39 f1       	breq	.+78     	; 0x1e4 <sensorMapping+0xa0>
     196:	80 91 9d 00 	lds	r24, 0x009D
     19a:	90 91 9e 00 	lds	r25, 0x009E
     19e:	09 97       	sbiw	r24, 0x09	; 9
     1a0:	09 f1       	breq	.+66     	; 0x1e4 <sensorMapping+0xa0>
     1a2:	80 91 9d 00 	lds	r24, 0x009D
     1a6:	90 91 9e 00 	lds	r25, 0x009E
     1aa:	41 97       	sbiw	r24, 0x11	; 17
     1ac:	d9 f0       	breq	.+54     	; 0x1e4 <sensorMapping+0xa0>
     1ae:	80 91 9d 00 	lds	r24, 0x009D
     1b2:	90 91 9e 00 	lds	r25, 0x009E
     1b6:	c1 97       	sbiw	r24, 0x31	; 49
     1b8:	a9 f0       	breq	.+42     	; 0x1e4 <sensorMapping+0xa0>
     1ba:	80 91 9d 00 	lds	r24, 0x009D
     1be:	90 91 9e 00 	lds	r25, 0x009E
     1c2:	81 37       	cpi	r24, 0x71	; 113
     1c4:	91 05       	cpc	r25, r1
     1c6:	71 f0       	breq	.+28     	; 0x1e4 <sensorMapping+0xa0>
     1c8:	80 91 9d 00 	lds	r24, 0x009D
     1cc:	90 91 9e 00 	lds	r25, 0x009E
     1d0:	81 36       	cpi	r24, 0x61	; 97
     1d2:	91 05       	cpc	r25, r1
     1d4:	39 f0       	breq	.+14     	; 0x1e4 <sensorMapping+0xa0>
     1d6:	80 91 9d 00 	lds	r24, 0x009D
     1da:	90 91 9e 00 	lds	r25, 0x009E
     1de:	83 36       	cpi	r24, 0x63	; 99
     1e0:	91 05       	cpc	r25, r1
     1e2:	39 f4       	brne	.+14     	; 0x1f2 <sensorMapping+0xae>
     1e4:	88 e7       	ldi	r24, 0x78	; 120
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	90 93 9c 00 	sts	0x009C, r25
     1ec:	80 93 9b 00 	sts	0x009B, r24
     1f0:	08 95       	ret
	else if ((sensorValue == 0b00001011) || (sensorValue == 0b00010011) || (sensorValue == 0b00011011) || (sensorValue == 0b00001010) || (sensorValue == 0b00010010) || (sensorValue == 0b01110111) || (sensorValue == 0b01110011) || (sensorValue == 0b00110111) || (sensorValue == 0b00011101) || (sensorValue == 0b01100111) || (sensorValue == 0b00001101) || (sensorValue == 0b00111001) || (sensorValue == 0b00110011)) mappedValue = 120;
     1f2:	80 91 9d 00 	lds	r24, 0x009D
     1f6:	90 91 9e 00 	lds	r25, 0x009E
     1fa:	0b 97       	sbiw	r24, 0x0b	; 11
     1fc:	09 f4       	brne	.+2      	; 0x200 <sensorMapping+0xbc>
     1fe:	4d c0       	rjmp	.+154    	; 0x29a <sensorMapping+0x156>
     200:	80 91 9d 00 	lds	r24, 0x009D
     204:	90 91 9e 00 	lds	r25, 0x009E
     208:	43 97       	sbiw	r24, 0x13	; 19
     20a:	09 f4       	brne	.+2      	; 0x20e <sensorMapping+0xca>
     20c:	46 c0       	rjmp	.+140    	; 0x29a <sensorMapping+0x156>
     20e:	80 91 9d 00 	lds	r24, 0x009D
     212:	90 91 9e 00 	lds	r25, 0x009E
     216:	4b 97       	sbiw	r24, 0x1b	; 27
     218:	09 f4       	brne	.+2      	; 0x21c <sensorMapping+0xd8>
     21a:	3f c0       	rjmp	.+126    	; 0x29a <sensorMapping+0x156>
     21c:	80 91 9d 00 	lds	r24, 0x009D
     220:	90 91 9e 00 	lds	r25, 0x009E
     224:	0a 97       	sbiw	r24, 0x0a	; 10
     226:	c9 f1       	breq	.+114    	; 0x29a <sensorMapping+0x156>
     228:	80 91 9d 00 	lds	r24, 0x009D
     22c:	90 91 9e 00 	lds	r25, 0x009E
     230:	42 97       	sbiw	r24, 0x12	; 18
     232:	99 f1       	breq	.+102    	; 0x29a <sensorMapping+0x156>
     234:	80 91 9d 00 	lds	r24, 0x009D
     238:	90 91 9e 00 	lds	r25, 0x009E
     23c:	87 37       	cpi	r24, 0x77	; 119
     23e:	91 05       	cpc	r25, r1
     240:	61 f1       	breq	.+88     	; 0x29a <sensorMapping+0x156>
     242:	80 91 9d 00 	lds	r24, 0x009D
     246:	90 91 9e 00 	lds	r25, 0x009E
     24a:	83 37       	cpi	r24, 0x73	; 115
     24c:	91 05       	cpc	r25, r1
     24e:	29 f1       	breq	.+74     	; 0x29a <sensorMapping+0x156>
     250:	80 91 9d 00 	lds	r24, 0x009D
     254:	90 91 9e 00 	lds	r25, 0x009E
     258:	c7 97       	sbiw	r24, 0x37	; 55
     25a:	f9 f0       	breq	.+62     	; 0x29a <sensorMapping+0x156>
     25c:	80 91 9d 00 	lds	r24, 0x009D
     260:	90 91 9e 00 	lds	r25, 0x009E
     264:	4d 97       	sbiw	r24, 0x1d	; 29
     266:	c9 f0       	breq	.+50     	; 0x29a <sensorMapping+0x156>
     268:	80 91 9d 00 	lds	r24, 0x009D
     26c:	90 91 9e 00 	lds	r25, 0x009E
     270:	87 36       	cpi	r24, 0x67	; 103
     272:	91 05       	cpc	r25, r1
     274:	91 f0       	breq	.+36     	; 0x29a <sensorMapping+0x156>
     276:	80 91 9d 00 	lds	r24, 0x009D
     27a:	90 91 9e 00 	lds	r25, 0x009E
     27e:	0d 97       	sbiw	r24, 0x0d	; 13
     280:	61 f0       	breq	.+24     	; 0x29a <sensorMapping+0x156>
     282:	80 91 9d 00 	lds	r24, 0x009D
     286:	90 91 9e 00 	lds	r25, 0x009E
     28a:	c9 97       	sbiw	r24, 0x39	; 57
     28c:	31 f0       	breq	.+12     	; 0x29a <sensorMapping+0x156>
     28e:	80 91 9d 00 	lds	r24, 0x009D
     292:	90 91 9e 00 	lds	r25, 0x009E
     296:	c3 97       	sbiw	r24, 0x33	; 51
     298:	39 f4       	brne	.+14     	; 0x2a8 <sensorMapping+0x164>
     29a:	88 e7       	ldi	r24, 0x78	; 120
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	90 93 9c 00 	sts	0x009C, r25
     2a2:	80 93 9b 00 	sts	0x009B, r24
     2a6:	08 95       	ret
	else if ((sensorValue == 0b00000111) || (sensorValue == 0b00001111) || (sensorValue == 0b00011111 || sensorValue == 0b00111111 || sensorValue == 0b01111111)) mappedValue = 100;
     2a8:	80 91 9d 00 	lds	r24, 0x009D
     2ac:	90 91 9e 00 	lds	r25, 0x009E
     2b0:	07 97       	sbiw	r24, 0x07	; 7
     2b2:	c9 f0       	breq	.+50     	; 0x2e6 <sensorMapping+0x1a2>
     2b4:	80 91 9d 00 	lds	r24, 0x009D
     2b8:	90 91 9e 00 	lds	r25, 0x009E
     2bc:	0f 97       	sbiw	r24, 0x0f	; 15
     2be:	99 f0       	breq	.+38     	; 0x2e6 <sensorMapping+0x1a2>
     2c0:	80 91 9d 00 	lds	r24, 0x009D
     2c4:	90 91 9e 00 	lds	r25, 0x009E
     2c8:	4f 97       	sbiw	r24, 0x1f	; 31
     2ca:	69 f0       	breq	.+26     	; 0x2e6 <sensorMapping+0x1a2>
     2cc:	80 91 9d 00 	lds	r24, 0x009D
     2d0:	90 91 9e 00 	lds	r25, 0x009E
     2d4:	cf 97       	sbiw	r24, 0x3f	; 63
     2d6:	39 f0       	breq	.+14     	; 0x2e6 <sensorMapping+0x1a2>
     2d8:	80 91 9d 00 	lds	r24, 0x009D
     2dc:	90 91 9e 00 	lds	r25, 0x009E
     2e0:	8f 37       	cpi	r24, 0x7F	; 127
     2e2:	91 05       	cpc	r25, r1
     2e4:	39 f4       	brne	.+14     	; 0x2f4 <sensorMapping+0x1b0>
     2e6:	84 e6       	ldi	r24, 0x64	; 100
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	90 93 9c 00 	sts	0x009C, r25
     2ee:	80 93 9b 00 	sts	0x009B, r24
     2f2:	08 95       	ret
	else if (sensorValue == 0b00000001) mappedValue = 70;
     2f4:	80 91 9d 00 	lds	r24, 0x009D
     2f8:	90 91 9e 00 	lds	r25, 0x009E
     2fc:	01 97       	sbiw	r24, 0x01	; 1
     2fe:	39 f4       	brne	.+14     	; 0x30e <sensorMapping+0x1ca>
     300:	86 e4       	ldi	r24, 0x46	; 70
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	90 93 9c 00 	sts	0x009C, r25
     308:	80 93 9b 00 	sts	0x009B, r24
     30c:	08 95       	ret
	else if (sensorValue == 0b00000011) mappedValue = 60;
     30e:	80 91 9d 00 	lds	r24, 0x009D
     312:	90 91 9e 00 	lds	r25, 0x009E
     316:	03 97       	sbiw	r24, 0x03	; 3
     318:	39 f4       	brne	.+14     	; 0x328 <sensorMapping+0x1e4>
     31a:	8c e3       	ldi	r24, 0x3C	; 60
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	90 93 9c 00 	sts	0x009C, r25
     322:	80 93 9b 00 	sts	0x009B, r24
     326:	08 95       	ret
	else if (sensorValue == 0b00000010 ||/* sensorValue == 0b00000111 ||*/ sensorValue == 0b11111101) mappedValue = 30;
     328:	80 91 9d 00 	lds	r24, 0x009D
     32c:	90 91 9e 00 	lds	r25, 0x009E
     330:	02 97       	sbiw	r24, 0x02	; 2
     332:	39 f0       	breq	.+14     	; 0x342 <sensorMapping+0x1fe>
     334:	80 91 9d 00 	lds	r24, 0x009D
     338:	90 91 9e 00 	lds	r25, 0x009E
     33c:	8d 3f       	cpi	r24, 0xFD	; 253
     33e:	91 05       	cpc	r25, r1
     340:	39 f4       	brne	.+14     	; 0x350 <sensorMapping+0x20c>
     342:	8e e1       	ldi	r24, 0x1E	; 30
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	90 93 9c 00 	sts	0x009C, r25
     34a:	80 93 9b 00 	sts	0x009B, r24
     34e:	08 95       	ret
	else if (sensorValue == 0b00000110 || sensorValue == 0b11111001) mappedValue = 20;
     350:	80 91 9d 00 	lds	r24, 0x009D
     354:	90 91 9e 00 	lds	r25, 0x009E
     358:	06 97       	sbiw	r24, 0x06	; 6
     35a:	39 f0       	breq	.+14     	; 0x36a <sensorMapping+0x226>
     35c:	80 91 9d 00 	lds	r24, 0x009D
     360:	90 91 9e 00 	lds	r25, 0x009E
     364:	89 3f       	cpi	r24, 0xF9	; 249
     366:	91 05       	cpc	r25, r1
     368:	39 f4       	brne	.+14     	; 0x378 <sensorMapping+0x234>
     36a:	84 e1       	ldi	r24, 0x14	; 20
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	90 93 9c 00 	sts	0x009C, r25
     372:	80 93 9b 00 	sts	0x009B, r24
     376:	08 95       	ret
	else if (sensorValue == 0b00000100 || sensorValue == 0b00001110) mappedValue = 15;
     378:	80 91 9d 00 	lds	r24, 0x009D
     37c:	90 91 9e 00 	lds	r25, 0x009E
     380:	04 97       	sbiw	r24, 0x04	; 4
     382:	31 f0       	breq	.+12     	; 0x390 <sensorMapping+0x24c>
     384:	80 91 9d 00 	lds	r24, 0x009D
     388:	90 91 9e 00 	lds	r25, 0x009E
     38c:	0e 97       	sbiw	r24, 0x0e	; 14
     38e:	39 f4       	brne	.+14     	; 0x39e <sensorMapping+0x25a>
     390:	8f e0       	ldi	r24, 0x0F	; 15
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	90 93 9c 00 	sts	0x009C, r25
     398:	80 93 9b 00 	sts	0x009B, r24
     39c:	08 95       	ret
	else if (sensorValue == 0b11111011)
     39e:	80 91 9d 00 	lds	r24, 0x009D
     3a2:	90 91 9e 00 	lds	r25, 0x009E
     3a6:	8b 3f       	cpi	r24, 0xFB	; 251
     3a8:	91 05       	cpc	r25, r1
     3aa:	39 f4       	brne	.+14     	; 0x3ba <sensorMapping+0x276>
	{
		mappedValue = 15;
     3ac:	8f e0       	ldi	r24, 0x0F	; 15
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	90 93 9c 00 	sts	0x009C, r25
     3b4:	80 93 9b 00 	sts	0x009B, r24
     3b8:	08 95       	ret
// 		inverseLevel++;
	}
	else if (sensorValue == 0b00001100) mappedValue = 10;
     3ba:	80 91 9d 00 	lds	r24, 0x009D
     3be:	90 91 9e 00 	lds	r25, 0x009E
     3c2:	0c 97       	sbiw	r24, 0x0c	; 12
     3c4:	39 f4       	brne	.+14     	; 0x3d4 <sensorMapping+0x290>
     3c6:	8a e0       	ldi	r24, 0x0A	; 10
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	90 93 9c 00 	sts	0x009C, r25
     3ce:	80 93 9b 00 	sts	0x009B, r24
     3d2:	08 95       	ret
	else if (sensorValue == 0b11110011)
     3d4:	80 91 9d 00 	lds	r24, 0x009D
     3d8:	90 91 9e 00 	lds	r25, 0x009E
     3dc:	83 3f       	cpi	r24, 0xF3	; 243
     3de:	91 05       	cpc	r25, r1
     3e0:	39 f4       	brne	.+14     	; 0x3f0 <sensorMapping+0x2ac>
	{
		mappedValue = 10;
     3e2:	8a e0       	ldi	r24, 0x0A	; 10
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	90 93 9c 00 	sts	0x009C, r25
     3ea:	80 93 9b 00 	sts	0x009B, r24
     3ee:	08 95       	ret
// 		inverseLevel++;
	}
	else if (sensorValue == 0b00001000 || sensorValue == 0b00011100) mappedValue = 5;
     3f0:	80 91 9d 00 	lds	r24, 0x009D
     3f4:	90 91 9e 00 	lds	r25, 0x009E
     3f8:	08 97       	sbiw	r24, 0x08	; 8
     3fa:	31 f0       	breq	.+12     	; 0x408 <sensorMapping+0x2c4>
     3fc:	80 91 9d 00 	lds	r24, 0x009D
     400:	90 91 9e 00 	lds	r25, 0x009E
     404:	4c 97       	sbiw	r24, 0x1c	; 28
     406:	39 f4       	brne	.+14     	; 0x416 <sensorMapping+0x2d2>
     408:	85 e0       	ldi	r24, 0x05	; 5
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	90 93 9c 00 	sts	0x009C, r25
     410:	80 93 9b 00 	sts	0x009B, r24
     414:	08 95       	ret
	else if (sensorValue == 0b11110111)
     416:	80 91 9d 00 	lds	r24, 0x009D
     41a:	90 91 9e 00 	lds	r25, 0x009E
     41e:	87 3f       	cpi	r24, 0xF7	; 247
     420:	91 05       	cpc	r25, r1
     422:	39 f4       	brne	.+14     	; 0x432 <sensorMapping+0x2ee>
	{
		mappedValue = 5;
     424:	85 e0       	ldi	r24, 0x05	; 5
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	90 93 9c 00 	sts	0x009C, r25
     42c:	80 93 9b 00 	sts	0x009B, r24
     430:	08 95       	ret
//		inverseLevel++;
	}
	else if (sensorValue == 0b00011000 /*|| sensorValue == 0b11101110 || sensorValue == 0b01110111 || sensorValue == 0b01100110 || sensorValue == 0b10011001 || sensorValue == 0b00110111 || sensorValue == 0b11101100*/) mappedValue = 0;
     432:	80 91 9d 00 	lds	r24, 0x009D
     436:	90 91 9e 00 	lds	r25, 0x009E
     43a:	48 97       	sbiw	r24, 0x18	; 24
     43c:	29 f4       	brne	.+10     	; 0x448 <sensorMapping+0x304>
     43e:	10 92 9c 00 	sts	0x009C, r1
     442:	10 92 9b 00 	sts	0x009B, r1
     446:	08 95       	ret
	else if (sensorValue == 0b11100111)
     448:	80 91 9d 00 	lds	r24, 0x009D
     44c:	90 91 9e 00 	lds	r25, 0x009E
     450:	87 3e       	cpi	r24, 0xE7	; 231
     452:	91 05       	cpc	r25, r1
     454:	29 f4       	brne	.+10     	; 0x460 <sensorMapping+0x31c>
	{
		mappedValue = 0;
     456:	10 92 9c 00 	sts	0x009C, r1
     45a:	10 92 9b 00 	sts	0x009B, r1
     45e:	08 95       	ret
//		inverseLevel++;
	}
	else if (sensorValue == 0b11101110 || sensorValue == 0b01110111 || sensorValue == 0b01100110 || sensorValue == 0b10011001 || sensorValue == 0b01111110 || sensorValue == 0b00111100 || sensorValue == 0b01111100 || sensorValue == 0b00111110 || sensorValue == 0b01110111 || sensorValue == 0b11101110)  mappedValue = .5;
     460:	80 91 9d 00 	lds	r24, 0x009D
     464:	90 91 9e 00 	lds	r25, 0x009E
     468:	8e 3e       	cpi	r24, 0xEE	; 238
     46a:	91 05       	cpc	r25, r1
     46c:	e9 f1       	breq	.+122    	; 0x4e8 <sensorMapping+0x3a4>
     46e:	80 91 9d 00 	lds	r24, 0x009D
     472:	90 91 9e 00 	lds	r25, 0x009E
     476:	87 37       	cpi	r24, 0x77	; 119
     478:	91 05       	cpc	r25, r1
     47a:	b1 f1       	breq	.+108    	; 0x4e8 <sensorMapping+0x3a4>
     47c:	80 91 9d 00 	lds	r24, 0x009D
     480:	90 91 9e 00 	lds	r25, 0x009E
     484:	86 36       	cpi	r24, 0x66	; 102
     486:	91 05       	cpc	r25, r1
     488:	79 f1       	breq	.+94     	; 0x4e8 <sensorMapping+0x3a4>
     48a:	80 91 9d 00 	lds	r24, 0x009D
     48e:	90 91 9e 00 	lds	r25, 0x009E
     492:	89 39       	cpi	r24, 0x99	; 153
     494:	91 05       	cpc	r25, r1
     496:	41 f1       	breq	.+80     	; 0x4e8 <sensorMapping+0x3a4>
     498:	80 91 9d 00 	lds	r24, 0x009D
     49c:	90 91 9e 00 	lds	r25, 0x009E
     4a0:	8e 37       	cpi	r24, 0x7E	; 126
     4a2:	91 05       	cpc	r25, r1
     4a4:	09 f1       	breq	.+66     	; 0x4e8 <sensorMapping+0x3a4>
     4a6:	80 91 9d 00 	lds	r24, 0x009D
     4aa:	90 91 9e 00 	lds	r25, 0x009E
     4ae:	cc 97       	sbiw	r24, 0x3c	; 60
     4b0:	d9 f0       	breq	.+54     	; 0x4e8 <sensorMapping+0x3a4>
     4b2:	80 91 9d 00 	lds	r24, 0x009D
     4b6:	90 91 9e 00 	lds	r25, 0x009E
     4ba:	8c 37       	cpi	r24, 0x7C	; 124
     4bc:	91 05       	cpc	r25, r1
     4be:	a1 f0       	breq	.+40     	; 0x4e8 <sensorMapping+0x3a4>
     4c0:	80 91 9d 00 	lds	r24, 0x009D
     4c4:	90 91 9e 00 	lds	r25, 0x009E
     4c8:	ce 97       	sbiw	r24, 0x3e	; 62
     4ca:	71 f0       	breq	.+28     	; 0x4e8 <sensorMapping+0x3a4>
     4cc:	80 91 9d 00 	lds	r24, 0x009D
     4d0:	90 91 9e 00 	lds	r25, 0x009E
     4d4:	87 37       	cpi	r24, 0x77	; 119
     4d6:	91 05       	cpc	r25, r1
     4d8:	39 f0       	breq	.+14     	; 0x4e8 <sensorMapping+0x3a4>
     4da:	80 91 9d 00 	lds	r24, 0x009D
     4de:	90 91 9e 00 	lds	r25, 0x009E
     4e2:	8e 3e       	cpi	r24, 0xEE	; 238
     4e4:	91 05       	cpc	r25, r1
     4e6:	29 f4       	brne	.+10     	; 0x4f2 <sensorMapping+0x3ae>
     4e8:	10 92 9c 00 	sts	0x009C, r1
     4ec:	10 92 9b 00 	sts	0x009B, r1
     4f0:	08 95       	ret
	else if (sensorValue == 0b00010000 || sensorValue == 0b00111000) mappedValue = -5;
     4f2:	80 91 9d 00 	lds	r24, 0x009D
     4f6:	90 91 9e 00 	lds	r25, 0x009E
     4fa:	40 97       	sbiw	r24, 0x10	; 16
     4fc:	31 f0       	breq	.+12     	; 0x50a <sensorMapping+0x3c6>
     4fe:	80 91 9d 00 	lds	r24, 0x009D
     502:	90 91 9e 00 	lds	r25, 0x009E
     506:	c8 97       	sbiw	r24, 0x38	; 56
     508:	39 f4       	brne	.+14     	; 0x518 <sensorMapping+0x3d4>
     50a:	8b ef       	ldi	r24, 0xFB	; 251
     50c:	9f ef       	ldi	r25, 0xFF	; 255
     50e:	90 93 9c 00 	sts	0x009C, r25
     512:	80 93 9b 00 	sts	0x009B, r24
     516:	08 95       	ret
	else if (sensorValue == 0b11101111)
     518:	80 91 9d 00 	lds	r24, 0x009D
     51c:	90 91 9e 00 	lds	r25, 0x009E
     520:	8f 3e       	cpi	r24, 0xEF	; 239
     522:	91 05       	cpc	r25, r1
     524:	39 f4       	brne	.+14     	; 0x534 <sensorMapping+0x3f0>
	{
		mappedValue = -5;
     526:	8b ef       	ldi	r24, 0xFB	; 251
     528:	9f ef       	ldi	r25, 0xFF	; 255
     52a:	90 93 9c 00 	sts	0x009C, r25
     52e:	80 93 9b 00 	sts	0x009B, r24
     532:	08 95       	ret
//		inverseLevel++;
	}
	else if (sensorValue == 0b00110000) mappedValue = -10;
     534:	80 91 9d 00 	lds	r24, 0x009D
     538:	90 91 9e 00 	lds	r25, 0x009E
     53c:	c0 97       	sbiw	r24, 0x30	; 48
     53e:	39 f4       	brne	.+14     	; 0x54e <sensorMapping+0x40a>
     540:	86 ef       	ldi	r24, 0xF6	; 246
     542:	9f ef       	ldi	r25, 0xFF	; 255
     544:	90 93 9c 00 	sts	0x009C, r25
     548:	80 93 9b 00 	sts	0x009B, r24
     54c:	08 95       	ret
	else if (sensorValue == 0b11001111)
     54e:	80 91 9d 00 	lds	r24, 0x009D
     552:	90 91 9e 00 	lds	r25, 0x009E
     556:	8f 3c       	cpi	r24, 0xCF	; 207
     558:	91 05       	cpc	r25, r1
     55a:	39 f4       	brne	.+14     	; 0x56a <sensorMapping+0x426>
	{
		mappedValue = -10;
     55c:	86 ef       	ldi	r24, 0xF6	; 246
     55e:	9f ef       	ldi	r25, 0xFF	; 255
     560:	90 93 9c 00 	sts	0x009C, r25
     564:	80 93 9b 00 	sts	0x009B, r24
     568:	08 95       	ret
//		inverseLevel++;
	}
	else if (sensorValue == 0b00100000 || sensorValue == 0b01110000) mappedValue = -15;
     56a:	80 91 9d 00 	lds	r24, 0x009D
     56e:	90 91 9e 00 	lds	r25, 0x009E
     572:	80 97       	sbiw	r24, 0x20	; 32
     574:	39 f0       	breq	.+14     	; 0x584 <sensorMapping+0x440>
     576:	80 91 9d 00 	lds	r24, 0x009D
     57a:	90 91 9e 00 	lds	r25, 0x009E
     57e:	80 37       	cpi	r24, 0x70	; 112
     580:	91 05       	cpc	r25, r1
     582:	39 f4       	brne	.+14     	; 0x592 <sensorMapping+0x44e>
     584:	81 ef       	ldi	r24, 0xF1	; 241
     586:	9f ef       	ldi	r25, 0xFF	; 255
     588:	90 93 9c 00 	sts	0x009C, r25
     58c:	80 93 9b 00 	sts	0x009B, r24
     590:	08 95       	ret
	else if (sensorValue == 0b11011111)
     592:	80 91 9d 00 	lds	r24, 0x009D
     596:	90 91 9e 00 	lds	r25, 0x009E
     59a:	8f 3d       	cpi	r24, 0xDF	; 223
     59c:	91 05       	cpc	r25, r1
     59e:	39 f4       	brne	.+14     	; 0x5ae <sensorMapping+0x46a>
	{
		mappedValue = -15;
     5a0:	81 ef       	ldi	r24, 0xF1	; 241
     5a2:	9f ef       	ldi	r25, 0xFF	; 255
     5a4:	90 93 9c 00 	sts	0x009C, r25
     5a8:	80 93 9b 00 	sts	0x009B, r24
     5ac:	08 95       	ret
//		inverseLevel++;
	}
	else if (sensorValue == 0b01100000 || sensorValue == 0b10011111) mappedValue = -20;
     5ae:	80 91 9d 00 	lds	r24, 0x009D
     5b2:	90 91 9e 00 	lds	r25, 0x009E
     5b6:	80 36       	cpi	r24, 0x60	; 96
     5b8:	91 05       	cpc	r25, r1
     5ba:	39 f0       	breq	.+14     	; 0x5ca <sensorMapping+0x486>
     5bc:	80 91 9d 00 	lds	r24, 0x009D
     5c0:	90 91 9e 00 	lds	r25, 0x009E
     5c4:	8f 39       	cpi	r24, 0x9F	; 159
     5c6:	91 05       	cpc	r25, r1
     5c8:	39 f4       	brne	.+14     	; 0x5d8 <sensorMapping+0x494>
     5ca:	8c ee       	ldi	r24, 0xEC	; 236
     5cc:	9f ef       	ldi	r25, 0xFF	; 255
     5ce:	90 93 9c 00 	sts	0x009C, r25
     5d2:	80 93 9b 00 	sts	0x009B, r24
     5d6:	08 95       	ret
	else if (sensorValue == 0b01000000 || /*sensorValue == 0b11100000 ||*/ sensorValue == 0b10111111) mappedValue = -30;
     5d8:	80 91 9d 00 	lds	r24, 0x009D
     5dc:	90 91 9e 00 	lds	r25, 0x009E
     5e0:	80 34       	cpi	r24, 0x40	; 64
     5e2:	91 05       	cpc	r25, r1
     5e4:	39 f0       	breq	.+14     	; 0x5f4 <sensorMapping+0x4b0>
     5e6:	80 91 9d 00 	lds	r24, 0x009D
     5ea:	90 91 9e 00 	lds	r25, 0x009E
     5ee:	8f 3b       	cpi	r24, 0xBF	; 191
     5f0:	91 05       	cpc	r25, r1
     5f2:	39 f4       	brne	.+14     	; 0x602 <sensorMapping+0x4be>
     5f4:	82 ee       	ldi	r24, 0xE2	; 226
     5f6:	9f ef       	ldi	r25, 0xFF	; 255
     5f8:	90 93 9c 00 	sts	0x009C, r25
     5fc:	80 93 9b 00 	sts	0x009B, r24
     600:	08 95       	ret
	else if (sensorValue == 0b11000000) mappedValue = -60;
     602:	80 91 9d 00 	lds	r24, 0x009D
     606:	90 91 9e 00 	lds	r25, 0x009E
     60a:	80 3c       	cpi	r24, 0xC0	; 192
     60c:	91 05       	cpc	r25, r1
     60e:	39 f4       	brne	.+14     	; 0x61e <sensorMapping+0x4da>
     610:	84 ec       	ldi	r24, 0xC4	; 196
     612:	9f ef       	ldi	r25, 0xFF	; 255
     614:	90 93 9c 00 	sts	0x009C, r25
     618:	80 93 9b 00 	sts	0x009B, r24
     61c:	08 95       	ret
	else if (sensorValue == 0b10000000) mappedValue = -70;
     61e:	80 91 9d 00 	lds	r24, 0x009D
     622:	90 91 9e 00 	lds	r25, 0x009E
     626:	80 38       	cpi	r24, 0x80	; 128
     628:	91 05       	cpc	r25, r1
     62a:	39 f4       	brne	.+14     	; 0x63a <sensorMapping+0x4f6>
     62c:	8a eb       	ldi	r24, 0xBA	; 186
     62e:	9f ef       	ldi	r25, 0xFF	; 255
     630:	90 93 9c 00 	sts	0x009C, r25
     634:	80 93 9b 00 	sts	0x009B, r24
     638:	08 95       	ret
	else if ((sensorValue == 0b11100000) || (sensorValue == 0b11110000) || (sensorValue == 0b11111000 || sensorValue == 0b11111100 || sensorValue == 0b11111110)) mappedValue = -100;
     63a:	80 91 9d 00 	lds	r24, 0x009D
     63e:	90 91 9e 00 	lds	r25, 0x009E
     642:	80 3e       	cpi	r24, 0xE0	; 224
     644:	91 05       	cpc	r25, r1
     646:	e1 f0       	breq	.+56     	; 0x680 <sensorMapping+0x53c>
     648:	80 91 9d 00 	lds	r24, 0x009D
     64c:	90 91 9e 00 	lds	r25, 0x009E
     650:	80 3f       	cpi	r24, 0xF0	; 240
     652:	91 05       	cpc	r25, r1
     654:	a9 f0       	breq	.+42     	; 0x680 <sensorMapping+0x53c>
     656:	80 91 9d 00 	lds	r24, 0x009D
     65a:	90 91 9e 00 	lds	r25, 0x009E
     65e:	88 3f       	cpi	r24, 0xF8	; 248
     660:	91 05       	cpc	r25, r1
     662:	71 f0       	breq	.+28     	; 0x680 <sensorMapping+0x53c>
     664:	80 91 9d 00 	lds	r24, 0x009D
     668:	90 91 9e 00 	lds	r25, 0x009E
     66c:	8c 3f       	cpi	r24, 0xFC	; 252
     66e:	91 05       	cpc	r25, r1
     670:	39 f0       	breq	.+14     	; 0x680 <sensorMapping+0x53c>
     672:	80 91 9d 00 	lds	r24, 0x009D
     676:	90 91 9e 00 	lds	r25, 0x009E
     67a:	8e 3f       	cpi	r24, 0xFE	; 254
     67c:	91 05       	cpc	r25, r1
     67e:	39 f4       	brne	.+14     	; 0x68e <sensorMapping+0x54a>
     680:	8c e9       	ldi	r24, 0x9C	; 156
     682:	9f ef       	ldi	r25, 0xFF	; 255
     684:	90 93 9c 00 	sts	0x009C, r25
     688:	80 93 9b 00 	sts	0x009B, r24
     68c:	08 95       	ret
	else if ((sensorValue == 0b11011000) || (sensorValue == 0b11010000) || (sensorValue == 0b11001000) || (sensorValue == 0b01010000) || (sensorValue == 0b01001000) || (sensorValue == 0b11101110) || (sensorValue == 0b11001110) || (sensorValue == 0b11101100) || (sensorValue == 0b10111000) || (sensorValue == 0b11100110) || (sensorValue == 0b10110000) || (sensorValue == 0b10011100) || (sensorValue == 0b11001100)) mappedValue = -120;
     68e:	80 91 9d 00 	lds	r24, 0x009D
     692:	90 91 9e 00 	lds	r25, 0x009E
     696:	88 3d       	cpi	r24, 0xD8	; 216
     698:	91 05       	cpc	r25, r1
     69a:	09 f4       	brne	.+2      	; 0x69e <sensorMapping+0x55a>
     69c:	57 c0       	rjmp	.+174    	; 0x74c <sensorMapping+0x608>
     69e:	80 91 9d 00 	lds	r24, 0x009D
     6a2:	90 91 9e 00 	lds	r25, 0x009E
     6a6:	80 3d       	cpi	r24, 0xD0	; 208
     6a8:	91 05       	cpc	r25, r1
     6aa:	09 f4       	brne	.+2      	; 0x6ae <sensorMapping+0x56a>
     6ac:	4f c0       	rjmp	.+158    	; 0x74c <sensorMapping+0x608>
     6ae:	80 91 9d 00 	lds	r24, 0x009D
     6b2:	90 91 9e 00 	lds	r25, 0x009E
     6b6:	88 3c       	cpi	r24, 0xC8	; 200
     6b8:	91 05       	cpc	r25, r1
     6ba:	09 f4       	brne	.+2      	; 0x6be <sensorMapping+0x57a>
     6bc:	47 c0       	rjmp	.+142    	; 0x74c <sensorMapping+0x608>
     6be:	80 91 9d 00 	lds	r24, 0x009D
     6c2:	90 91 9e 00 	lds	r25, 0x009E
     6c6:	80 35       	cpi	r24, 0x50	; 80
     6c8:	91 05       	cpc	r25, r1
     6ca:	09 f4       	brne	.+2      	; 0x6ce <sensorMapping+0x58a>
     6cc:	3f c0       	rjmp	.+126    	; 0x74c <sensorMapping+0x608>
     6ce:	80 91 9d 00 	lds	r24, 0x009D
     6d2:	90 91 9e 00 	lds	r25, 0x009E
     6d6:	88 34       	cpi	r24, 0x48	; 72
     6d8:	91 05       	cpc	r25, r1
     6da:	c1 f1       	breq	.+112    	; 0x74c <sensorMapping+0x608>
     6dc:	80 91 9d 00 	lds	r24, 0x009D
     6e0:	90 91 9e 00 	lds	r25, 0x009E
     6e4:	8e 3e       	cpi	r24, 0xEE	; 238
     6e6:	91 05       	cpc	r25, r1
     6e8:	89 f1       	breq	.+98     	; 0x74c <sensorMapping+0x608>
     6ea:	80 91 9d 00 	lds	r24, 0x009D
     6ee:	90 91 9e 00 	lds	r25, 0x009E
     6f2:	8e 3c       	cpi	r24, 0xCE	; 206
     6f4:	91 05       	cpc	r25, r1
     6f6:	51 f1       	breq	.+84     	; 0x74c <sensorMapping+0x608>
     6f8:	80 91 9d 00 	lds	r24, 0x009D
     6fc:	90 91 9e 00 	lds	r25, 0x009E
     700:	8c 3e       	cpi	r24, 0xEC	; 236
     702:	91 05       	cpc	r25, r1
     704:	19 f1       	breq	.+70     	; 0x74c <sensorMapping+0x608>
     706:	80 91 9d 00 	lds	r24, 0x009D
     70a:	90 91 9e 00 	lds	r25, 0x009E
     70e:	88 3b       	cpi	r24, 0xB8	; 184
     710:	91 05       	cpc	r25, r1
     712:	e1 f0       	breq	.+56     	; 0x74c <sensorMapping+0x608>
     714:	80 91 9d 00 	lds	r24, 0x009D
     718:	90 91 9e 00 	lds	r25, 0x009E
     71c:	86 3e       	cpi	r24, 0xE6	; 230
     71e:	91 05       	cpc	r25, r1
     720:	a9 f0       	breq	.+42     	; 0x74c <sensorMapping+0x608>
     722:	80 91 9d 00 	lds	r24, 0x009D
     726:	90 91 9e 00 	lds	r25, 0x009E
     72a:	80 3b       	cpi	r24, 0xB0	; 176
     72c:	91 05       	cpc	r25, r1
     72e:	71 f0       	breq	.+28     	; 0x74c <sensorMapping+0x608>
     730:	80 91 9d 00 	lds	r24, 0x009D
     734:	90 91 9e 00 	lds	r25, 0x009E
     738:	8c 39       	cpi	r24, 0x9C	; 156
     73a:	91 05       	cpc	r25, r1
     73c:	39 f0       	breq	.+14     	; 0x74c <sensorMapping+0x608>
     73e:	80 91 9d 00 	lds	r24, 0x009D
     742:	90 91 9e 00 	lds	r25, 0x009E
     746:	8c 3c       	cpi	r24, 0xCC	; 204
     748:	91 05       	cpc	r25, r1
     74a:	39 f4       	brne	.+14     	; 0x75a <sensorMapping+0x616>
     74c:	88 e8       	ldi	r24, 0x88	; 136
     74e:	9f ef       	ldi	r25, 0xFF	; 255
     750:	90 93 9c 00 	sts	0x009C, r25
     754:	80 93 9b 00 	sts	0x009B, r24
     758:	08 95       	ret
	else if ((sensorValue == 0b10011000) || (sensorValue == 0b10010000) || (sensorValue == 0b10001000) || (sensorValue == 0b10001100) || (sensorValue == 0b10001110) || (sensorValue == 0b10000110) || (sensorValue == 0b11000110)) mappedValue = -120;
     75a:	80 91 9d 00 	lds	r24, 0x009D
     75e:	90 91 9e 00 	lds	r25, 0x009E
     762:	88 39       	cpi	r24, 0x98	; 152
     764:	91 05       	cpc	r25, r1
     766:	51 f1       	breq	.+84     	; 0x7bc <sensorMapping+0x678>
     768:	80 91 9d 00 	lds	r24, 0x009D
     76c:	90 91 9e 00 	lds	r25, 0x009E
     770:	80 39       	cpi	r24, 0x90	; 144
     772:	91 05       	cpc	r25, r1
     774:	19 f1       	breq	.+70     	; 0x7bc <sensorMapping+0x678>
     776:	80 91 9d 00 	lds	r24, 0x009D
     77a:	90 91 9e 00 	lds	r25, 0x009E
     77e:	88 38       	cpi	r24, 0x88	; 136
     780:	91 05       	cpc	r25, r1
     782:	e1 f0       	breq	.+56     	; 0x7bc <sensorMapping+0x678>
     784:	80 91 9d 00 	lds	r24, 0x009D
     788:	90 91 9e 00 	lds	r25, 0x009E
     78c:	8c 38       	cpi	r24, 0x8C	; 140
     78e:	91 05       	cpc	r25, r1
     790:	a9 f0       	breq	.+42     	; 0x7bc <sensorMapping+0x678>
     792:	80 91 9d 00 	lds	r24, 0x009D
     796:	90 91 9e 00 	lds	r25, 0x009E
     79a:	8e 38       	cpi	r24, 0x8E	; 142
     79c:	91 05       	cpc	r25, r1
     79e:	71 f0       	breq	.+28     	; 0x7bc <sensorMapping+0x678>
     7a0:	80 91 9d 00 	lds	r24, 0x009D
     7a4:	90 91 9e 00 	lds	r25, 0x009E
     7a8:	86 38       	cpi	r24, 0x86	; 134
     7aa:	91 05       	cpc	r25, r1
     7ac:	39 f0       	breq	.+14     	; 0x7bc <sensorMapping+0x678>
     7ae:	80 91 9d 00 	lds	r24, 0x009D
     7b2:	90 91 9e 00 	lds	r25, 0x009E
     7b6:	86 3c       	cpi	r24, 0xC6	; 198
     7b8:	91 05       	cpc	r25, r1
     7ba:	31 f4       	brne	.+12     	; 0x7c8 <sensorMapping+0x684>
     7bc:	88 e8       	ldi	r24, 0x88	; 136
     7be:	9f ef       	ldi	r25, 0xFF	; 255
     7c0:	90 93 9c 00 	sts	0x009C, r25
     7c4:	80 93 9b 00 	sts	0x009B, r24
     7c8:	08 95       	ret

000007ca <setRotationForward>:
	motor2b_PORT &= ~(1 << motor2b_PIN);
}

void setRotationForward(void)
{
	enable1(0);
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	0e 94 a1 07 	call	0xf42	; 0xf42 <PWM0>
	enable2(0);
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0e 94 a3 07 	call	0xf46	; 0xf46 <PWM2>
	
	motor1a_PORT |= (1 << motor1a_PIN);
     7da:	af 9a       	sbi	0x15, 7	; 21
	motor1b_PORT &= ~(1 << motor1b_PIN);
     7dc:	ae 98       	cbi	0x15, 6	; 21
	motor2a_PORT |= (1 << motor2a_PIN);
     7de:	ad 9a       	sbi	0x15, 5	; 21
	motor2b_PORT &= ~(1 << motor2b_PIN);
     7e0:	ac 98       	cbi	0x15, 4	; 21
     7e2:	08 95       	ret

000007e4 <setRotationLeftSharp>:
}

void setRotationLeftSharp(void)
{
	enable1(0);
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	0e 94 a1 07 	call	0xf42	; 0xf42 <PWM0>
	enable2(0);
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	0e 94 a3 07 	call	0xf46	; 0xf46 <PWM2>
	
	motor1a_PORT &= ~(1 << motor1a_PIN);
     7f4:	af 98       	cbi	0x15, 7	; 21
	motor1b_PORT |= (1 << motor1b_PIN);
     7f6:	ae 9a       	sbi	0x15, 6	; 21
	motor2a_PORT |= (1 << motor2a_PIN);
     7f8:	ad 9a       	sbi	0x15, 5	; 21
	motor2b_PORT &= ~(1 << motor2b_PIN);
     7fa:	ac 98       	cbi	0x15, 4	; 21
     7fc:	08 95       	ret

000007fe <setRotationRightSharp>:
}

void setRotationRightSharp(void)
{
	enable1(0);
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 a1 07 	call	0xf42	; 0xf42 <PWM0>
	enable2(0);
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	0e 94 a3 07 	call	0xf46	; 0xf46 <PWM2>
	
	motor1a_PORT |= (1 << motor1a_PIN);
     80e:	af 9a       	sbi	0x15, 7	; 21
	motor1b_PORT &= ~(1 << motor1b_PIN);
     810:	ae 98       	cbi	0x15, 6	; 21
	motor2a_PORT &= ~(1 << motor2a_PIN);
     812:	ad 98       	cbi	0x15, 5	; 21
	motor2b_PORT |= (1 << motor2b_PIN);
     814:	ac 9a       	sbi	0x15, 4	; 21
     816:	08 95       	ret

00000818 <PID_Correction>:
// 	Serial_sendString("\n");
}


void PID_Correction(void) //my algo
{
     818:	8f 92       	push	r8
     81a:	9f 92       	push	r9
     81c:	af 92       	push	r10
     81e:	bf 92       	push	r11
     820:	cf 92       	push	r12
     822:	df 92       	push	r13
     824:	ef 92       	push	r14
     826:	ff 92       	push	r15
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
	error = targetValue - mappedValue;
     830:	c0 91 9b 00 	lds	r28, 0x009B
     834:	d0 91 9c 00 	lds	r29, 0x009C
     838:	c1 95       	neg	r28
     83a:	c0 93 88 00 	sts	0x0088, r28
	sum_error = (sum_error + error) / 2;
     83e:	0c 2f       	mov	r16, r28
     840:	0c 2e       	mov	r0, r28
     842:	00 0c       	add	r0, r0
     844:	11 0b       	sbc	r17, r17
     846:	60 91 85 00 	lds	r22, 0x0085
     84a:	70 91 86 00 	lds	r23, 0x0086
     84e:	60 0f       	add	r22, r16
     850:	71 1f       	adc	r23, r17
     852:	77 23       	and	r23, r23
     854:	14 f4       	brge	.+4      	; 0x85a <PID_Correction+0x42>
     856:	6f 5f       	subi	r22, 0xFF	; 255
     858:	7f 4f       	sbci	r23, 0xFF	; 255
     85a:	7b 01       	movw	r14, r22
     85c:	f5 94       	asr	r15
     85e:	e7 94       	ror	r14
     860:	f0 92 86 00 	sts	0x0086, r15
     864:	e0 92 85 00 	sts	0x0085, r14
	
	correction = ((Kp * error) + (Ki * sum_error) + (Kd * (error - prev_error)));
     868:	6c 2f       	mov	r22, r28
     86a:	0c 2e       	mov	r0, r28
     86c:	00 0c       	add	r0, r0
     86e:	77 0b       	sbc	r23, r23
     870:	88 0b       	sbc	r24, r24
     872:	99 0b       	sbc	r25, r25
     874:	0e 94 58 08 	call	0x10b0	; 0x10b0 <__floatsisf>
     878:	20 91 64 00 	lds	r18, 0x0064
     87c:	30 91 65 00 	lds	r19, 0x0065
     880:	40 91 66 00 	lds	r20, 0x0066
     884:	50 91 67 00 	lds	r21, 0x0067
     888:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__mulsf3>
     88c:	4b 01       	movw	r8, r22
     88e:	5c 01       	movw	r10, r24
     890:	b7 01       	movw	r22, r14
     892:	ff 0c       	add	r15, r15
     894:	88 0b       	sbc	r24, r24
     896:	99 0b       	sbc	r25, r25
     898:	0e 94 58 08 	call	0x10b0	; 0x10b0 <__floatsisf>
     89c:	20 91 78 00 	lds	r18, 0x0078
     8a0:	30 91 79 00 	lds	r19, 0x0079
     8a4:	40 91 7a 00 	lds	r20, 0x007A
     8a8:	50 91 7b 00 	lds	r21, 0x007B
     8ac:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__mulsf3>
     8b0:	9b 01       	movw	r18, r22
     8b2:	ac 01       	movw	r20, r24
     8b4:	c5 01       	movw	r24, r10
     8b6:	b4 01       	movw	r22, r8
     8b8:	0e 94 b4 07 	call	0xf68	; 0xf68 <__addsf3>
     8bc:	6b 01       	movw	r12, r22
     8be:	7c 01       	movw	r14, r24
     8c0:	80 91 87 00 	lds	r24, 0x0087
     8c4:	98 01       	movw	r18, r16
     8c6:	28 1b       	sub	r18, r24
     8c8:	31 09       	sbc	r19, r1
     8ca:	87 fd       	sbrc	r24, 7
     8cc:	33 95       	inc	r19
     8ce:	b9 01       	movw	r22, r18
     8d0:	33 0f       	add	r19, r19
     8d2:	88 0b       	sbc	r24, r24
     8d4:	99 0b       	sbc	r25, r25
     8d6:	0e 94 58 08 	call	0x10b0	; 0x10b0 <__floatsisf>
     8da:	20 91 60 00 	lds	r18, 0x0060
     8de:	30 91 61 00 	lds	r19, 0x0061
     8e2:	40 91 62 00 	lds	r20, 0x0062
     8e6:	50 91 63 00 	lds	r21, 0x0063
     8ea:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__mulsf3>
     8ee:	9b 01       	movw	r18, r22
     8f0:	ac 01       	movw	r20, r24
     8f2:	c7 01       	movw	r24, r14
     8f4:	b6 01       	movw	r22, r12
     8f6:	0e 94 b4 07 	call	0xf68	; 0xf68 <__addsf3>
     8fa:	60 93 81 00 	sts	0x0081, r22
     8fe:	70 93 82 00 	sts	0x0082, r23
     902:	80 93 83 00 	sts	0x0083, r24
     906:	90 93 84 00 	sts	0x0084, r25

	prev_error = error;
     90a:	c0 93 87 00 	sts	0x0087, r28
	motorResponse = (int)correction;
     90e:	0e 94 20 08 	call	0x1040	; 0x1040 <__fixsfsi>
     912:	70 93 80 00 	sts	0x0080, r23
     916:	60 93 7f 00 	sts	0x007F, r22
	
	if(motorResponse > maxSpeed)
     91a:	6f 3f       	cpi	r22, 0xFF	; 255
     91c:	71 05       	cpc	r23, r1
     91e:	a1 f0       	breq	.+40     	; 0x948 <__stack+0xe9>
     920:	9c f0       	brlt	.+38     	; 0x948 <__stack+0xe9>
	{
		reverseSpeed = motorResponse - maxSpeed;
     922:	6f 5f       	subi	r22, 0xFF	; 255
     924:	60 93 7c 00 	sts	0x007C, r22
		if (reverseSpeed > maxSpeed) reverseSpeed = maxSpeed;
		motorResponse = maxSpeed;
     928:	8f ef       	ldi	r24, 0xFF	; 255
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	90 93 80 00 	sts	0x0080, r25
     930:	80 93 7f 00 	sts	0x007F, r24
		
		setRotationLeftSharp();
     934:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <setRotationLeftSharp>
		
		LMspeed = reverseSpeed;
     938:	80 91 7c 00 	lds	r24, 0x007C
     93c:	80 93 7e 00 	sts	0x007E, r24
		RMspeed = maxSpeed;
     940:	8f ef       	ldi	r24, 0xFF	; 255
     942:	80 93 7d 00 	sts	0x007D, r24
     946:	39 c0       	rjmp	.+114    	; 0x9ba <__stack+0x15b>
	}
	
	else if(motorResponse < -maxSpeed)
     948:	61 30       	cpi	r22, 0x01	; 1
     94a:	4f ef       	ldi	r20, 0xFF	; 255
     94c:	74 07       	cpc	r23, r20
     94e:	ac f4       	brge	.+42     	; 0x97a <__stack+0x11b>
	{
		reverseSpeed = -motorResponse - maxSpeed;
     950:	21 e0       	ldi	r18, 0x01	; 1
     952:	82 2f       	mov	r24, r18
     954:	86 1b       	sub	r24, r22
     956:	80 93 7c 00 	sts	0x007C, r24
		if (reverseSpeed > maxSpeed) reverseSpeed = maxSpeed;
		motorResponse = -maxSpeed;
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	9f ef       	ldi	r25, 0xFF	; 255
     95e:	90 93 80 00 	sts	0x0080, r25
     962:	80 93 7f 00 	sts	0x007F, r24
		
		setRotationRightSharp();
     966:	0e 94 ff 03 	call	0x7fe	; 0x7fe <setRotationRightSharp>
		
		LMspeed = maxSpeed;
     96a:	8f ef       	ldi	r24, 0xFF	; 255
     96c:	80 93 7e 00 	sts	0x007E, r24
		RMspeed = reverseSpeed;
     970:	80 91 7c 00 	lds	r24, 0x007C
     974:	80 93 7d 00 	sts	0x007D, r24
     978:	20 c0       	rjmp	.+64     	; 0x9ba <__stack+0x15b>
	}
	
	else if(motorResponse < 0 && motorResponse > -maxSpeed)
     97a:	9b 01       	movw	r18, r22
     97c:	22 50       	subi	r18, 0x02	; 2
     97e:	3f 4f       	sbci	r19, 0xFF	; 255
     980:	2e 3f       	cpi	r18, 0xFE	; 254
     982:	31 05       	cpc	r19, r1
     984:	58 f4       	brcc	.+22     	; 0x99c <__stack+0x13d>
	{
		setRotationForward();
     986:	0e 94 e5 03 	call	0x7ca	; 0x7ca <setRotationForward>
		
		LMspeed = maxSpeed;
     98a:	8f ef       	ldi	r24, 0xFF	; 255
     98c:	80 93 7e 00 	sts	0x007E, r24
		RMspeed = maxSpeed + motorResponse;
     990:	80 91 7f 00 	lds	r24, 0x007F
     994:	81 50       	subi	r24, 0x01	; 1
     996:	80 93 7d 00 	sts	0x007D, r24
     99a:	0f c0       	rjmp	.+30     	; 0x9ba <__stack+0x15b>
	}
	else if(motorResponse > 0 && motorResponse < maxSpeed)
     99c:	61 50       	subi	r22, 0x01	; 1
     99e:	71 09       	sbc	r23, r1
     9a0:	6e 3f       	cpi	r22, 0xFE	; 254
     9a2:	71 05       	cpc	r23, r1
     9a4:	50 f4       	brcc	.+20     	; 0x9ba <__stack+0x15b>
	{
		setRotationForward();
     9a6:	0e 94 e5 03 	call	0x7ca	; 0x7ca <setRotationForward>
		
		LMspeed = maxSpeed - motorResponse;
     9aa:	80 91 7f 00 	lds	r24, 0x007F
     9ae:	80 95       	com	r24
     9b0:	80 93 7e 00 	sts	0x007E, r24
		RMspeed = maxSpeed;
     9b4:	8f ef       	ldi	r24, 0xFF	; 255
     9b6:	80 93 7d 00 	sts	0x007D, r24
	}
}
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	1f 91       	pop	r17
     9c0:	0f 91       	pop	r16
     9c2:	ff 90       	pop	r15
     9c4:	ef 90       	pop	r14
     9c6:	df 90       	pop	r13
     9c8:	cf 90       	pop	r12
     9ca:	bf 90       	pop	r11
     9cc:	af 90       	pop	r10
     9ce:	9f 90       	pop	r9
     9d0:	8f 90       	pop	r8
     9d2:	08 95       	ret

000009d4 <Forward>:
	motor2b_PORT |= (1 << motor2b_PIN);
}

void Forward(void)
{
	enable1(0);
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	0e 94 a1 07 	call	0xf42	; 0xf42 <PWM0>
	enable2(0);
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	0e 94 a3 07 	call	0xf46	; 0xf46 <PWM2>
	
	motor1a_PORT |= (1 << motor1a_PIN);
     9e4:	af 9a       	sbi	0x15, 7	; 21
	motor1b_PORT &= ~(1 << motor1b_PIN);
     9e6:	ae 98       	cbi	0x15, 6	; 21
	motor2a_PORT |= (1 << motor2a_PIN);
     9e8:	ad 9a       	sbi	0x15, 5	; 21
	motor2b_PORT &= ~(1 << motor2b_PIN);
     9ea:	ac 98       	cbi	0x15, 4	; 21

	enable1(maxSpeed);
     9ec:	8f ef       	ldi	r24, 0xFF	; 255
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	0e 94 a1 07 	call	0xf42	; 0xf42 <PWM0>
	enable2(maxSpeed - 30);
     9f4:	81 ee       	ldi	r24, 0xE1	; 225
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 a3 07 	call	0xf46	; 0xf46 <PWM2>
     9fc:	08 95       	ret

000009fe <Backward>:
}

void Backward(void)
{
	enable1(0);
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	0e 94 a1 07 	call	0xf42	; 0xf42 <PWM0>
	enable2(0);
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	0e 94 a3 07 	call	0xf46	; 0xf46 <PWM2>
	
	motor1a_PORT &= ~(1 << motor1a_PIN);
     a0e:	af 98       	cbi	0x15, 7	; 21
	motor1b_PORT |= (1 << motor1b_PIN);
     a10:	ae 9a       	sbi	0x15, 6	; 21
	motor2a_PORT &= ~(1 << motor2a_PIN);
     a12:	ad 98       	cbi	0x15, 5	; 21
	motor2b_PORT |= (1 << motor2b_PIN);
     a14:	ac 9a       	sbi	0x15, 4	; 21

	enable1(maxSpeed);
     a16:	8f ef       	ldi	r24, 0xFF	; 255
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 a1 07 	call	0xf42	; 0xf42 <PWM0>
	enable2(maxSpeed);
     a1e:	8f ef       	ldi	r24, 0xFF	; 255
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	0e 94 a3 07 	call	0xf46	; 0xf46 <PWM2>
     a26:	08 95       	ret

00000a28 <RightSharp>:
}

void RightSharp(void)
{
	enable1(0);
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 a1 07 	call	0xf42	; 0xf42 <PWM0>
	enable2(0);
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	0e 94 a3 07 	call	0xf46	; 0xf46 <PWM2>
	
	motor1a_PORT |= (1 << motor1a_PIN);
     a38:	af 9a       	sbi	0x15, 7	; 21
	motor1b_PORT &= ~(1 << motor1b_PIN);
     a3a:	ae 98       	cbi	0x15, 6	; 21
	motor2a_PORT &= ~(1 << motor2a_PIN);
     a3c:	ad 98       	cbi	0x15, 5	; 21
	motor2b_PORT |= (1 << motor2b_PIN);
     a3e:	ac 9a       	sbi	0x15, 4	; 21

	enable1(maxSpeed - 20);
     a40:	8b ee       	ldi	r24, 0xEB	; 235
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 a1 07 	call	0xf42	; 0xf42 <PWM0>
	enable2(maxSpeed - 20);
     a48:	8b ee       	ldi	r24, 0xEB	; 235
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	0e 94 a3 07 	call	0xf46	; 0xf46 <PWM2>
     a50:	08 95       	ret

00000a52 <LeftSharp>:
}

void LeftSharp(void)
{
	enable1(0);
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 a1 07 	call	0xf42	; 0xf42 <PWM0>
	enable2(0);
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	0e 94 a3 07 	call	0xf46	; 0xf46 <PWM2>
	
	motor1a_PORT &= ~(1 << motor1a_PIN);
     a62:	af 98       	cbi	0x15, 7	; 21
	motor1b_PORT |= (1 << motor1b_PIN);
     a64:	ae 9a       	sbi	0x15, 6	; 21
	motor2a_PORT |= (1 << motor2a_PIN);
     a66:	ad 9a       	sbi	0x15, 5	; 21
	motor2b_PORT &= ~(1 << motor2b_PIN);
     a68:	ac 98       	cbi	0x15, 4	; 21

	enable1(maxSpeed - 20);
     a6a:	8b ee       	ldi	r24, 0xEB	; 235
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 a1 07 	call	0xf42	; 0xf42 <PWM0>
	enable2(maxSpeed - 20);
     a72:	8b ee       	ldi	r24, 0xEB	; 235
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	0e 94 a3 07 	call	0xf46	; 0xf46 <PWM2>
     a7a:	08 95       	ret

00000a7c <main>:

int main(void)
{
	// Input-Output settings
	
	trig1_DDR |= (1 << trig1_PIN);
     a7c:	8c 9a       	sbi	0x11, 4	; 17
	trig2_DDR |= (1 << trig2_PIN);
     a7e:	8d 9a       	sbi	0x11, 5	; 17
	trig3_DDR |= (1 << trig3_PIN);
     a80:	b9 9a       	sbi	0x17, 1	; 23
	echo1_DDR &= ~(1 << echo1_PIN);
     a82:	8b 98       	cbi	0x11, 3	; 17
	echo2_DDR &= ~(1 << echo2_PIN);
     a84:	8a 98       	cbi	0x11, 2	; 17
	echo3_DDR &= ~(1 << echo3_PIN);
     a86:	ba 98       	cbi	0x17, 2	; 23
	motor1a_DDR |= (1 << motor1a_PIN);
     a88:	a7 9a       	sbi	0x14, 7	; 20
	motor1b_DDR |= (1 << motor1b_PIN);
     a8a:	a6 9a       	sbi	0x14, 6	; 20
	motor2a_DDR |= (1 << motor2a_PIN);
     a8c:	a5 9a       	sbi	0x14, 5	; 20
	motor2b_DDR |= (1 << motor2b_PIN);
     a8e:	a4 9a       	sbi	0x14, 4	; 20
	enable1_DDR |= (1 << enable1_PIN);
     a90:	8f 9a       	sbi	0x11, 7	; 17
	enable2_DDR |= (1 << enable2_PIN);
     a92:	bb 9a       	sbi	0x17, 3	; 23
	
//	uint8_t finishLevelCount = 0;
	
	// Initializations	
	
	adc_init();
     a94:	0e 94 49 00 	call	0x92	; 0x92 <adc_init>
	UART_init();
     a98:	0e 94 a5 07 	call	0xf4a	; 0xf4a <UART_init>
	PWM0_init();
     a9c:	0e 94 8d 07 	call	0xf1a	; 0xf1a <PWM0_init>
	PWM2_init();
     aa0:	0e 94 97 07 	call	0xf2e	; 0xf2e <PWM2_init>
	setRotationForward();	
     aa4:	0e 94 e5 03 	call	0x7ca	; 0x7ca <setRotationForward>
	Forward();
     aa8:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <Forward>
	enable1(maxSpeed);
     aac:	8f ef       	ldi	r24, 0xFF	; 255
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	0e 94 a1 07 	call	0xf42	; 0xf42 <PWM0>
	enable2(maxSpeed);
     ab4:	8f ef       	ldi	r24, 0xFF	; 255
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	0e 94 a3 07 	call	0xf46	; 0xf46 <PWM2>
	
// 	xINT_init();
// 	TIMER0_2_INT_init();
// 	sei();
	Forward();
     abc:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <Forward>
     ac0:	04 e0       	ldi	r16, 0x04	; 4
     ac2:	10 e0       	ldi	r17, 0x00	; 0
// 		{
// 			Forward();
// 			_delay_ms(100);
// 		}
		
		if (mappedValue == 120/* || mappedValue == 110*/)
     ac4:	0f 2e       	mov	r0, r31
     ac6:	f7 e0       	ldi	r31, 0x07	; 7
     ac8:	ef 2e       	mov	r14, r31
     aca:	f0 2d       	mov	r31, r0
     acc:	f1 2c       	mov	r15, r1
// 	_delay_ms(5000);
// 	
    while (1) 
    {
		
			sensorValueConversion();
     ace:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
			sensorMapping();
     ad2:	0e 94 a2 00 	call	0x144	; 0x144 <sensorMapping>
		if (mappedValue == 100 || mappedValue == -100)
     ad6:	80 91 9b 00 	lds	r24, 0x009B
     ada:	90 91 9c 00 	lds	r25, 0x009C
     ade:	84 36       	cpi	r24, 0x64	; 100
     ae0:	91 05       	cpc	r25, r1
     ae2:	59 f0       	breq	.+22     	; 0xafa <main+0x7e>
     ae4:	80 91 9b 00 	lds	r24, 0x009B
     ae8:	90 91 9c 00 	lds	r25, 0x009C
     aec:	8c 39       	cpi	r24, 0x9C	; 156
     aee:	9f 4f       	sbci	r25, 0xFF	; 255
     af0:	09 f0       	breq	.+2      	; 0xaf4 <main+0x78>
     af2:	06 c1       	rjmp	.+524    	; 0xd00 <main+0x284>
     af4:	c0 2f       	mov	r28, r16
     af6:	d1 2f       	mov	r29, r17
     af8:	02 c0       	rjmp	.+4      	; 0xafe <main+0x82>
     afa:	c0 2f       	mov	r28, r16
     afc:	d1 2f       	mov	r29, r17
		{
			for (int temp_loop = 0; temp_loop < 4; temp_loop++)
			{
				sensorValueConversion();
     afe:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
				sensorMapping();
     b02:	0e 94 a2 00 	call	0x144	; 0x144 <sensorMapping>
				if (mappedValue != 100 && mappedValue != -100)
     b06:	80 91 9b 00 	lds	r24, 0x009B
     b0a:	90 91 9c 00 	lds	r25, 0x009C
     b0e:	84 36       	cpi	r24, 0x64	; 100
     b10:	91 05       	cpc	r25, r1
     b12:	41 f0       	breq	.+16     	; 0xb24 <main+0xa8>
     b14:	80 91 9b 00 	lds	r24, 0x009B
     b18:	90 91 9c 00 	lds	r25, 0x009C
     b1c:	8c 39       	cpi	r24, 0x9C	; 156
     b1e:	9f 4f       	sbci	r25, 0xFF	; 255
     b20:	09 f0       	breq	.+2      	; 0xb24 <main+0xa8>
     b22:	ee c0       	rjmp	.+476    	; 0xd00 <main+0x284>
     b24:	21 97       	sbiw	r28, 0x01	; 1
		
			sensorValueConversion();
			sensorMapping();
		if (mappedValue == 100 || mappedValue == -100)
		{
			for (int temp_loop = 0; temp_loop < 4; temp_loop++)
     b26:	59 f7       	brne	.-42     	; 0xafe <main+0x82>
     b28:	eb c0       	rjmp	.+470    	; 0xd00 <main+0x284>
// 		{
// 			Forward();
// 			_delay_ms(100);
// 		}
		
		if (mappedValue == 120/* || mappedValue == 110*/)
     b2a:	ce 2d       	mov	r28, r14
     b2c:	df 2d       	mov	r29, r15
		{
// 			Stop();
// 			_delay_ms(50);
			for (int temp = 0; temp < 7; temp++) //10
			{
				sensorValueConversion();
     b2e:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
				sensorMapping();
     b32:	0e 94 a2 00 	call	0x144	; 0x144 <sensorMapping>
     b36:	21 97       	sbiw	r28, 0x01	; 1
		
		if (mappedValue == 120/* || mappedValue == 110*/)
		{
// 			Stop();
// 			_delay_ms(50);
			for (int temp = 0; temp < 7; temp++) //10
     b38:	d1 f7       	brne	.-12     	; 0xb2e <main+0xb2>
     b3a:	26 c0       	rjmp	.+76     	; 0xb88 <main+0x10c>
				sensorValueConversion();
				sensorMapping();
			}
			while (mappedValue == 120)
			{
				Backward();
     b3c:	0e 94 ff 04 	call	0x9fe	; 0x9fe <Backward>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b40:	2f ef       	ldi	r18, 0xFF	; 255
     b42:	81 ee       	ldi	r24, 0xE1	; 225
     b44:	94 e0       	ldi	r25, 0x04	; 4
     b46:	21 50       	subi	r18, 0x01	; 1
     b48:	80 40       	sbci	r24, 0x00	; 0
     b4a:	90 40       	sbci	r25, 0x00	; 0
     b4c:	e1 f7       	brne	.-8      	; 0xb46 <main+0xca>
     b4e:	00 c0       	rjmp	.+0      	; 0xb50 <main+0xd4>
     b50:	00 00       	nop
				_delay_ms(100);
				RightSharp();
     b52:	0e 94 14 05 	call	0xa28	; 0xa28 <RightSharp>
     b56:	2f ef       	ldi	r18, 0xFF	; 255
     b58:	81 ee       	ldi	r24, 0xE1	; 225
     b5a:	94 e0       	ldi	r25, 0x04	; 4
     b5c:	21 50       	subi	r18, 0x01	; 1
     b5e:	80 40       	sbci	r24, 0x00	; 0
     b60:	90 40       	sbci	r25, 0x00	; 0
     b62:	e1 f7       	brne	.-8      	; 0xb5c <main+0xe0>
     b64:	00 c0       	rjmp	.+0      	; 0xb66 <main+0xea>
     b66:	00 00       	nop
				_delay_ms(100);
				while(mappedValue > 50) //15
     b68:	80 91 9b 00 	lds	r24, 0x009B
     b6c:	90 91 9c 00 	lds	r25, 0x009C
     b70:	c3 97       	sbiw	r24, 0x33	; 51
     b72:	54 f0       	brlt	.+20     	; 0xb88 <main+0x10c>
				{
					sensorValueConversion();
     b74:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
					sensorMapping();
     b78:	0e 94 a2 00 	call	0x144	; 0x144 <sensorMapping>
			{
				Backward();
				_delay_ms(100);
				RightSharp();
				_delay_ms(100);
				while(mappedValue > 50) //15
     b7c:	80 91 9b 00 	lds	r24, 0x009B
     b80:	90 91 9c 00 	lds	r25, 0x009C
     b84:	c3 97       	sbiw	r24, 0x33	; 51
     b86:	b4 f7       	brge	.-20     	; 0xb74 <main+0xf8>
			for (int temp = 0; temp < 7; temp++) //10
			{
				sensorValueConversion();
				sensorMapping();
			}
			while (mappedValue == 120)
     b88:	80 91 9b 00 	lds	r24, 0x009B
     b8c:	90 91 9c 00 	lds	r25, 0x009C
     b90:	88 37       	cpi	r24, 0x78	; 120
     b92:	91 05       	cpc	r25, r1
     b94:	99 f2       	breq	.-90     	; 0xb3c <main+0xc0>
     b96:	bd c0       	rjmp	.+378    	; 0xd12 <main+0x296>
					sensorMapping();
				}
			}
		}
		
		if (mappedValue == -120/* || mappedValue == -110*/)
     b98:	80 91 9b 00 	lds	r24, 0x009B
     b9c:	90 91 9c 00 	lds	r25, 0x009C
     ba0:	88 38       	cpi	r24, 0x88	; 136
     ba2:	9f 4f       	sbci	r25, 0xFF	; 255
     ba4:	a1 f5       	brne	.+104    	; 0xc0e <main+0x192>
		{
// 			Stop();
// 			_delay_ms(50);
			for (int temp = 0; temp < 1; temp++)
			{
				sensorValueConversion();
     ba6:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
				sensorMapping();
     baa:	0e 94 a2 00 	call	0x144	; 0x144 <sensorMapping>
     bae:	28 c0       	rjmp	.+80     	; 0xc00 <main+0x184>
			}
			while (mappedValue == -120)
			{	
				Backward();
     bb0:	0e 94 ff 04 	call	0x9fe	; 0x9fe <Backward>
     bb4:	8f ef       	ldi	r24, 0xFF	; 255
     bb6:	91 ee       	ldi	r25, 0xE1	; 225
     bb8:	24 e0       	ldi	r18, 0x04	; 4
     bba:	81 50       	subi	r24, 0x01	; 1
     bbc:	90 40       	sbci	r25, 0x00	; 0
     bbe:	20 40       	sbci	r18, 0x00	; 0
     bc0:	e1 f7       	brne	.-8      	; 0xbba <main+0x13e>
     bc2:	00 c0       	rjmp	.+0      	; 0xbc4 <main+0x148>
     bc4:	00 00       	nop
				_delay_ms(100);
				LeftSharp();
     bc6:	0e 94 29 05 	call	0xa52	; 0xa52 <LeftSharp>
     bca:	8f ef       	ldi	r24, 0xFF	; 255
     bcc:	91 ee       	ldi	r25, 0xE1	; 225
     bce:	24 e0       	ldi	r18, 0x04	; 4
     bd0:	81 50       	subi	r24, 0x01	; 1
     bd2:	90 40       	sbci	r25, 0x00	; 0
     bd4:	20 40       	sbci	r18, 0x00	; 0
     bd6:	e1 f7       	brne	.-8      	; 0xbd0 <main+0x154>
     bd8:	00 c0       	rjmp	.+0      	; 0xbda <main+0x15e>
     bda:	00 00       	nop
				_delay_ms(100);
				while(mappedValue < -50) //15
     bdc:	80 91 9b 00 	lds	r24, 0x009B
     be0:	90 91 9c 00 	lds	r25, 0x009C
     be4:	8e 3c       	cpi	r24, 0xCE	; 206
     be6:	9f 4f       	sbci	r25, 0xFF	; 255
     be8:	5c f4       	brge	.+22     	; 0xc00 <main+0x184>
				{
					sensorValueConversion();
     bea:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
					sensorMapping();
     bee:	0e 94 a2 00 	call	0x144	; 0x144 <sensorMapping>
			{	
				Backward();
				_delay_ms(100);
				LeftSharp();
				_delay_ms(100);
				while(mappedValue < -50) //15
     bf2:	80 91 9b 00 	lds	r24, 0x009B
     bf6:	90 91 9c 00 	lds	r25, 0x009C
     bfa:	8e 3c       	cpi	r24, 0xCE	; 206
     bfc:	9f 4f       	sbci	r25, 0xFF	; 255
     bfe:	ac f3       	brlt	.-22     	; 0xbea <main+0x16e>
			for (int temp = 0; temp < 1; temp++)
			{
				sensorValueConversion();
				sensorMapping();
			}
			while (mappedValue == -120)
     c00:	80 91 9b 00 	lds	r24, 0x009B
     c04:	90 91 9c 00 	lds	r25, 0x009C
     c08:	88 38       	cpi	r24, 0x88	; 136
     c0a:	9f 4f       	sbci	r25, 0xFF	; 255
     c0c:	89 f2       	breq	.-94     	; 0xbb0 <main+0x134>
					sensorMapping();
				}				
			}
		}
		
		if (mappedValue == 100/* || mappedValue == 110*/)
     c0e:	80 91 9b 00 	lds	r24, 0x009B
     c12:	90 91 9c 00 	lds	r25, 0x009C
     c16:	84 36       	cpi	r24, 0x64	; 100
     c18:	91 05       	cpc	r25, r1
     c1a:	71 f5       	brne	.+92     	; 0xc78 <main+0x1fc>
     c1c:	26 c0       	rjmp	.+76     	; 0xc6a <main+0x1ee>
// 				sensorValueConversion();
// 				sensorMapping();
// 			}
			while (mappedValue == 100)
			{
				Backward();
     c1e:	0e 94 ff 04 	call	0x9fe	; 0x9fe <Backward>
     c22:	8f ef       	ldi	r24, 0xFF	; 255
     c24:	90 e7       	ldi	r25, 0x70	; 112
     c26:	22 e0       	ldi	r18, 0x02	; 2
     c28:	81 50       	subi	r24, 0x01	; 1
     c2a:	90 40       	sbci	r25, 0x00	; 0
     c2c:	20 40       	sbci	r18, 0x00	; 0
     c2e:	e1 f7       	brne	.-8      	; 0xc28 <main+0x1ac>
     c30:	00 c0       	rjmp	.+0      	; 0xc32 <main+0x1b6>
     c32:	00 00       	nop
				_delay_ms(50);
				RightSharp();
     c34:	0e 94 14 05 	call	0xa28	; 0xa28 <RightSharp>
     c38:	8f ef       	ldi	r24, 0xFF	; 255
     c3a:	93 ec       	ldi	r25, 0xC3	; 195
     c3c:	29 e0       	ldi	r18, 0x09	; 9
     c3e:	81 50       	subi	r24, 0x01	; 1
     c40:	90 40       	sbci	r25, 0x00	; 0
     c42:	20 40       	sbci	r18, 0x00	; 0
     c44:	e1 f7       	brne	.-8      	; 0xc3e <main+0x1c2>
     c46:	00 c0       	rjmp	.+0      	; 0xc48 <main+0x1cc>
     c48:	00 00       	nop
				_delay_ms(200);
				while(mappedValue > 50) //15
     c4a:	80 91 9b 00 	lds	r24, 0x009B
     c4e:	90 91 9c 00 	lds	r25, 0x009C
     c52:	c3 97       	sbiw	r24, 0x33	; 51
     c54:	54 f0       	brlt	.+20     	; 0xc6a <main+0x1ee>
				{
					sensorValueConversion();
     c56:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
					sensorMapping();
     c5a:	0e 94 a2 00 	call	0x144	; 0x144 <sensorMapping>
			{
				Backward();
				_delay_ms(50);
				RightSharp();
				_delay_ms(200);
				while(mappedValue > 50) //15
     c5e:	80 91 9b 00 	lds	r24, 0x009B
     c62:	90 91 9c 00 	lds	r25, 0x009C
     c66:	c3 97       	sbiw	r24, 0x33	; 51
     c68:	b4 f7       	brge	.-20     	; 0xc56 <main+0x1da>
// 			for (int temp = 0; temp < 10; temp++)
// 			{
// 				sensorValueConversion();
// 				sensorMapping();
// 			}
			while (mappedValue == 100)
     c6a:	80 91 9b 00 	lds	r24, 0x009B
     c6e:	90 91 9c 00 	lds	r25, 0x009C
     c72:	84 36       	cpi	r24, 0x64	; 100
     c74:	91 05       	cpc	r25, r1
     c76:	99 f2       	breq	.-90     	; 0xc1e <main+0x1a2>
					sensorMapping();
				}
			}
		}
		
		if (mappedValue == -100/* || mappedValue == 110*/)
     c78:	80 91 9b 00 	lds	r24, 0x009B
     c7c:	90 91 9c 00 	lds	r25, 0x009C
     c80:	8c 39       	cpi	r24, 0x9C	; 156
     c82:	9f 4f       	sbci	r25, 0xFF	; 255
     c84:	81 f5       	brne	.+96     	; 0xce6 <main+0x26a>
     c86:	28 c0       	rjmp	.+80     	; 0xcd8 <main+0x25c>
// 				sensorValueConversion();
// 				sensorMapping();
// 			}
			while (mappedValue == -100)
			{
				Backward();
     c88:	0e 94 ff 04 	call	0x9fe	; 0x9fe <Backward>
     c8c:	8f ef       	ldi	r24, 0xFF	; 255
     c8e:	90 e7       	ldi	r25, 0x70	; 112
     c90:	22 e0       	ldi	r18, 0x02	; 2
     c92:	81 50       	subi	r24, 0x01	; 1
     c94:	90 40       	sbci	r25, 0x00	; 0
     c96:	20 40       	sbci	r18, 0x00	; 0
     c98:	e1 f7       	brne	.-8      	; 0xc92 <main+0x216>
     c9a:	00 c0       	rjmp	.+0      	; 0xc9c <main+0x220>
     c9c:	00 00       	nop
				_delay_ms(50);
				LeftSharp();
     c9e:	0e 94 29 05 	call	0xa52	; 0xa52 <LeftSharp>
     ca2:	8f ef       	ldi	r24, 0xFF	; 255
     ca4:	93 ec       	ldi	r25, 0xC3	; 195
     ca6:	29 e0       	ldi	r18, 0x09	; 9
     ca8:	81 50       	subi	r24, 0x01	; 1
     caa:	90 40       	sbci	r25, 0x00	; 0
     cac:	20 40       	sbci	r18, 0x00	; 0
     cae:	e1 f7       	brne	.-8      	; 0xca8 <main+0x22c>
     cb0:	00 c0       	rjmp	.+0      	; 0xcb2 <main+0x236>
     cb2:	00 00       	nop
				_delay_ms(200);
				while(mappedValue < -50) // 15
     cb4:	80 91 9b 00 	lds	r24, 0x009B
     cb8:	90 91 9c 00 	lds	r25, 0x009C
     cbc:	8e 3c       	cpi	r24, 0xCE	; 206
     cbe:	9f 4f       	sbci	r25, 0xFF	; 255
     cc0:	5c f4       	brge	.+22     	; 0xcd8 <main+0x25c>
				{
					sensorValueConversion();
     cc2:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
					sensorMapping();
     cc6:	0e 94 a2 00 	call	0x144	; 0x144 <sensorMapping>
			{
				Backward();
				_delay_ms(50);
				LeftSharp();
				_delay_ms(200);
				while(mappedValue < -50) // 15
     cca:	80 91 9b 00 	lds	r24, 0x009B
     cce:	90 91 9c 00 	lds	r25, 0x009C
     cd2:	8e 3c       	cpi	r24, 0xCE	; 206
     cd4:	9f 4f       	sbci	r25, 0xFF	; 255
     cd6:	ac f3       	brlt	.-22     	; 0xcc2 <main+0x246>
// 			for (int temp = 0; temp < 10; temp++)
// 			{
// 				sensorValueConversion();
// 				sensorMapping();
// 			}
			while (mappedValue == -100)
     cd8:	80 91 9b 00 	lds	r24, 0x009B
     cdc:	90 91 9c 00 	lds	r25, 0x009C
     ce0:	8c 39       	cpi	r24, 0x9C	; 156
     ce2:	9f 4f       	sbci	r25, 0xFF	; 255
     ce4:	89 f2       	breq	.-94     	; 0xc88 <main+0x20c>
// 			}
// 		}


		
		PID_Correction();
     ce6:	0e 94 0c 04 	call	0x818	; 0x818 <PID_Correction>
		enable1(LMspeed);
     cea:	80 91 7e 00 	lds	r24, 0x007E
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	0e 94 a1 07 	call	0xf42	; 0xf42 <PWM0>
		enable2(RMspeed);
     cf4:	80 91 7d 00 	lds	r24, 0x007D
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	0e 94 a3 07 	call	0xf46	; 0xf46 <PWM2>
	}
     cfe:	e7 ce       	rjmp	.-562    	; 0xace <main+0x52>
// 		{
// 			Forward();
// 			_delay_ms(100);
// 		}
		
		if (mappedValue == 120/* || mappedValue == 110*/)
     d00:	80 91 9b 00 	lds	r24, 0x009B
     d04:	90 91 9c 00 	lds	r25, 0x009C
     d08:	88 37       	cpi	r24, 0x78	; 120
     d0a:	91 05       	cpc	r25, r1
     d0c:	09 f0       	breq	.+2      	; 0xd10 <main+0x294>
     d0e:	44 cf       	rjmp	.-376    	; 0xb98 <main+0x11c>
     d10:	0c cf       	rjmp	.-488    	; 0xb2a <main+0xae>
					sensorMapping();
				}
			}
		}
		
		if (mappedValue == -120/* || mappedValue == -110*/)
     d12:	80 91 9b 00 	lds	r24, 0x009B
     d16:	90 91 9c 00 	lds	r25, 0x009C
     d1a:	88 38       	cpi	r24, 0x88	; 136
     d1c:	9f 4f       	sbci	r25, 0xFF	; 255
     d1e:	09 f0       	breq	.+2      	; 0xd22 <main+0x2a6>
     d20:	76 cf       	rjmp	.-276    	; 0xc0e <main+0x192>
     d22:	41 cf       	rjmp	.-382    	; 0xba6 <main+0x12a>

00000d24 <__vector_1>:
{
	TIMSK |= (1 << TOIE2) | (1 << TOIE0);				// Enable Timer Overflow Interrupt 0, Timer Overflow Interrupt 2
}

ISR (INT0_vect)
{
     d24:	1f 92       	push	r1
     d26:	0f 92       	push	r0
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	0f 92       	push	r0
     d2c:	11 24       	eor	r1, r1
     d2e:	8f 93       	push	r24
     d30:	9f 93       	push	r25
	if (choice1 == 0)
     d32:	80 91 95 00 	lds	r24, 0x0095
     d36:	90 91 96 00 	lds	r25, 0x0096
     d3a:	89 2b       	or	r24, r25
     d3c:	51 f4       	brne	.+20     	; 0xd52 <__vector_1+0x2e>
	{
		TCCR1B |= (1 << CS11);
     d3e:	8e b5       	in	r24, 0x2e	; 46
     d40:	82 60       	ori	r24, 0x02	; 2
     d42:	8e bd       	out	0x2e, r24	; 46
		choice1 = 1;
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	90 93 96 00 	sts	0x0096, r25
     d4c:	80 93 95 00 	sts	0x0095, r24
     d50:	15 c0       	rjmp	.+42     	; 0xd7c <__vector_1+0x58>
	}
	else if (choice1 == 1)
     d52:	80 91 95 00 	lds	r24, 0x0095
     d56:	90 91 96 00 	lds	r25, 0x0096
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	79 f4       	brne	.+30     	; 0xd7c <__vector_1+0x58>
	{
		TCCR1B = 0;
     d5e:	1e bc       	out	0x2e, r1	; 46
		pulse1 = TCNT1 / 2;
     d60:	8c b5       	in	r24, 0x2c	; 44
     d62:	9d b5       	in	r25, 0x2d	; 45
     d64:	96 95       	lsr	r25
     d66:	87 95       	ror	r24
     d68:	90 93 98 00 	sts	0x0098, r25
     d6c:	80 93 97 00 	sts	0x0097, r24
		TCNT1 = 0;
     d70:	1d bc       	out	0x2d, r1	; 45
     d72:	1c bc       	out	0x2c, r1	; 44
		choice1 = 0;
     d74:	10 92 96 00 	sts	0x0096, r1
     d78:	10 92 95 00 	sts	0x0095, r1
	}
}
     d7c:	9f 91       	pop	r25
     d7e:	8f 91       	pop	r24
     d80:	0f 90       	pop	r0
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	0f 90       	pop	r0
     d86:	1f 90       	pop	r1
     d88:	18 95       	reti

00000d8a <__vector_2>:

ISR (INT1_vect)
{
     d8a:	1f 92       	push	r1
     d8c:	0f 92       	push	r0
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	0f 92       	push	r0
     d92:	11 24       	eor	r1, r1
     d94:	2f 93       	push	r18
     d96:	3f 93       	push	r19
     d98:	4f 93       	push	r20
     d9a:	5f 93       	push	r21
     d9c:	8f 93       	push	r24
     d9e:	9f 93       	push	r25
	if (choice2 == 0)
     da0:	80 91 91 00 	lds	r24, 0x0091
     da4:	90 91 92 00 	lds	r25, 0x0092
     da8:	89 2b       	or	r24, r25
     daa:	51 f4       	brne	.+20     	; 0xdc0 <__vector_2+0x36>
	{
		TCCR0 |= 0b00000011;
     dac:	83 b7       	in	r24, 0x33	; 51
     dae:	83 60       	ori	r24, 0x03	; 3
     db0:	83 bf       	out	0x33, r24	; 51
		choice2 = 1;
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	90 93 92 00 	sts	0x0092, r25
     dba:	80 93 91 00 	sts	0x0091, r24
     dbe:	25 c0       	rjmp	.+74     	; 0xe0a <__vector_2+0x80>
	}
	else if (choice2 == 1)
     dc0:	80 91 91 00 	lds	r24, 0x0091
     dc4:	90 91 92 00 	lds	r25, 0x0092
     dc8:	01 97       	sbiw	r24, 0x01	; 1
     dca:	f9 f4       	brne	.+62     	; 0xe0a <__vector_2+0x80>
	{
		TCCR0 = 0;
     dcc:	13 be       	out	0x33, r1	; 51
		pulse2 = (TCNT0 + (0xFF * TIMER0_INT)) * 4;
     dce:	22 b7       	in	r18, 0x32	; 50
     dd0:	40 91 8b 00 	lds	r20, 0x008B
     dd4:	50 91 8c 00 	lds	r21, 0x008C
     dd8:	3f ef       	ldi	r19, 0xFF	; 255
     dda:	34 9f       	mul	r19, r20
     ddc:	c0 01       	movw	r24, r0
     dde:	35 9f       	mul	r19, r21
     de0:	90 0d       	add	r25, r0
     de2:	11 24       	eor	r1, r1
     de4:	82 0f       	add	r24, r18
     de6:	91 1d       	adc	r25, r1
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	90 93 94 00 	sts	0x0094, r25
     df4:	80 93 93 00 	sts	0x0093, r24
		TIMER0_INT = 0;
     df8:	10 92 8c 00 	sts	0x008C, r1
     dfc:	10 92 8b 00 	sts	0x008B, r1
		TCNT0 = 0;
     e00:	12 be       	out	0x32, r1	; 50
		choice2 = 0;
     e02:	10 92 92 00 	sts	0x0092, r1
     e06:	10 92 91 00 	sts	0x0091, r1
	}
}
     e0a:	9f 91       	pop	r25
     e0c:	8f 91       	pop	r24
     e0e:	5f 91       	pop	r21
     e10:	4f 91       	pop	r20
     e12:	3f 91       	pop	r19
     e14:	2f 91       	pop	r18
     e16:	0f 90       	pop	r0
     e18:	0f be       	out	0x3f, r0	; 63
     e1a:	0f 90       	pop	r0
     e1c:	1f 90       	pop	r1
     e1e:	18 95       	reti

00000e20 <__vector_3>:

ISR (INT2_vect)
{
     e20:	1f 92       	push	r1
     e22:	0f 92       	push	r0
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	0f 92       	push	r0
     e28:	11 24       	eor	r1, r1
     e2a:	2f 93       	push	r18
     e2c:	3f 93       	push	r19
     e2e:	4f 93       	push	r20
     e30:	5f 93       	push	r21
     e32:	8f 93       	push	r24
     e34:	9f 93       	push	r25
	MCUCSR ^= (1 << ISC2);
     e36:	94 b7       	in	r25, 0x34	; 52
     e38:	80 e4       	ldi	r24, 0x40	; 64
     e3a:	89 27       	eor	r24, r25
     e3c:	84 bf       	out	0x34, r24	; 52
	if (choice3 == 0)
     e3e:	80 91 8d 00 	lds	r24, 0x008D
     e42:	90 91 8e 00 	lds	r25, 0x008E
     e46:	89 2b       	or	r24, r25
     e48:	51 f4       	brne	.+20     	; 0xe5e <__vector_3+0x3e>
	{
		TCCR2 |= 0b00000100;
     e4a:	85 b5       	in	r24, 0x25	; 37
     e4c:	84 60       	ori	r24, 0x04	; 4
     e4e:	85 bd       	out	0x25, r24	; 37
		choice3 = 1;
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	90 93 8e 00 	sts	0x008E, r25
     e58:	80 93 8d 00 	sts	0x008D, r24
     e5c:	25 c0       	rjmp	.+74     	; 0xea8 <__vector_3+0x88>
	}
	else if (choice3 == 1)
     e5e:	80 91 8d 00 	lds	r24, 0x008D
     e62:	90 91 8e 00 	lds	r25, 0x008E
     e66:	01 97       	sbiw	r24, 0x01	; 1
     e68:	f9 f4       	brne	.+62     	; 0xea8 <__vector_3+0x88>
	{
		TCCR2 = 0;
     e6a:	15 bc       	out	0x25, r1	; 37
		pulse3 = (TCNT2 + (0xFF * TIMER2_INT)) * 4;
     e6c:	24 b5       	in	r18, 0x24	; 36
     e6e:	40 91 89 00 	lds	r20, 0x0089
     e72:	50 91 8a 00 	lds	r21, 0x008A
     e76:	3f ef       	ldi	r19, 0xFF	; 255
     e78:	34 9f       	mul	r19, r20
     e7a:	c0 01       	movw	r24, r0
     e7c:	35 9f       	mul	r19, r21
     e7e:	90 0d       	add	r25, r0
     e80:	11 24       	eor	r1, r1
     e82:	82 0f       	add	r24, r18
     e84:	91 1d       	adc	r25, r1
     e86:	88 0f       	add	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	90 93 90 00 	sts	0x0090, r25
     e92:	80 93 8f 00 	sts	0x008F, r24
		TIMER2_INT = 0;
     e96:	10 92 8a 00 	sts	0x008A, r1
     e9a:	10 92 89 00 	sts	0x0089, r1
		TCNT2 = 0;
     e9e:	14 bc       	out	0x24, r1	; 36
		choice3 = 0;
     ea0:	10 92 8e 00 	sts	0x008E, r1
     ea4:	10 92 8d 00 	sts	0x008D, r1
	}
}
     ea8:	9f 91       	pop	r25
     eaa:	8f 91       	pop	r24
     eac:	5f 91       	pop	r21
     eae:	4f 91       	pop	r20
     eb0:	3f 91       	pop	r19
     eb2:	2f 91       	pop	r18
     eb4:	0f 90       	pop	r0
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	0f 90       	pop	r0
     eba:	1f 90       	pop	r1
     ebc:	18 95       	reti

00000ebe <__vector_5>:

ISR (TIMER2_OVF_vect)
{
     ebe:	1f 92       	push	r1
     ec0:	0f 92       	push	r0
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	0f 92       	push	r0
     ec6:	11 24       	eor	r1, r1
     ec8:	8f 93       	push	r24
     eca:	9f 93       	push	r25
	TIMER2_INT++;
     ecc:	80 91 89 00 	lds	r24, 0x0089
     ed0:	90 91 8a 00 	lds	r25, 0x008A
     ed4:	01 96       	adiw	r24, 0x01	; 1
     ed6:	90 93 8a 00 	sts	0x008A, r25
     eda:	80 93 89 00 	sts	0x0089, r24
}
     ede:	9f 91       	pop	r25
     ee0:	8f 91       	pop	r24
     ee2:	0f 90       	pop	r0
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	0f 90       	pop	r0
     ee8:	1f 90       	pop	r1
     eea:	18 95       	reti

00000eec <__vector_11>:

ISR (TIMER0_OVF_vect)
{
     eec:	1f 92       	push	r1
     eee:	0f 92       	push	r0
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	0f 92       	push	r0
     ef4:	11 24       	eor	r1, r1
     ef6:	8f 93       	push	r24
     ef8:	9f 93       	push	r25
	TIMER0_INT++;
     efa:	80 91 8b 00 	lds	r24, 0x008B
     efe:	90 91 8c 00 	lds	r25, 0x008C
     f02:	01 96       	adiw	r24, 0x01	; 1
     f04:	90 93 8c 00 	sts	0x008C, r25
     f08:	80 93 8b 00 	sts	0x008B, r24
}
     f0c:	9f 91       	pop	r25
     f0e:	8f 91       	pop	r24
     f10:	0f 90       	pop	r0
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	0f 90       	pop	r0
     f16:	1f 90       	pop	r1
     f18:	18 95       	reti

00000f1a <PWM0_init>:
     f1a:	83 b7       	in	r24, 0x33	; 51
     f1c:	88 64       	ori	r24, 0x48	; 72
     f1e:	83 bf       	out	0x33, r24	; 51
     f20:	83 b7       	in	r24, 0x33	; 51
     f22:	80 62       	ori	r24, 0x20	; 32
     f24:	83 bf       	out	0x33, r24	; 51
     f26:	83 b7       	in	r24, 0x33	; 51
     f28:	81 60       	ori	r24, 0x01	; 1
     f2a:	83 bf       	out	0x33, r24	; 51
     f2c:	08 95       	ret

00000f2e <PWM2_init>:
     f2e:	85 b5       	in	r24, 0x25	; 37
     f30:	88 64       	ori	r24, 0x48	; 72
     f32:	85 bd       	out	0x25, r24	; 37
     f34:	85 b5       	in	r24, 0x25	; 37
     f36:	80 62       	ori	r24, 0x20	; 32
     f38:	85 bd       	out	0x25, r24	; 37
     f3a:	85 b5       	in	r24, 0x25	; 37
     f3c:	81 60       	ori	r24, 0x01	; 1
     f3e:	85 bd       	out	0x25, r24	; 37
     f40:	08 95       	ret

00000f42 <PWM0>:
     f42:	8c bf       	out	0x3c, r24	; 60
     f44:	08 95       	ret

00000f46 <PWM2>:
     f46:	83 bd       	out	0x23, r24	; 35
     f48:	08 95       	ret

00000f4a <UART_init>:
     f4a:	80 b5       	in	r24, 0x20	; 32
     f4c:	8f 7b       	andi	r24, 0xBF	; 191
     f4e:	80 bd       	out	0x20, r24	; 32
     f50:	59 98       	cbi	0x0b, 1	; 11
     f52:	10 bc       	out	0x20, r1	; 32
     f54:	87 e6       	ldi	r24, 0x67	; 103
     f56:	89 b9       	out	0x09, r24	; 9
     f58:	8a b1       	in	r24, 0x0a	; 10
     f5a:	88 61       	ori	r24, 0x18	; 24
     f5c:	8a b9       	out	0x0a, r24	; 10
     f5e:	80 b5       	in	r24, 0x20	; 32
     f60:	8e 68       	ori	r24, 0x8E	; 142
     f62:	80 bd       	out	0x20, r24	; 32
     f64:	08 95       	ret

00000f66 <__subsf3>:
     f66:	50 58       	subi	r21, 0x80	; 128

00000f68 <__addsf3>:
     f68:	bb 27       	eor	r27, r27
     f6a:	aa 27       	eor	r26, r26
     f6c:	0e 94 cb 07 	call	0xf96	; 0xf96 <__addsf3x>
     f70:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <__fp_round>
     f74:	0e 94 9c 08 	call	0x1138	; 0x1138 <__fp_pscA>
     f78:	38 f0       	brcs	.+14     	; 0xf88 <__addsf3+0x20>
     f7a:	0e 94 a3 08 	call	0x1146	; 0x1146 <__fp_pscB>
     f7e:	20 f0       	brcs	.+8      	; 0xf88 <__addsf3+0x20>
     f80:	39 f4       	brne	.+14     	; 0xf90 <__addsf3+0x28>
     f82:	9f 3f       	cpi	r25, 0xFF	; 255
     f84:	19 f4       	brne	.+6      	; 0xf8c <__addsf3+0x24>
     f86:	26 f4       	brtc	.+8      	; 0xf90 <__addsf3+0x28>
     f88:	0c 94 99 08 	jmp	0x1132	; 0x1132 <__fp_nan>
     f8c:	0e f4       	brtc	.+2      	; 0xf90 <__addsf3+0x28>
     f8e:	e0 95       	com	r30
     f90:	e7 fb       	bst	r30, 7
     f92:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__fp_inf>

00000f96 <__addsf3x>:
     f96:	e9 2f       	mov	r30, r25
     f98:	0e 94 bb 08 	call	0x1176	; 0x1176 <__fp_split3>
     f9c:	58 f3       	brcs	.-42     	; 0xf74 <__addsf3+0xc>
     f9e:	ba 17       	cp	r27, r26
     fa0:	62 07       	cpc	r22, r18
     fa2:	73 07       	cpc	r23, r19
     fa4:	84 07       	cpc	r24, r20
     fa6:	95 07       	cpc	r25, r21
     fa8:	20 f0       	brcs	.+8      	; 0xfb2 <__addsf3x+0x1c>
     faa:	79 f4       	brne	.+30     	; 0xfca <__addsf3x+0x34>
     fac:	a6 f5       	brtc	.+104    	; 0x1016 <__addsf3x+0x80>
     fae:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <__fp_zero>
     fb2:	0e f4       	brtc	.+2      	; 0xfb6 <__addsf3x+0x20>
     fb4:	e0 95       	com	r30
     fb6:	0b 2e       	mov	r0, r27
     fb8:	ba 2f       	mov	r27, r26
     fba:	a0 2d       	mov	r26, r0
     fbc:	0b 01       	movw	r0, r22
     fbe:	b9 01       	movw	r22, r18
     fc0:	90 01       	movw	r18, r0
     fc2:	0c 01       	movw	r0, r24
     fc4:	ca 01       	movw	r24, r20
     fc6:	a0 01       	movw	r20, r0
     fc8:	11 24       	eor	r1, r1
     fca:	ff 27       	eor	r31, r31
     fcc:	59 1b       	sub	r21, r25
     fce:	99 f0       	breq	.+38     	; 0xff6 <__addsf3x+0x60>
     fd0:	59 3f       	cpi	r21, 0xF9	; 249
     fd2:	50 f4       	brcc	.+20     	; 0xfe8 <__addsf3x+0x52>
     fd4:	50 3e       	cpi	r21, 0xE0	; 224
     fd6:	68 f1       	brcs	.+90     	; 0x1032 <__addsf3x+0x9c>
     fd8:	1a 16       	cp	r1, r26
     fda:	f0 40       	sbci	r31, 0x00	; 0
     fdc:	a2 2f       	mov	r26, r18
     fde:	23 2f       	mov	r18, r19
     fe0:	34 2f       	mov	r19, r20
     fe2:	44 27       	eor	r20, r20
     fe4:	58 5f       	subi	r21, 0xF8	; 248
     fe6:	f3 cf       	rjmp	.-26     	; 0xfce <__addsf3x+0x38>
     fe8:	46 95       	lsr	r20
     fea:	37 95       	ror	r19
     fec:	27 95       	ror	r18
     fee:	a7 95       	ror	r26
     ff0:	f0 40       	sbci	r31, 0x00	; 0
     ff2:	53 95       	inc	r21
     ff4:	c9 f7       	brne	.-14     	; 0xfe8 <__addsf3x+0x52>
     ff6:	7e f4       	brtc	.+30     	; 0x1016 <__addsf3x+0x80>
     ff8:	1f 16       	cp	r1, r31
     ffa:	ba 0b       	sbc	r27, r26
     ffc:	62 0b       	sbc	r22, r18
     ffe:	73 0b       	sbc	r23, r19
    1000:	84 0b       	sbc	r24, r20
    1002:	ba f0       	brmi	.+46     	; 0x1032 <__addsf3x+0x9c>
    1004:	91 50       	subi	r25, 0x01	; 1
    1006:	a1 f0       	breq	.+40     	; 0x1030 <__addsf3x+0x9a>
    1008:	ff 0f       	add	r31, r31
    100a:	bb 1f       	adc	r27, r27
    100c:	66 1f       	adc	r22, r22
    100e:	77 1f       	adc	r23, r23
    1010:	88 1f       	adc	r24, r24
    1012:	c2 f7       	brpl	.-16     	; 0x1004 <__addsf3x+0x6e>
    1014:	0e c0       	rjmp	.+28     	; 0x1032 <__addsf3x+0x9c>
    1016:	ba 0f       	add	r27, r26
    1018:	62 1f       	adc	r22, r18
    101a:	73 1f       	adc	r23, r19
    101c:	84 1f       	adc	r24, r20
    101e:	48 f4       	brcc	.+18     	; 0x1032 <__addsf3x+0x9c>
    1020:	87 95       	ror	r24
    1022:	77 95       	ror	r23
    1024:	67 95       	ror	r22
    1026:	b7 95       	ror	r27
    1028:	f7 95       	ror	r31
    102a:	9e 3f       	cpi	r25, 0xFE	; 254
    102c:	08 f0       	brcs	.+2      	; 0x1030 <__addsf3x+0x9a>
    102e:	b0 cf       	rjmp	.-160    	; 0xf90 <__addsf3+0x28>
    1030:	93 95       	inc	r25
    1032:	88 0f       	add	r24, r24
    1034:	08 f0       	brcs	.+2      	; 0x1038 <__addsf3x+0xa2>
    1036:	99 27       	eor	r25, r25
    1038:	ee 0f       	add	r30, r30
    103a:	97 95       	ror	r25
    103c:	87 95       	ror	r24
    103e:	08 95       	ret

00001040 <__fixsfsi>:
    1040:	0e 94 27 08 	call	0x104e	; 0x104e <__fixunssfsi>
    1044:	68 94       	set
    1046:	b1 11       	cpse	r27, r1
    1048:	0c 94 de 08 	jmp	0x11bc	; 0x11bc <__fp_szero>
    104c:	08 95       	ret

0000104e <__fixunssfsi>:
    104e:	0e 94 c3 08 	call	0x1186	; 0x1186 <__fp_splitA>
    1052:	88 f0       	brcs	.+34     	; 0x1076 <__fixunssfsi+0x28>
    1054:	9f 57       	subi	r25, 0x7F	; 127
    1056:	98 f0       	brcs	.+38     	; 0x107e <__fixunssfsi+0x30>
    1058:	b9 2f       	mov	r27, r25
    105a:	99 27       	eor	r25, r25
    105c:	b7 51       	subi	r27, 0x17	; 23
    105e:	b0 f0       	brcs	.+44     	; 0x108c <__fixunssfsi+0x3e>
    1060:	e1 f0       	breq	.+56     	; 0x109a <__fixunssfsi+0x4c>
    1062:	66 0f       	add	r22, r22
    1064:	77 1f       	adc	r23, r23
    1066:	88 1f       	adc	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	1a f0       	brmi	.+6      	; 0x1072 <__fixunssfsi+0x24>
    106c:	ba 95       	dec	r27
    106e:	c9 f7       	brne	.-14     	; 0x1062 <__fixunssfsi+0x14>
    1070:	14 c0       	rjmp	.+40     	; 0x109a <__fixunssfsi+0x4c>
    1072:	b1 30       	cpi	r27, 0x01	; 1
    1074:	91 f0       	breq	.+36     	; 0x109a <__fixunssfsi+0x4c>
    1076:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__fp_zero>
    107a:	b1 e0       	ldi	r27, 0x01	; 1
    107c:	08 95       	ret
    107e:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <__fp_zero>
    1082:	67 2f       	mov	r22, r23
    1084:	78 2f       	mov	r23, r24
    1086:	88 27       	eor	r24, r24
    1088:	b8 5f       	subi	r27, 0xF8	; 248
    108a:	39 f0       	breq	.+14     	; 0x109a <__fixunssfsi+0x4c>
    108c:	b9 3f       	cpi	r27, 0xF9	; 249
    108e:	cc f3       	brlt	.-14     	; 0x1082 <__fixunssfsi+0x34>
    1090:	86 95       	lsr	r24
    1092:	77 95       	ror	r23
    1094:	67 95       	ror	r22
    1096:	b3 95       	inc	r27
    1098:	d9 f7       	brne	.-10     	; 0x1090 <__fixunssfsi+0x42>
    109a:	3e f4       	brtc	.+14     	; 0x10aa <__fixunssfsi+0x5c>
    109c:	90 95       	com	r25
    109e:	80 95       	com	r24
    10a0:	70 95       	com	r23
    10a2:	61 95       	neg	r22
    10a4:	7f 4f       	sbci	r23, 0xFF	; 255
    10a6:	8f 4f       	sbci	r24, 0xFF	; 255
    10a8:	9f 4f       	sbci	r25, 0xFF	; 255
    10aa:	08 95       	ret

000010ac <__floatunsisf>:
    10ac:	e8 94       	clt
    10ae:	09 c0       	rjmp	.+18     	; 0x10c2 <__floatsisf+0x12>

000010b0 <__floatsisf>:
    10b0:	97 fb       	bst	r25, 7
    10b2:	3e f4       	brtc	.+14     	; 0x10c2 <__floatsisf+0x12>
    10b4:	90 95       	com	r25
    10b6:	80 95       	com	r24
    10b8:	70 95       	com	r23
    10ba:	61 95       	neg	r22
    10bc:	7f 4f       	sbci	r23, 0xFF	; 255
    10be:	8f 4f       	sbci	r24, 0xFF	; 255
    10c0:	9f 4f       	sbci	r25, 0xFF	; 255
    10c2:	99 23       	and	r25, r25
    10c4:	a9 f0       	breq	.+42     	; 0x10f0 <__floatsisf+0x40>
    10c6:	f9 2f       	mov	r31, r25
    10c8:	96 e9       	ldi	r25, 0x96	; 150
    10ca:	bb 27       	eor	r27, r27
    10cc:	93 95       	inc	r25
    10ce:	f6 95       	lsr	r31
    10d0:	87 95       	ror	r24
    10d2:	77 95       	ror	r23
    10d4:	67 95       	ror	r22
    10d6:	b7 95       	ror	r27
    10d8:	f1 11       	cpse	r31, r1
    10da:	f8 cf       	rjmp	.-16     	; 0x10cc <__floatsisf+0x1c>
    10dc:	fa f4       	brpl	.+62     	; 0x111c <__floatsisf+0x6c>
    10de:	bb 0f       	add	r27, r27
    10e0:	11 f4       	brne	.+4      	; 0x10e6 <__floatsisf+0x36>
    10e2:	60 ff       	sbrs	r22, 0
    10e4:	1b c0       	rjmp	.+54     	; 0x111c <__floatsisf+0x6c>
    10e6:	6f 5f       	subi	r22, 0xFF	; 255
    10e8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ea:	8f 4f       	sbci	r24, 0xFF	; 255
    10ec:	9f 4f       	sbci	r25, 0xFF	; 255
    10ee:	16 c0       	rjmp	.+44     	; 0x111c <__floatsisf+0x6c>
    10f0:	88 23       	and	r24, r24
    10f2:	11 f0       	breq	.+4      	; 0x10f8 <__floatsisf+0x48>
    10f4:	96 e9       	ldi	r25, 0x96	; 150
    10f6:	11 c0       	rjmp	.+34     	; 0x111a <__floatsisf+0x6a>
    10f8:	77 23       	and	r23, r23
    10fa:	21 f0       	breq	.+8      	; 0x1104 <__floatsisf+0x54>
    10fc:	9e e8       	ldi	r25, 0x8E	; 142
    10fe:	87 2f       	mov	r24, r23
    1100:	76 2f       	mov	r23, r22
    1102:	05 c0       	rjmp	.+10     	; 0x110e <__floatsisf+0x5e>
    1104:	66 23       	and	r22, r22
    1106:	71 f0       	breq	.+28     	; 0x1124 <__floatsisf+0x74>
    1108:	96 e8       	ldi	r25, 0x86	; 134
    110a:	86 2f       	mov	r24, r22
    110c:	70 e0       	ldi	r23, 0x00	; 0
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	2a f0       	brmi	.+10     	; 0x111c <__floatsisf+0x6c>
    1112:	9a 95       	dec	r25
    1114:	66 0f       	add	r22, r22
    1116:	77 1f       	adc	r23, r23
    1118:	88 1f       	adc	r24, r24
    111a:	da f7       	brpl	.-10     	; 0x1112 <__floatsisf+0x62>
    111c:	88 0f       	add	r24, r24
    111e:	96 95       	lsr	r25
    1120:	87 95       	ror	r24
    1122:	97 f9       	bld	r25, 7
    1124:	08 95       	ret

00001126 <__fp_inf>:
    1126:	97 f9       	bld	r25, 7
    1128:	9f 67       	ori	r25, 0x7F	; 127
    112a:	80 e8       	ldi	r24, 0x80	; 128
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	08 95       	ret

00001132 <__fp_nan>:
    1132:	9f ef       	ldi	r25, 0xFF	; 255
    1134:	80 ec       	ldi	r24, 0xC0	; 192
    1136:	08 95       	ret

00001138 <__fp_pscA>:
    1138:	00 24       	eor	r0, r0
    113a:	0a 94       	dec	r0
    113c:	16 16       	cp	r1, r22
    113e:	17 06       	cpc	r1, r23
    1140:	18 06       	cpc	r1, r24
    1142:	09 06       	cpc	r0, r25
    1144:	08 95       	ret

00001146 <__fp_pscB>:
    1146:	00 24       	eor	r0, r0
    1148:	0a 94       	dec	r0
    114a:	12 16       	cp	r1, r18
    114c:	13 06       	cpc	r1, r19
    114e:	14 06       	cpc	r1, r20
    1150:	05 06       	cpc	r0, r21
    1152:	08 95       	ret

00001154 <__fp_round>:
    1154:	09 2e       	mov	r0, r25
    1156:	03 94       	inc	r0
    1158:	00 0c       	add	r0, r0
    115a:	11 f4       	brne	.+4      	; 0x1160 <__fp_round+0xc>
    115c:	88 23       	and	r24, r24
    115e:	52 f0       	brmi	.+20     	; 0x1174 <__fp_round+0x20>
    1160:	bb 0f       	add	r27, r27
    1162:	40 f4       	brcc	.+16     	; 0x1174 <__fp_round+0x20>
    1164:	bf 2b       	or	r27, r31
    1166:	11 f4       	brne	.+4      	; 0x116c <__fp_round+0x18>
    1168:	60 ff       	sbrs	r22, 0
    116a:	04 c0       	rjmp	.+8      	; 0x1174 <__fp_round+0x20>
    116c:	6f 5f       	subi	r22, 0xFF	; 255
    116e:	7f 4f       	sbci	r23, 0xFF	; 255
    1170:	8f 4f       	sbci	r24, 0xFF	; 255
    1172:	9f 4f       	sbci	r25, 0xFF	; 255
    1174:	08 95       	ret

00001176 <__fp_split3>:
    1176:	57 fd       	sbrc	r21, 7
    1178:	90 58       	subi	r25, 0x80	; 128
    117a:	44 0f       	add	r20, r20
    117c:	55 1f       	adc	r21, r21
    117e:	59 f0       	breq	.+22     	; 0x1196 <__fp_splitA+0x10>
    1180:	5f 3f       	cpi	r21, 0xFF	; 255
    1182:	71 f0       	breq	.+28     	; 0x11a0 <__fp_splitA+0x1a>
    1184:	47 95       	ror	r20

00001186 <__fp_splitA>:
    1186:	88 0f       	add	r24, r24
    1188:	97 fb       	bst	r25, 7
    118a:	99 1f       	adc	r25, r25
    118c:	61 f0       	breq	.+24     	; 0x11a6 <__fp_splitA+0x20>
    118e:	9f 3f       	cpi	r25, 0xFF	; 255
    1190:	79 f0       	breq	.+30     	; 0x11b0 <__fp_splitA+0x2a>
    1192:	87 95       	ror	r24
    1194:	08 95       	ret
    1196:	12 16       	cp	r1, r18
    1198:	13 06       	cpc	r1, r19
    119a:	14 06       	cpc	r1, r20
    119c:	55 1f       	adc	r21, r21
    119e:	f2 cf       	rjmp	.-28     	; 0x1184 <__fp_split3+0xe>
    11a0:	46 95       	lsr	r20
    11a2:	f1 df       	rcall	.-30     	; 0x1186 <__fp_splitA>
    11a4:	08 c0       	rjmp	.+16     	; 0x11b6 <__fp_splitA+0x30>
    11a6:	16 16       	cp	r1, r22
    11a8:	17 06       	cpc	r1, r23
    11aa:	18 06       	cpc	r1, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	f1 cf       	rjmp	.-30     	; 0x1192 <__fp_splitA+0xc>
    11b0:	86 95       	lsr	r24
    11b2:	71 05       	cpc	r23, r1
    11b4:	61 05       	cpc	r22, r1
    11b6:	08 94       	sec
    11b8:	08 95       	ret

000011ba <__fp_zero>:
    11ba:	e8 94       	clt

000011bc <__fp_szero>:
    11bc:	bb 27       	eor	r27, r27
    11be:	66 27       	eor	r22, r22
    11c0:	77 27       	eor	r23, r23
    11c2:	cb 01       	movw	r24, r22
    11c4:	97 f9       	bld	r25, 7
    11c6:	08 95       	ret

000011c8 <__mulsf3>:
    11c8:	0e 94 f7 08 	call	0x11ee	; 0x11ee <__mulsf3x>
    11cc:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <__fp_round>
    11d0:	0e 94 9c 08 	call	0x1138	; 0x1138 <__fp_pscA>
    11d4:	38 f0       	brcs	.+14     	; 0x11e4 <__mulsf3+0x1c>
    11d6:	0e 94 a3 08 	call	0x1146	; 0x1146 <__fp_pscB>
    11da:	20 f0       	brcs	.+8      	; 0x11e4 <__mulsf3+0x1c>
    11dc:	95 23       	and	r25, r21
    11de:	11 f0       	breq	.+4      	; 0x11e4 <__mulsf3+0x1c>
    11e0:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__fp_inf>
    11e4:	0c 94 99 08 	jmp	0x1132	; 0x1132 <__fp_nan>
    11e8:	11 24       	eor	r1, r1
    11ea:	0c 94 de 08 	jmp	0x11bc	; 0x11bc <__fp_szero>

000011ee <__mulsf3x>:
    11ee:	0e 94 bb 08 	call	0x1176	; 0x1176 <__fp_split3>
    11f2:	70 f3       	brcs	.-36     	; 0x11d0 <__mulsf3+0x8>

000011f4 <__mulsf3_pse>:
    11f4:	95 9f       	mul	r25, r21
    11f6:	c1 f3       	breq	.-16     	; 0x11e8 <__mulsf3+0x20>
    11f8:	95 0f       	add	r25, r21
    11fa:	50 e0       	ldi	r21, 0x00	; 0
    11fc:	55 1f       	adc	r21, r21
    11fe:	62 9f       	mul	r22, r18
    1200:	f0 01       	movw	r30, r0
    1202:	72 9f       	mul	r23, r18
    1204:	bb 27       	eor	r27, r27
    1206:	f0 0d       	add	r31, r0
    1208:	b1 1d       	adc	r27, r1
    120a:	63 9f       	mul	r22, r19
    120c:	aa 27       	eor	r26, r26
    120e:	f0 0d       	add	r31, r0
    1210:	b1 1d       	adc	r27, r1
    1212:	aa 1f       	adc	r26, r26
    1214:	64 9f       	mul	r22, r20
    1216:	66 27       	eor	r22, r22
    1218:	b0 0d       	add	r27, r0
    121a:	a1 1d       	adc	r26, r1
    121c:	66 1f       	adc	r22, r22
    121e:	82 9f       	mul	r24, r18
    1220:	22 27       	eor	r18, r18
    1222:	b0 0d       	add	r27, r0
    1224:	a1 1d       	adc	r26, r1
    1226:	62 1f       	adc	r22, r18
    1228:	73 9f       	mul	r23, r19
    122a:	b0 0d       	add	r27, r0
    122c:	a1 1d       	adc	r26, r1
    122e:	62 1f       	adc	r22, r18
    1230:	83 9f       	mul	r24, r19
    1232:	a0 0d       	add	r26, r0
    1234:	61 1d       	adc	r22, r1
    1236:	22 1f       	adc	r18, r18
    1238:	74 9f       	mul	r23, r20
    123a:	33 27       	eor	r19, r19
    123c:	a0 0d       	add	r26, r0
    123e:	61 1d       	adc	r22, r1
    1240:	23 1f       	adc	r18, r19
    1242:	84 9f       	mul	r24, r20
    1244:	60 0d       	add	r22, r0
    1246:	21 1d       	adc	r18, r1
    1248:	82 2f       	mov	r24, r18
    124a:	76 2f       	mov	r23, r22
    124c:	6a 2f       	mov	r22, r26
    124e:	11 24       	eor	r1, r1
    1250:	9f 57       	subi	r25, 0x7F	; 127
    1252:	50 40       	sbci	r21, 0x00	; 0
    1254:	9a f0       	brmi	.+38     	; 0x127c <__mulsf3_pse+0x88>
    1256:	f1 f0       	breq	.+60     	; 0x1294 <__mulsf3_pse+0xa0>
    1258:	88 23       	and	r24, r24
    125a:	4a f0       	brmi	.+18     	; 0x126e <__mulsf3_pse+0x7a>
    125c:	ee 0f       	add	r30, r30
    125e:	ff 1f       	adc	r31, r31
    1260:	bb 1f       	adc	r27, r27
    1262:	66 1f       	adc	r22, r22
    1264:	77 1f       	adc	r23, r23
    1266:	88 1f       	adc	r24, r24
    1268:	91 50       	subi	r25, 0x01	; 1
    126a:	50 40       	sbci	r21, 0x00	; 0
    126c:	a9 f7       	brne	.-22     	; 0x1258 <__mulsf3_pse+0x64>
    126e:	9e 3f       	cpi	r25, 0xFE	; 254
    1270:	51 05       	cpc	r21, r1
    1272:	80 f0       	brcs	.+32     	; 0x1294 <__mulsf3_pse+0xa0>
    1274:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__fp_inf>
    1278:	0c 94 de 08 	jmp	0x11bc	; 0x11bc <__fp_szero>
    127c:	5f 3f       	cpi	r21, 0xFF	; 255
    127e:	e4 f3       	brlt	.-8      	; 0x1278 <__mulsf3_pse+0x84>
    1280:	98 3e       	cpi	r25, 0xE8	; 232
    1282:	d4 f3       	brlt	.-12     	; 0x1278 <__mulsf3_pse+0x84>
    1284:	86 95       	lsr	r24
    1286:	77 95       	ror	r23
    1288:	67 95       	ror	r22
    128a:	b7 95       	ror	r27
    128c:	f7 95       	ror	r31
    128e:	e7 95       	ror	r30
    1290:	9f 5f       	subi	r25, 0xFF	; 255
    1292:	c1 f7       	brne	.-16     	; 0x1284 <__mulsf3_pse+0x90>
    1294:	fe 2b       	or	r31, r30
    1296:	88 0f       	add	r24, r24
    1298:	91 1d       	adc	r25, r1
    129a:	96 95       	lsr	r25
    129c:	87 95       	ror	r24
    129e:	97 f9       	bld	r25, 7
    12a0:	08 95       	ret

000012a2 <_exit>:
    12a2:	f8 94       	cli

000012a4 <__stop_program>:
    12a4:	ff cf       	rjmp	.-2      	; 0x12a4 <__stop_program>
