
LFR_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00001032  000010c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001032  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000042  0080016e  0080016e  00001134  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001134  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001164  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000011a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dc7  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000add  00000000  00000000  000030bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001089  00000000  00000000  00003b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000384  00000000  00000000  00004c24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f6  00000000  00000000  00004fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dc2  00000000  00000000  0000579e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00006560  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e3       	ldi	r30, 0x32	; 50
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 36       	cpi	r26, 0x6E	; 110
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ae e6       	ldi	r26, 0x6E	; 110
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a0 3b       	cpi	r26, 0xB0	; 176
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 61 04 	call	0x8c2	; 0x8c2 <main>
      9e:	0c 94 17 08 	jmp	0x102e	; 0x102e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_init>:
#include "ADC_routine.h"
#include "serial_lib.h"

void adc_init()
{
	ADMUX |= (1 << REFS0);									    //reference AVcc 5volt
      a6:	ec e7       	ldi	r30, 0x7C	; 124
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	80 81       	ld	r24, Z
      ac:	80 64       	ori	r24, 0x40	; 64
      ae:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);										//enable ADC Module
      b0:	ea e7       	ldi	r30, 0x7A	; 122
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	80 81       	ld	r24, Z
      b6:	80 68       	ori	r24, 0x80	; 128
      b8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);		//prescaler 128
      ba:	80 81       	ld	r24, Z
      bc:	87 60       	ori	r24, 0x07	; 7
      be:	80 83       	st	Z, r24
      c0:	08 95       	ret

000000c2 <adcRead>:
}

int adcRead(uint8_t channel)
{
	ADMUX  &= ~(0x0F);				//disable all ADC channel
      c2:	ec e7       	ldi	r30, 0x7C	; 124
      c4:	f0 e0       	ldi	r31, 0x00	; 0
      c6:	90 81       	ld	r25, Z
      c8:	90 7f       	andi	r25, 0xF0	; 240
      ca:	90 83       	st	Z, r25
	ADMUX |= channel;				//set the ADC channel
      cc:	90 81       	ld	r25, Z
      ce:	89 2b       	or	r24, r25
      d0:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);			//start ADC conversion
      d2:	ea e7       	ldi	r30, 0x7A	; 122
      d4:	f0 e0       	ldi	r31, 0x00	; 0
      d6:	80 81       	ld	r24, Z
      d8:	80 64       	ori	r24, 0x40	; 64
      da:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));		//wait until conversion complete
      dc:	80 81       	ld	r24, Z
      de:	86 fd       	sbrc	r24, 6
      e0:	fd cf       	rjmp	.-6      	; 0xdc <adcRead+0x1a>
	return ADC;						//return the ADC converted digital value
      e2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      e6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
      ea:	08 95       	ret

000000ec <sensorValueConversion>:
	enable2(0);
	
	motor1a_PORT |= (1 << motor1a_PIN);
	motor1b_PORT &= ~(1 << motor1b_PIN);
	motor2a_PORT &= ~(1 << motor2a_PIN);
	motor2b_PORT |= (1 << motor2b_PIN);
      ec:	9f 92       	push	r9
      ee:	af 92       	push	r10
      f0:	bf 92       	push	r11
      f2:	cf 92       	push	r12
      f4:	df 92       	push	r13
      f6:	ef 92       	push	r14
      f8:	ff 92       	push	r15
      fa:	0f 93       	push	r16
      fc:	1f 93       	push	r17
      fe:	cf 93       	push	r28
     100:	df 93       	push	r29
     102:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <sensorCount>
     106:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <leftFlag>
     10a:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <rightFlag>
     10e:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <allFlag>
     112:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <rightAcuteFlag>
     116:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <leftAcuteFlag>
     11a:	0f 2e       	mov	r0, r31
     11c:	f5 e3       	ldi	r31, 0x35	; 53
     11e:	cf 2e       	mov	r12, r31
     120:	f1 e0       	ldi	r31, 0x01	; 1
     122:	df 2e       	mov	r13, r31
     124:	f0 2d       	mov	r31, r0
     126:	03 e0       	ldi	r16, 0x03	; 3
     128:	10 e0       	ldi	r17, 0x00	; 0
     12a:	0f 2e       	mov	r0, r31
     12c:	f6 e0       	ldi	r31, 0x06	; 6
     12e:	ff 2e       	mov	r15, r31
     130:	f0 2d       	mov	r31, r0
     132:	d1 e0       	ldi	r29, 0x01	; 1
     134:	c0 e0       	ldi	r28, 0x00	; 0
     136:	0f 2e       	mov	r0, r31
     138:	f5 e0       	ldi	r31, 0x05	; 5
     13a:	bf 2e       	mov	r11, r31
     13c:	f0 2d       	mov	r31, r0
     13e:	a1 2c       	mov	r10, r1
     140:	e1 2c       	mov	r14, r1
     142:	99 24       	eor	r9, r9
     144:	93 94       	inc	r9
     146:	06 c0       	rjmp	.+12     	; 0x154 <sensorValueConversion+0x68>
     148:	cf 5f       	subi	r28, 0xFF	; 255
     14a:	df 5f       	subi	r29, 0xFF	; 255
     14c:	fa 94       	dec	r15
     14e:	fa 94       	dec	r15
     150:	01 50       	subi	r16, 0x01	; 1
     152:	11 09       	sbc	r17, r1
     154:	8c 2f       	mov	r24, r28
     156:	0e 94 61 00 	call	0xc2	; 0xc2 <adcRead>
     15a:	f6 01       	movw	r30, r12
     15c:	21 91       	ld	r18, Z+
     15e:	31 91       	ld	r19, Z+
     160:	6f 01       	movw	r12, r30
     162:	28 17       	cp	r18, r24
     164:	39 07       	cpc	r19, r25
     166:	c8 f5       	brcc	.+114    	; 0x1da <sensorValueConversion+0xee>
     168:	c5 30       	cpi	r28, 0x05	; 5
     16a:	19 f4       	brne	.+6      	; 0x172 <sensorValueConversion+0x86>
     16c:	90 92 73 01 	sts	0x0173, r9	; 0x800173 <leftFlag>
     170:	eb cf       	rjmp	.-42     	; 0x148 <sensorValueConversion+0x5c>
     172:	c6 30       	cpi	r28, 0x06	; 6
     174:	19 f4       	brne	.+6      	; 0x17c <sensorValueConversion+0x90>
     176:	90 92 74 01 	sts	0x0174, r9	; 0x800174 <rightFlag>
     17a:	e6 cf       	rjmp	.-52     	; 0x148 <sensorValueConversion+0x5c>
     17c:	c4 30       	cpi	r28, 0x04	; 4
     17e:	19 f4       	brne	.+6      	; 0x186 <sensorValueConversion+0x9a>
     180:	90 92 71 01 	sts	0x0171, r9	; 0x800171 <midFlag>
     184:	e1 cf       	rjmp	.-62     	; 0x148 <sensorValueConversion+0x5c>
     186:	c7 30       	cpi	r28, 0x07	; 7
     188:	a9 f4       	brne	.+42     	; 0x1b4 <sensorValueConversion+0xc8>
     18a:	f4 e0       	ldi	r31, 0x04	; 4
     18c:	fb 15       	cp	r31, r11
     18e:	38 f0       	brcs	.+14     	; 0x19e <sensorValueConversion+0xb2>
     190:	83 e0       	ldi	r24, 0x03	; 3
     192:	8a 15       	cp	r24, r10
     194:	38 f0       	brcs	.+14     	; 0x1a4 <sensorValueConversion+0xb8>
     196:	68 94       	set
     198:	aa 24       	eor	r10, r10
     19a:	a2 f8       	bld	r10, 2
     19c:	03 c0       	rjmp	.+6      	; 0x1a4 <sensorValueConversion+0xb8>
     19e:	68 94       	set
     1a0:	bb 24       	eor	r11, r11
     1a2:	b2 f8       	bld	r11, 2
     1a4:	e8 e0       	ldi	r30, 0x08	; 8
     1a6:	ee 0e       	add	r14, r30
     1a8:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <sensorCount>
     1ac:	8f 5f       	subi	r24, 0xFF	; 255
     1ae:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <sensorCount>
     1b2:	16 c0       	rjmp	.+44     	; 0x1e0 <sensorValueConversion+0xf4>
     1b4:	8b 2d       	mov	r24, r11
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	08 17       	cp	r16, r24
     1ba:	19 07       	cpc	r17, r25
     1bc:	14 f4       	brge	.+4      	; 0x1c2 <sensorValueConversion+0xd6>
     1be:	b0 2e       	mov	r11, r16
     1c0:	06 c0       	rjmp	.+12     	; 0x1ce <sensorValueConversion+0xe2>
     1c2:	8a 2d       	mov	r24, r10
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	80 17       	cp	r24, r16
     1c8:	91 07       	cpc	r25, r17
     1ca:	0c f4       	brge	.+2      	; 0x1ce <sensorValueConversion+0xe2>
     1cc:	a0 2e       	mov	r10, r16
     1ce:	ef 0c       	add	r14, r15
     1d0:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <sensorCount>
     1d4:	8f 5f       	subi	r24, 0xFF	; 255
     1d6:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <sensorCount>
     1da:	d8 30       	cpi	r29, 0x08	; 8
     1dc:	08 f4       	brcc	.+2      	; 0x1e0 <sensorValueConversion+0xf4>
     1de:	b4 cf       	rjmp	.-152    	; 0x148 <sensorValueConversion+0x5c>
     1e0:	20 91 77 01 	lds	r18, 0x0177	; 0x800177 <sensorCount>
     1e4:	42 2f       	mov	r20, r18
     1e6:	50 e0       	ldi	r21, 0x00	; 0
     1e8:	8a 2d       	mov	r24, r10
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	8b 19       	sub	r24, r11
     1ee:	91 09       	sbc	r25, r1
     1f0:	01 96       	adiw	r24, 0x01	; 1
     1f2:	48 17       	cp	r20, r24
     1f4:	59 07       	cpc	r21, r25
     1f6:	11 f5       	brne	.+68     	; 0x23c <sensorValueConversion+0x150>
     1f8:	f5 e0       	ldi	r31, 0x05	; 5
     1fa:	af 12       	cpse	r10, r31
     1fc:	06 c0       	rjmp	.+12     	; 0x20a <sensorValueConversion+0x11e>
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	8b 15       	cp	r24, r11
     202:	80 f4       	brcc	.+32     	; 0x224 <sensorValueConversion+0x138>
     204:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <rightAcuteFlag>
     208:	11 c0       	rjmp	.+34     	; 0x22c <sensorValueConversion+0x140>
     20a:	b1 10       	cpse	r11, r1
     20c:	0b c0       	rjmp	.+22     	; 0x224 <sensorValueConversion+0x138>
     20e:	e3 e0       	ldi	r30, 0x03	; 3
     210:	ea 15       	cp	r30, r10
     212:	40 f0       	brcs	.+16     	; 0x224 <sensorValueConversion+0x138>
     214:	81 e0       	ldi	r24, 0x01	; 1
     216:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <leftAcuteFlag>
     21a:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <rightAcuteFlag>
     21e:	81 30       	cpi	r24, 0x01	; 1
     220:	69 f4       	brne	.+26     	; 0x23c <sensorValueConversion+0x150>
     222:	08 c0       	rjmp	.+16     	; 0x234 <sensorValueConversion+0x148>
     224:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <rightAcuteFlag>
     228:	81 30       	cpi	r24, 0x01	; 1
     22a:	41 f4       	brne	.+16     	; 0x23c <sensorValueConversion+0x150>
     22c:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <leftAcuteFlag>
     230:	81 30       	cpi	r24, 0x01	; 1
     232:	21 f4       	brne	.+8      	; 0x23c <sensorValueConversion+0x150>
     234:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <rightAcuteFlag>
     238:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <leftAcuteFlag>
     23c:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <leftFlag>
     240:	81 30       	cpi	r24, 0x01	; 1
     242:	51 f4       	brne	.+20     	; 0x258 <sensorValueConversion+0x16c>
     244:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <rightFlag>
     248:	81 30       	cpi	r24, 0x01	; 1
     24a:	31 f4       	brne	.+12     	; 0x258 <sensorValueConversion+0x16c>
     24c:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <leftFlag>
     250:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <rightFlag>
     254:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <allFlag>
     258:	8e 2d       	mov	r24, r14
     25a:	62 2f       	mov	r22, r18
     25c:	0e 94 a8 07 	call	0xf50	; 0xf50 <__udivmodqi4>
     260:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <weightedValue>
     264:	21 11       	cpse	r18, r1
     266:	1a c0       	rjmp	.+52     	; 0x29c <sensorValueConversion+0x1b0>
     268:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <allFlag>
     26c:	81 11       	cpse	r24, r1
     26e:	16 c0       	rjmp	.+44     	; 0x29c <sensorValueConversion+0x1b0>
     270:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <midFlag>
     274:	81 11       	cpse	r24, r1
     276:	12 c0       	rjmp	.+36     	; 0x29c <sensorValueConversion+0x1b0>
     278:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <leftFlag>
     27c:	81 11       	cpse	r24, r1
     27e:	0e c0       	rjmp	.+28     	; 0x29c <sensorValueConversion+0x1b0>
     280:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <rightFlag>
     284:	81 11       	cpse	r24, r1
     286:	0a c0       	rjmp	.+20     	; 0x29c <sensorValueConversion+0x1b0>
     288:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <stopFlag>
     28c:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <stopFlag+0x1>
     290:	01 96       	adiw	r24, 0x01	; 1
     292:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <stopFlag+0x1>
     296:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <stopFlag>
     29a:	04 c0       	rjmp	.+8      	; 0x2a4 <sensorValueConversion+0x1b8>
     29c:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <stopFlag+0x1>
     2a0:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <stopFlag>
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	1f 91       	pop	r17
     2aa:	0f 91       	pop	r16
     2ac:	ff 90       	pop	r15
     2ae:	ef 90       	pop	r14
     2b0:	df 90       	pop	r13
     2b2:	cf 90       	pop	r12
     2b4:	bf 90       	pop	r11
     2b6:	af 90       	pop	r10
     2b8:	9f 90       	pop	r9
     2ba:	08 95       	ret

000002bc <setTimer>:
     2bc:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <duration+0x1>
     2c0:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <duration>
     2c4:	ee e6       	ldi	r30, 0x6E	; 110
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	80 81       	ld	r24, Z
     2ca:	82 60       	ori	r24, 0x02	; 2
     2cc:	80 83       	st	Z, r24
     2ce:	78 94       	sei
     2d0:	16 bc       	out	0x26, r1	; 38
     2d2:	8d e4       	ldi	r24, 0x4D	; 77
     2d4:	87 bd       	out	0x27, r24	; 39
     2d6:	84 b5       	in	r24, 0x24	; 36
     2d8:	82 60       	ori	r24, 0x02	; 2
     2da:	84 bd       	out	0x24, r24	; 36
     2dc:	85 b5       	in	r24, 0x25	; 37
     2de:	84 60       	ori	r24, 0x04	; 4
     2e0:	85 bd       	out	0x25, r24	; 37
     2e2:	08 95       	ret

000002e4 <timerOff>:
     2e4:	15 bc       	out	0x25, r1	; 37
     2e6:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
     2ea:	f8 94       	cli
     2ec:	16 bc       	out	0x26, r1	; 38
     2ee:	08 95       	ret

000002f0 <__vector_14>:
     2f0:	1f 92       	push	r1
     2f2:	0f 92       	push	r0
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	0f 92       	push	r0
     2f8:	11 24       	eor	r1, r1
     2fa:	2f 93       	push	r18
     2fc:	3f 93       	push	r19
     2fe:	8f 93       	push	r24
     300:	9f 93       	push	r25
     302:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
     306:	81 11       	cpse	r24, r1
     308:	1e c0       	rjmp	.+60     	; 0x346 <__vector_14+0x56>
     30a:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <timerOverflow>
     30e:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <timerOverflow+0x1>
     312:	01 96       	adiw	r24, 0x01	; 1
     314:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timerOverflow+0x1>
     318:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timerOverflow>
     31c:	16 bc       	out	0x26, r1	; 38
     31e:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <timerOverflow>
     322:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <timerOverflow+0x1>
     326:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <duration>
     32a:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <duration+0x1>
     32e:	28 17       	cp	r18, r24
     330:	39 07       	cpc	r19, r25
     332:	48 f0       	brcs	.+18     	; 0x346 <__vector_14+0x56>
     334:	15 bc       	out	0x25, r1	; 37
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <timerFlag>
     33c:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <timerOverflow+0x1>
     340:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <timerOverflow>
     344:	f8 94       	cli
     346:	9f 91       	pop	r25
     348:	8f 91       	pop	r24
     34a:	3f 91       	pop	r19
     34c:	2f 91       	pop	r18
     34e:	0f 90       	pop	r0
     350:	0f be       	out	0x3f, r0	; 63
     352:	0f 90       	pop	r0
     354:	1f 90       	pop	r1
     356:	18 95       	reti

00000358 <setRotationForward>:
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0e 94 b5 05 	call	0xb6a	; 0xb6a <PWM1A>
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	0e 94 ba 05 	call	0xb74	; 0xb74 <PWM1B>
     368:	5e 9a       	sbi	0x0b, 6	; 11
     36a:	5d 98       	cbi	0x0b, 5	; 11
     36c:	5f 9a       	sbi	0x0b, 7	; 11
     36e:	28 98       	cbi	0x05, 0	; 5
     370:	08 95       	ret

00000372 <PID_Correction>:
     372:	8f 92       	push	r8
     374:	9f 92       	push	r9
     376:	af 92       	push	r10
     378:	bf 92       	push	r11
     37a:	cf 92       	push	r12
     37c:	df 92       	push	r13
     37e:	ef 92       	push	r14
     380:	ff 92       	push	r15
     382:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <weightedValue>
     386:	70 e0       	ldi	r23, 0x00	; 0
     388:	64 50       	subi	r22, 0x04	; 4
     38a:	71 09       	sbc	r23, r1
     38c:	07 2e       	mov	r0, r23
     38e:	00 0c       	add	r0, r0
     390:	88 0b       	sbc	r24, r24
     392:	99 0b       	sbc	r25, r25
     394:	0e 94 af 06 	call	0xd5e	; 0xd5e <__floatsisf>
     398:	6b 01       	movw	r12, r22
     39a:	7c 01       	movw	r14, r24
     39c:	60 93 87 01 	sts	0x0187, r22	; 0x800187 <error>
     3a0:	70 93 88 01 	sts	0x0188, r23	; 0x800188 <error+0x1>
     3a4:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <error+0x2>
     3a8:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <error+0x3>
     3ac:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <prev_error>
     3b0:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <prev_error+0x1>
     3b4:	40 91 85 01 	lds	r20, 0x0185	; 0x800185 <prev_error+0x2>
     3b8:	50 91 86 01 	lds	r21, 0x0186	; 0x800186 <prev_error+0x3>
     3bc:	0e 94 0a 06 	call	0xc14	; 0xc14 <__subsf3>
     3c0:	4b 01       	movw	r8, r22
     3c2:	5c 01       	movw	r10, r24
     3c4:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <Kd>
     3c8:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <Kd+0x1>
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__floatunsisf>
     3d4:	9b 01       	movw	r18, r22
     3d6:	ac 01       	movw	r20, r24
     3d8:	c5 01       	movw	r24, r10
     3da:	b4 01       	movw	r22, r8
     3dc:	0e 94 3b 07 	call	0xe76	; 0xe76 <__mulsf3>
     3e0:	4b 01       	movw	r8, r22
     3e2:	5c 01       	movw	r10, r24
     3e4:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <Kp>
     3e8:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <Kp+0x1>
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__floatunsisf>
     3f4:	a7 01       	movw	r20, r14
     3f6:	96 01       	movw	r18, r12
     3f8:	0e 94 3b 07 	call	0xe76	; 0xe76 <__mulsf3>
     3fc:	9b 01       	movw	r18, r22
     3fe:	ac 01       	movw	r20, r24
     400:	c5 01       	movw	r24, r10
     402:	b4 01       	movw	r22, r8
     404:	0e 94 0b 06 	call	0xc16	; 0xc16 <__addsf3>
     408:	60 93 7f 01 	sts	0x017F, r22	; 0x80017f <correction>
     40c:	70 93 80 01 	sts	0x0180, r23	; 0x800180 <correction+0x1>
     410:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <correction+0x2>
     414:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <correction+0x3>
     418:	c0 92 83 01 	sts	0x0183, r12	; 0x800183 <prev_error>
     41c:	d0 92 84 01 	sts	0x0184, r13	; 0x800184 <prev_error+0x1>
     420:	e0 92 85 01 	sts	0x0185, r14	; 0x800185 <prev_error+0x2>
     424:	f0 92 86 01 	sts	0x0186, r15	; 0x800186 <prev_error+0x3>
     428:	0e 94 77 06 	call	0xcee	; 0xcee <__fixsfsi>
     42c:	70 93 7e 01 	sts	0x017E, r23	; 0x80017e <motorResponse+0x1>
     430:	60 93 7d 01 	sts	0x017D, r22	; 0x80017d <motorResponse>
     434:	0e 94 ac 01 	call	0x358	; 0x358 <setRotationForward>
     438:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <baseSpeed>
     43c:	28 2f       	mov	r18, r24
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <motorResponse>
     444:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <motorResponse+0x1>
     448:	a9 01       	movw	r20, r18
     44a:	48 1b       	sub	r20, r24
     44c:	59 0b       	sbc	r21, r25
     44e:	50 93 7a 01 	sts	0x017A, r21	; 0x80017a <RMspeed+0x1>
     452:	40 93 79 01 	sts	0x0179, r20	; 0x800179 <RMspeed>
     456:	82 0f       	add	r24, r18
     458:	93 1f       	adc	r25, r19
     45a:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <LMspeed+0x1>
     45e:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <LMspeed>
     462:	55 23       	and	r21, r21
     464:	2c f4       	brge	.+10     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     466:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <RMspeed+0x1>
     46a:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <RMspeed>
     46e:	0a c0       	rjmp	.+20     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     470:	4f 3f       	cpi	r20, 0xFF	; 255
     472:	51 05       	cpc	r21, r1
     474:	39 f0       	breq	.+14     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     476:	34 f0       	brlt	.+12     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     478:	2f ef       	ldi	r18, 0xFF	; 255
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	30 93 7a 01 	sts	0x017A, r19	; 0x80017a <RMspeed+0x1>
     480:	20 93 79 01 	sts	0x0179, r18	; 0x800179 <RMspeed>
     484:	99 23       	and	r25, r25
     486:	2c f4       	brge	.+10     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     488:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <LMspeed+0x1>
     48c:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <LMspeed>
     490:	0a c0       	rjmp	.+20     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     492:	8f 3f       	cpi	r24, 0xFF	; 255
     494:	91 05       	cpc	r25, r1
     496:	39 f0       	breq	.+14     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     498:	34 f0       	brlt	.+12     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     49a:	8f ef       	ldi	r24, 0xFF	; 255
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <LMspeed+0x1>
     4a2:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <LMspeed>
     4a6:	ff 90       	pop	r15
     4a8:	ef 90       	pop	r14
     4aa:	df 90       	pop	r13
     4ac:	cf 90       	pop	r12
     4ae:	bf 90       	pop	r11
     4b0:	af 90       	pop	r10
     4b2:	9f 90       	pop	r9
     4b4:	8f 90       	pop	r8
     4b6:	08 95       	ret

000004b8 <Forward>:
}

void Forward(void)
{
	enable1(0);
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	0e 94 b5 05 	call	0xb6a	; 0xb6a <PWM1A>
	enable2(0);
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	0e 94 ba 05 	call	0xb74	; 0xb74 <PWM1B>
	
	motor1a_PORT |= (1 << motor1a_PIN);
     4c8:	5e 9a       	sbi	0x0b, 6	; 11
	motor1b_PORT &= ~(1 << motor1b_PIN);
     4ca:	5d 98       	cbi	0x0b, 5	; 11
	motor2a_PORT |= (1 << motor2a_PIN);
     4cc:	5f 9a       	sbi	0x0b, 7	; 11
	motor2b_PORT &= ~(1 << motor2b_PIN);
     4ce:	28 98       	cbi	0x05, 0	; 5

	enable1(baseSpeed);
     4d0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <baseSpeed>
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	0e 94 b5 05 	call	0xb6a	; 0xb6a <PWM1A>
	enable2(baseSpeed);
     4da:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <baseSpeed>
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	0e 94 ba 05 	call	0xb74	; 0xb74 <PWM1B>
     4e4:	08 95       	ret

000004e6 <Backward>:
}

void Backward(void)
{
	enable1(0);
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	0e 94 b5 05 	call	0xb6a	; 0xb6a <PWM1A>
	enable2(0);
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 ba 05 	call	0xb74	; 0xb74 <PWM1B>
	
	motor1a_PORT &= ~(1 << motor1a_PIN);
     4f6:	5e 98       	cbi	0x0b, 6	; 11
	motor1b_PORT |= (1 << motor1b_PIN);
     4f8:	5d 9a       	sbi	0x0b, 5	; 11
	motor2a_PORT &= ~(1 << motor2a_PIN);
     4fa:	5f 98       	cbi	0x0b, 7	; 11
	motor2b_PORT |= (1 << motor2b_PIN);
     4fc:	28 9a       	sbi	0x05, 0	; 5

	enable1(130);
     4fe:	82 e8       	ldi	r24, 0x82	; 130
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 b5 05 	call	0xb6a	; 0xb6a <PWM1A>
	enable2(130);
     506:	82 e8       	ldi	r24, 0x82	; 130
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	0e 94 ba 05 	call	0xb74	; 0xb74 <PWM1B>
     50e:	08 95       	ret

00000510 <Stop>:

}

void Stop(void)
{
	Backward();
     510:	0e 94 73 02 	call	0x4e6	; 0x4e6 <Backward>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     514:	83 ef       	ldi	r24, 0xF3	; 243
     516:	91 e0       	ldi	r25, 0x01	; 1
     518:	01 97       	sbiw	r24, 0x01	; 1
     51a:	f1 f7       	brne	.-4      	; 0x518 <Stop+0x8>
     51c:	00 c0       	rjmp	.+0      	; 0x51e <Stop+0xe>
     51e:	00 00       	nop
	_delay_us(100);
	enable1(0);
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 b5 05 	call	0xb6a	; 0xb6a <PWM1A>
	enable2(0);
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	0e 94 ba 05 	call	0xb74	; 0xb74 <PWM1B>
	
	motor1a_PORT &= ~(1 << motor1a_PIN);
     530:	5e 98       	cbi	0x0b, 6	; 11
	motor1b_PORT &= ~(1 << motor1b_PIN);
     532:	5d 98       	cbi	0x0b, 5	; 11
	motor2a_PORT &= ~(1 << motor2a_PIN);
     534:	5f 98       	cbi	0x0b, 7	; 11
	motor2b_PORT &= ~(1 << motor2b_PIN);
     536:	28 98       	cbi	0x05, 0	; 5
     538:	08 95       	ret

0000053a <RightSharp>:
	enable1(130);
	enable2(130);
}

void RightSharp(uint8_t motorSpeed)
{
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	c8 2f       	mov	r28, r24
	enable1(0);
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 b5 05 	call	0xb6a	; 0xb6a <PWM1A>
	enable2(0);
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0e 94 ba 05 	call	0xb74	; 0xb74 <PWM1B>
	
	motor1a_PORT |= (1 << motor1a_PIN);
     550:	5e 9a       	sbi	0x0b, 6	; 11
	motor1b_PORT &= ~(1 << motor1b_PIN);
     552:	5d 98       	cbi	0x0b, 5	; 11
	motor2a_PORT &= ~(1 << motor2a_PIN);
     554:	5f 98       	cbi	0x0b, 7	; 11
	motor2b_PORT |= (1 << motor2b_PIN);
     556:	28 9a       	sbi	0x05, 0	; 5

	enable1(motorSpeed);
     558:	d0 e0       	ldi	r29, 0x00	; 0
     55a:	ce 01       	movw	r24, r28
     55c:	0e 94 b5 05 	call	0xb6a	; 0xb6a <PWM1A>
	enable2(motorSpeed);
     560:	ce 01       	movw	r24, r28
     562:	0e 94 ba 05 	call	0xb74	; 0xb74 <PWM1B>
}
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <autoCalibration>:
// 	OCR1A = timerlimit;
// 	TCCR1B |= (1 << CS12) | (1 << CS10);
// }

void autoCalibration(void)
{
     56c:	5f 92       	push	r5
     56e:	6f 92       	push	r6
     570:	7f 92       	push	r7
     572:	8f 92       	push	r8
     574:	9f 92       	push	r9
     576:	af 92       	push	r10
     578:	bf 92       	push	r11
     57a:	cf 92       	push	r12
     57c:	df 92       	push	r13
     57e:	ef 92       	push	r14
     580:	ff 92       	push	r15
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
	Forward();
     58a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <Forward>
	int currentValue = 0;
	setTimer(2000);
     58e:	80 ed       	ldi	r24, 0xD0	; 208
     590:	97 e0       	ldi	r25, 0x07	; 7
     592:	0e 94 5e 01 	call	0x2bc	; 0x2bc <setTimer>
	
	RightSharp(170);
     596:	8a ea       	ldi	r24, 0xAA	; 170
     598:	0e 94 9d 02 	call	0x53a	; 0x53a <RightSharp>
	while (timerFlag == 0)
     59c:	1d c0       	rjmp	.+58     	; 0x5d8 <autoCalibration+0x6c>
	{
		for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
		{
			currentValue = adcRead(sensorNumber);
     59e:	8c 2f       	mov	r24, r28
     5a0:	0e 94 61 00 	call	0xc2	; 0xc2 <adcRead>
			if(currentValue > SensorMaxValue[sensorNumber]) SensorMaxValue[sensorNumber] = currentValue;
     5a4:	28 2f       	mov	r18, r24
     5a6:	39 2f       	mov	r19, r25
     5a8:	f7 01       	movw	r30, r14
     5aa:	40 81       	ld	r20, Z
     5ac:	51 81       	ldd	r21, Z+1	; 0x01
     5ae:	42 17       	cp	r20, r18
     5b0:	53 07       	cpc	r21, r19
     5b2:	10 f4       	brcc	.+4      	; 0x5b8 <autoCalibration+0x4c>
     5b4:	80 83       	st	Z, r24
     5b6:	91 83       	std	Z+1, r25	; 0x01
			if(currentValue < SensorMinValue[sensorNumber]) SensorMinValue[sensorNumber] = currentValue;
     5b8:	f8 01       	movw	r30, r16
     5ba:	40 81       	ld	r20, Z
     5bc:	51 81       	ldd	r21, Z+1	; 0x01
     5be:	24 17       	cp	r18, r20
     5c0:	35 07       	cpc	r19, r21
     5c2:	10 f4       	brcc	.+4      	; 0x5c8 <autoCalibration+0x5c>
     5c4:	80 83       	st	Z, r24
     5c6:	91 83       	std	Z+1, r25	; 0x01
	setTimer(2000);
	
	RightSharp(170);
	while (timerFlag == 0)
	{
		for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
     5c8:	cf 5f       	subi	r28, 0xFF	; 255
     5ca:	f2 e0       	ldi	r31, 0x02	; 2
     5cc:	ef 0e       	add	r14, r31
     5ce:	f1 1c       	adc	r15, r1
     5d0:	0e 5f       	subi	r16, 0xFE	; 254
     5d2:	1f 4f       	sbci	r17, 0xFF	; 255
     5d4:	c8 30       	cpi	r28, 0x08	; 8
     5d6:	19 f7       	brne	.-58     	; 0x59e <autoCalibration+0x32>
	Forward();
	int currentValue = 0;
	setTimer(2000);
	
	RightSharp(170);
	while (timerFlag == 0)
     5d8:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <timerFlag>
     5dc:	81 11       	cpse	r24, r1
     5de:	0a c0       	rjmp	.+20     	; 0x5f4 <autoCalibration+0x88>
     5e0:	0f 2e       	mov	r0, r31
     5e2:	f0 e9       	ldi	r31, 0x90	; 144
     5e4:	ef 2e       	mov	r14, r31
     5e6:	f1 e0       	ldi	r31, 0x01	; 1
     5e8:	ff 2e       	mov	r15, r31
     5ea:	f0 2d       	mov	r31, r0
     5ec:	05 e0       	ldi	r16, 0x05	; 5
     5ee:	11 e0       	ldi	r17, 0x01	; 1
     5f0:	c0 e0       	ldi	r28, 0x00	; 0
     5f2:	d5 cf       	rjmp	.-86     	; 0x59e <autoCalibration+0x32>
			currentValue = adcRead(sensorNumber);
			if(currentValue > SensorMaxValue[sensorNumber]) SensorMaxValue[sensorNumber] = currentValue;
			if(currentValue < SensorMinValue[sensorNumber]) SensorMinValue[sensorNumber] = currentValue;
		}
	}
	timerFlag = 0;
     5f4:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <timerFlag>
	timerOff();
     5f8:	0e 94 72 01 	call	0x2e4	; 0x2e4 <timerOff>
	Stop();
     5fc:	0e 94 88 02 	call	0x510	; 0x510 <Stop>
	Serial_sendString("MAX\t");
     600:	88 e4       	ldi	r24, 0x48	; 72
     602:	91 e0       	ldi	r25, 0x01	; 1
     604:	0e 94 d7 05 	call	0xbae	; 0xbae <Serial_sendString>
     608:	00 e9       	ldi	r16, 0x90	; 144
     60a:	11 e0       	ldi	r17, 0x01	; 1
     60c:	c0 ea       	ldi	r28, 0xA0	; 160
     60e:	d1 e0       	ldi	r29, 0x01	; 1
     610:	78 01       	movw	r14, r16
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
	{
		Serial_sendInt(SensorMaxValue[sensorNumber], DEC);
     612:	6a e0       	ldi	r22, 0x0A	; 10
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	f7 01       	movw	r30, r14
     618:	81 91       	ld	r24, Z+
     61a:	91 91       	ld	r25, Z+
     61c:	7f 01       	movw	r14, r30
     61e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Serial_sendInt>
		Serial_sendChar('\t');
     622:	89 e0       	ldi	r24, 0x09	; 9
     624:	0e 94 cf 05 	call	0xb9e	; 0xb9e <Serial_sendChar>
	}
	timerFlag = 0;
	timerOff();
	Stop();
	Serial_sendString("MAX\t");
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
     628:	ec 16       	cp	r14, r28
     62a:	fd 06       	cpc	r15, r29
     62c:	91 f7       	brne	.-28     	; 0x612 <autoCalibration+0xa6>
	{
		Serial_sendInt(SensorMaxValue[sensorNumber], DEC);
		Serial_sendChar('\t');
	}
	Serial_sendChar('\n');
     62e:	8a e0       	ldi	r24, 0x0A	; 10
     630:	0e 94 cf 05 	call	0xb9e	; 0xb9e <Serial_sendChar>
	
	Serial_sendString("MIN\t");
     634:	8d e4       	ldi	r24, 0x4D	; 77
     636:	91 e0       	ldi	r25, 0x01	; 1
     638:	0e 94 d7 05 	call	0xbae	; 0xbae <Serial_sendString>
     63c:	0f 2e       	mov	r0, r31
     63e:	f5 e0       	ldi	r31, 0x05	; 5
     640:	6f 2e       	mov	r6, r31
     642:	f1 e0       	ldi	r31, 0x01	; 1
     644:	7f 2e       	mov	r7, r31
     646:	f0 2d       	mov	r31, r0
     648:	0f 2e       	mov	r0, r31
     64a:	f5 e1       	ldi	r31, 0x15	; 21
     64c:	cf 2e       	mov	r12, r31
     64e:	f1 e0       	ldi	r31, 0x01	; 1
     650:	df 2e       	mov	r13, r31
     652:	f0 2d       	mov	r31, r0
     654:	73 01       	movw	r14, r6
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
	{
		Serial_sendInt(SensorMinValue[sensorNumber], DEC);
     656:	6a e0       	ldi	r22, 0x0A	; 10
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	f7 01       	movw	r30, r14
     65c:	81 91       	ld	r24, Z+
     65e:	91 91       	ld	r25, Z+
     660:	7f 01       	movw	r14, r30
     662:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Serial_sendInt>
		Serial_sendChar('\t');
     666:	89 e0       	ldi	r24, 0x09	; 9
     668:	0e 94 cf 05 	call	0xb9e	; 0xb9e <Serial_sendChar>
		Serial_sendChar('\t');
	}
	Serial_sendChar('\n');
	
	Serial_sendString("MIN\t");
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
     66c:	ec 14       	cp	r14, r12
     66e:	fd 04       	cpc	r15, r13
     670:	91 f7       	brne	.-28     	; 0x656 <autoCalibration+0xea>
	{
		Serial_sendInt(SensorMinValue[sensorNumber], DEC);
		Serial_sendChar('\t');
	}
	Serial_sendChar('\n');
     672:	8a e0       	ldi	r24, 0x0A	; 10
     674:	0e 94 cf 05 	call	0xb9e	; 0xb9e <Serial_sendChar>
	
	Serial_sendString("THR\t");
     678:	82 e5       	ldi	r24, 0x52	; 82
     67a:	91 e0       	ldi	r25, 0x01	; 1
     67c:	0e 94 d7 05 	call	0xbae	; 0xbae <Serial_sendString>
     680:	0f 2e       	mov	r0, r31
     682:	f5 e3       	ldi	r31, 0x35	; 53
     684:	ef 2e       	mov	r14, r31
     686:	f1 e0       	ldi	r31, 0x01	; 1
     688:	ff 2e       	mov	r15, r31
     68a:	f0 2d       	mov	r31, r0
     68c:	47 01       	movw	r8, r14
     68e:	0f 2e       	mov	r0, r31
     690:	f5 e0       	ldi	r31, 0x05	; 5
     692:	af 2e       	mov	r10, r31
     694:	f1 e0       	ldi	r31, 0x01	; 1
     696:	bf 2e       	mov	r11, r31
     698:	f0 2d       	mov	r31, r0
     69a:	0f 2e       	mov	r0, r31
     69c:	f0 e9       	ldi	r31, 0x90	; 144
     69e:	cf 2e       	mov	r12, r31
     6a0:	f1 e0       	ldi	r31, 0x01	; 1
     6a2:	df 2e       	mov	r13, r31
     6a4:	f0 2d       	mov	r31, r0
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
	{
		threshold[sensorNumber] = SensorMinValue[sensorNumber] + (SensorMaxValue[sensorNumber] - SensorMinValue[sensorNumber]) * 2 / 3;
     6a6:	f6 01       	movw	r30, r12
     6a8:	21 91       	ld	r18, Z+
     6aa:	31 91       	ld	r19, Z+
     6ac:	6f 01       	movw	r12, r30
     6ae:	f5 01       	movw	r30, r10
     6b0:	41 91       	ld	r20, Z+
     6b2:	51 91       	ld	r21, Z+
     6b4:	5f 01       	movw	r10, r30
     6b6:	24 1b       	sub	r18, r20
     6b8:	35 0b       	sbc	r19, r21
     6ba:	22 0f       	add	r18, r18
     6bc:	33 1f       	adc	r19, r19
     6be:	ab ea       	ldi	r26, 0xAB	; 171
     6c0:	ba ea       	ldi	r27, 0xAA	; 170
     6c2:	0e 94 c8 07 	call	0xf90	; 0xf90 <__umulhisi3>
     6c6:	96 95       	lsr	r25
     6c8:	87 95       	ror	r24
     6ca:	84 0f       	add	r24, r20
     6cc:	95 1f       	adc	r25, r21
     6ce:	f4 01       	movw	r30, r8
     6d0:	81 93       	st	Z+, r24
     6d2:	91 93       	st	Z+, r25
     6d4:	4f 01       	movw	r8, r30
		Serial_sendInt(threshold[sensorNumber], DEC);
     6d6:	6a e0       	ldi	r22, 0x0A	; 10
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Serial_sendInt>
		Serial_sendChar('\t');
     6de:	89 e0       	ldi	r24, 0x09	; 9
     6e0:	0e 94 cf 05 	call	0xb9e	; 0xb9e <Serial_sendChar>
		Serial_sendChar('\t');
	}
	Serial_sendChar('\n');
	
	Serial_sendString("THR\t");
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
     6e4:	cc 16       	cp	r12, r28
     6e6:	dd 06       	cpc	r13, r29
     6e8:	f1 f6       	brne	.-68     	; 0x6a6 <autoCalibration+0x13a>
	{
		threshold[sensorNumber] = SensorMinValue[sensorNumber] + (SensorMaxValue[sensorNumber] - SensorMinValue[sensorNumber]) * 2 / 3;
		Serial_sendInt(threshold[sensorNumber], DEC);
		Serial_sendChar('\t');
	}
	Serial_sendChar('\n');
     6ea:	8a e0       	ldi	r24, 0x0A	; 10
     6ec:	0e 94 cf 05 	call	0xb9e	; 0xb9e <Serial_sendChar>
	
	Serial_sendString("UTH\t");
     6f0:	87 e5       	ldi	r24, 0x57	; 87
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	0e 94 d7 05 	call	0xbae	; 0xbae <Serial_sendString>
     6f8:	0f 2e       	mov	r0, r31
     6fa:	f5 e2       	ldi	r31, 0x25	; 37
     6fc:	8f 2e       	mov	r8, r31
     6fe:	f1 e0       	ldi	r31, 0x01	; 1
     700:	9f 2e       	mov	r9, r31
     702:	f0 2d       	mov	r31, r0
     704:	0f 2e       	mov	r0, r31
     706:	f5 e3       	ldi	r31, 0x35	; 53
     708:	af 2e       	mov	r10, r31
     70a:	f1 e0       	ldi	r31, 0x01	; 1
     70c:	bf 2e       	mov	r11, r31
     70e:	f0 2d       	mov	r31, r0
     710:	0f 2e       	mov	r0, r31
     712:	f0 e9       	ldi	r31, 0x90	; 144
     714:	cf 2e       	mov	r12, r31
     716:	f1 e0       	ldi	r31, 0x01	; 1
     718:	df 2e       	mov	r13, r31
     71a:	f0 2d       	mov	r31, r0
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
	{
		upperThreshold[sensorNumber] = threshold[sensorNumber] + ((SensorMaxValue[sensorNumber] - threshold[sensorNumber]) * 30 / 100); 
     71c:	0f 2e       	mov	r0, r31
     71e:	fe e1       	ldi	r31, 0x1E	; 30
     720:	5f 2e       	mov	r5, r31
     722:	f0 2d       	mov	r31, r0
     724:	f6 01       	movw	r30, r12
     726:	81 91       	ld	r24, Z+
     728:	91 91       	ld	r25, Z+
     72a:	6f 01       	movw	r12, r30
     72c:	f5 01       	movw	r30, r10
     72e:	41 91       	ld	r20, Z+
     730:	51 91       	ld	r21, Z+
     732:	5f 01       	movw	r10, r30
     734:	84 1b       	sub	r24, r20
     736:	95 0b       	sbc	r25, r21
     738:	58 9e       	mul	r5, r24
     73a:	90 01       	movw	r18, r0
     73c:	59 9e       	mul	r5, r25
     73e:	30 0d       	add	r19, r0
     740:	11 24       	eor	r1, r1
     742:	36 95       	lsr	r19
     744:	27 95       	ror	r18
     746:	36 95       	lsr	r19
     748:	27 95       	ror	r18
     74a:	ab e7       	ldi	r26, 0x7B	; 123
     74c:	b4 e1       	ldi	r27, 0x14	; 20
     74e:	0e 94 c8 07 	call	0xf90	; 0xf90 <__umulhisi3>
     752:	96 95       	lsr	r25
     754:	87 95       	ror	r24
     756:	84 0f       	add	r24, r20
     758:	95 1f       	adc	r25, r21
     75a:	f4 01       	movw	r30, r8
     75c:	81 93       	st	Z+, r24
     75e:	91 93       	st	Z+, r25
     760:	4f 01       	movw	r8, r30
		Serial_sendInt(upperThreshold[sensorNumber], DEC);
     762:	6a e0       	ldi	r22, 0x0A	; 10
     764:	70 e0       	ldi	r23, 0x00	; 0
     766:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Serial_sendInt>
		Serial_sendChar('\t');
     76a:	89 e0       	ldi	r24, 0x09	; 9
     76c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <Serial_sendChar>
		Serial_sendChar('\t');
	}
	Serial_sendChar('\n');
	
	Serial_sendString("UTH\t");
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
     770:	cc 16       	cp	r12, r28
     772:	dd 06       	cpc	r13, r29
     774:	b9 f6       	brne	.-82     	; 0x724 <autoCalibration+0x1b8>
	{
		upperThreshold[sensorNumber] = threshold[sensorNumber] + ((SensorMaxValue[sensorNumber] - threshold[sensorNumber]) * 30 / 100); 
		Serial_sendInt(upperThreshold[sensorNumber], DEC);
		Serial_sendChar('\t');
	}
	Serial_sendChar('\n');
     776:	8a e0       	ldi	r24, 0x0A	; 10
     778:	0e 94 cf 05 	call	0xb9e	; 0xb9e <Serial_sendChar>
	
	Serial_sendString("LTH\t");
     77c:	8c e5       	ldi	r24, 0x5C	; 92
     77e:	91 e0       	ldi	r25, 0x01	; 1
     780:	0e 94 d7 05 	call	0xbae	; 0xbae <Serial_sendString>
     784:	0f 2e       	mov	r0, r31
     786:	f5 e1       	ldi	r31, 0x15	; 21
     788:	af 2e       	mov	r10, r31
     78a:	f1 e0       	ldi	r31, 0x01	; 1
     78c:	bf 2e       	mov	r11, r31
     78e:	f0 2d       	mov	r31, r0
     790:	0f 2e       	mov	r0, r31
     792:	f5 e4       	ldi	r31, 0x45	; 69
     794:	8f 2e       	mov	r8, r31
     796:	f1 e0       	ldi	r31, 0x01	; 1
     798:	9f 2e       	mov	r9, r31
     79a:	f0 2d       	mov	r31, r0
     79c:	0f 2e       	mov	r0, r31
     79e:	f5 e0       	ldi	r31, 0x05	; 5
     7a0:	cf 2e       	mov	r12, r31
     7a2:	f1 e0       	ldi	r31, 0x01	; 1
     7a4:	df 2e       	mov	r13, r31
     7a6:	f0 2d       	mov	r31, r0
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
	{
		lowerThreshold[sensorNumber] = threshold[sensorNumber] - ((threshold[sensorNumber] - SensorMinValue[sensorNumber]) * 30 / 100);
     7a8:	0f 2e       	mov	r0, r31
     7aa:	fe e1       	ldi	r31, 0x1E	; 30
     7ac:	5f 2e       	mov	r5, r31
     7ae:	f0 2d       	mov	r31, r0
     7b0:	f7 01       	movw	r30, r14
     7b2:	41 91       	ld	r20, Z+
     7b4:	51 91       	ld	r21, Z+
     7b6:	7f 01       	movw	r14, r30
     7b8:	f6 01       	movw	r30, r12
     7ba:	81 91       	ld	r24, Z+
     7bc:	91 91       	ld	r25, Z+
     7be:	6f 01       	movw	r12, r30
     7c0:	9a 01       	movw	r18, r20
     7c2:	28 1b       	sub	r18, r24
     7c4:	39 0b       	sbc	r19, r25
     7c6:	c9 01       	movw	r24, r18
     7c8:	58 9e       	mul	r5, r24
     7ca:	90 01       	movw	r18, r0
     7cc:	59 9e       	mul	r5, r25
     7ce:	30 0d       	add	r19, r0
     7d0:	11 24       	eor	r1, r1
     7d2:	36 95       	lsr	r19
     7d4:	27 95       	ror	r18
     7d6:	36 95       	lsr	r19
     7d8:	27 95       	ror	r18
     7da:	ab e7       	ldi	r26, 0x7B	; 123
     7dc:	b4 e1       	ldi	r27, 0x14	; 20
     7de:	0e 94 c8 07 	call	0xf90	; 0xf90 <__umulhisi3>
     7e2:	96 95       	lsr	r25
     7e4:	87 95       	ror	r24
     7e6:	fa 01       	movw	r30, r20
     7e8:	e8 1b       	sub	r30, r24
     7ea:	f9 0b       	sbc	r31, r25
     7ec:	cf 01       	movw	r24, r30
     7ee:	f5 01       	movw	r30, r10
     7f0:	81 93       	st	Z+, r24
     7f2:	91 93       	st	Z+, r25
     7f4:	5f 01       	movw	r10, r30
		Serial_sendInt(lowerThreshold[sensorNumber], DEC);
     7f6:	6a e0       	ldi	r22, 0x0A	; 10
     7f8:	70 e0       	ldi	r23, 0x00	; 0
     7fa:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Serial_sendInt>
		Serial_sendChar('\t');
     7fe:	89 e0       	ldi	r24, 0x09	; 9
     800:	0e 94 cf 05 	call	0xb9e	; 0xb9e <Serial_sendChar>
		Serial_sendChar('\t');
	}
	Serial_sendChar('\n');
	
	Serial_sendString("LTH\t");
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
     804:	8e 14       	cp	r8, r14
     806:	9f 04       	cpc	r9, r15
     808:	99 f6       	brne	.-90     	; 0x7b0 <autoCalibration+0x244>
	{
		lowerThreshold[sensorNumber] = threshold[sensorNumber] - ((threshold[sensorNumber] - SensorMinValue[sensorNumber]) * 30 / 100);
		Serial_sendInt(lowerThreshold[sensorNumber], DEC);
		Serial_sendChar('\t');
	}
	Serial_sendChar('\n');
     80a:	8a e0       	ldi	r24, 0x0A	; 10
     80c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <Serial_sendChar>
		
	Serial_sendString("PRO\t");
     810:	81 e6       	ldi	r24, 0x61	; 97
     812:	91 e0       	ldi	r25, 0x01	; 1
     814:	0e 94 d7 05 	call	0xbae	; 0xbae <Serial_sendString>
     818:	0f 2e       	mov	r0, r31
     81a:	f0 ea       	ldi	r31, 0xA0	; 160
     81c:	ef 2e       	mov	r14, r31
     81e:	f1 e0       	ldi	r31, 0x01	; 1
     820:	ff 2e       	mov	r15, r31
     822:	f0 2d       	mov	r31, r0
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
	{
		proportionality[sensorNumber] = 20000 / (SensorMaxValue[sensorNumber] - SensorMinValue[sensorNumber]);
     824:	0f 2e       	mov	r0, r31
     826:	f0 e2       	ldi	r31, 0x20	; 32
     828:	cf 2e       	mov	r12, r31
     82a:	fe e4       	ldi	r31, 0x4E	; 78
     82c:	df 2e       	mov	r13, r31
     82e:	f0 2d       	mov	r31, r0
     830:	f8 01       	movw	r30, r16
     832:	61 91       	ld	r22, Z+
     834:	71 91       	ld	r23, Z+
     836:	8f 01       	movw	r16, r30
     838:	f3 01       	movw	r30, r6
     83a:	81 91       	ld	r24, Z+
     83c:	91 91       	ld	r25, Z+
     83e:	3f 01       	movw	r6, r30
     840:	68 1b       	sub	r22, r24
     842:	79 0b       	sbc	r23, r25
     844:	c6 01       	movw	r24, r12
     846:	0e 94 b4 07 	call	0xf68	; 0xf68 <__udivmodhi4>
     84a:	cb 01       	movw	r24, r22
     84c:	f7 01       	movw	r30, r14
     84e:	61 93       	st	Z+, r22
     850:	71 93       	st	Z+, r23
     852:	7f 01       	movw	r14, r30
		Serial_sendInt(proportionality[sensorNumber], DEC);
     854:	6a e0       	ldi	r22, 0x0A	; 10
     856:	70 e0       	ldi	r23, 0x00	; 0
     858:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Serial_sendInt>
		Serial_sendChar('\t');
     85c:	89 e0       	ldi	r24, 0x09	; 9
     85e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <Serial_sendChar>
		Serial_sendChar('\t');
	}
	Serial_sendChar('\n');
		
	Serial_sendString("PRO\t");
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
     862:	0c 17       	cp	r16, r28
     864:	1d 07       	cpc	r17, r29
     866:	21 f7       	brne	.-56     	; 0x830 <autoCalibration+0x2c4>
	{
		proportionality[sensorNumber] = 20000 / (SensorMaxValue[sensorNumber] - SensorMinValue[sensorNumber]);
		Serial_sendInt(proportionality[sensorNumber], DEC);
		Serial_sendChar('\t');
	}
	Serial_sendString("\n\n\n\n\n\n");
     868:	86 e6       	ldi	r24, 0x66	; 102
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	0e 94 d7 05 	call	0xbae	; 0xbae <Serial_sendString>
	
	
}
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	ff 90       	pop	r15
     87a:	ef 90       	pop	r14
     87c:	df 90       	pop	r13
     87e:	cf 90       	pop	r12
     880:	bf 90       	pop	r11
     882:	af 90       	pop	r10
     884:	9f 90       	pop	r9
     886:	8f 90       	pop	r8
     888:	7f 90       	pop	r7
     88a:	6f 90       	pop	r6
     88c:	5f 90       	pop	r5
     88e:	08 95       	ret

00000890 <LeftSharp>:
	enable1(motorSpeed);
	enable2(motorSpeed);
}

void LeftSharp(uint8_t motorSpeed)
{
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	c8 2f       	mov	r28, r24
	enable1(0);
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	0e 94 b5 05 	call	0xb6a	; 0xb6a <PWM1A>
	enable2(0);
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	0e 94 ba 05 	call	0xb74	; 0xb74 <PWM1B>
	
	motor1a_PORT &= ~(1 << motor1a_PIN);
     8a6:	5e 98       	cbi	0x0b, 6	; 11
	motor1b_PORT |= (1 << motor1b_PIN);
     8a8:	5d 9a       	sbi	0x0b, 5	; 11
	motor2a_PORT |= (1 << motor2a_PIN);
     8aa:	5f 9a       	sbi	0x0b, 7	; 11
	motor2b_PORT &= ~(1 << motor2b_PIN);
     8ac:	28 98       	cbi	0x05, 0	; 5

	enable1(motorSpeed);
     8ae:	d0 e0       	ldi	r29, 0x00	; 0
     8b0:	ce 01       	movw	r24, r28
     8b2:	0e 94 b5 05 	call	0xb6a	; 0xb6a <PWM1A>
	enable2(motorSpeed);
     8b6:	ce 01       	movw	r24, r28
     8b8:	0e 94 ba 05 	call	0xb74	; 0xb74 <PWM1B>
}
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	08 95       	ret

000008c2 <main>:


int main(void)
{
	// Input-Output settings
	motor1a_DDR |= (1 << motor1a_PIN);
     8c2:	56 9a       	sbi	0x0a, 6	; 10
	motor1b_DDR |= (1 << motor1b_PIN);
     8c4:	55 9a       	sbi	0x0a, 5	; 10
	motor2a_DDR |= (1 << motor2a_PIN);
     8c6:	57 9a       	sbi	0x0a, 7	; 10
	motor2b_DDR |= (1 << motor2b_PIN);
     8c8:	20 9a       	sbi	0x04, 0	; 4
	enable1_DDR |= (1 << enable1_PIN);
     8ca:	21 9a       	sbi	0x04, 1	; 4
	enable2_DDR |= (1 << enable2_PIN);	
     8cc:	22 9a       	sbi	0x04, 2	; 4
	
	DDRB |= (1 << PB3);
     8ce:	23 9a       	sbi	0x04, 3	; 4
	// Initializations	
	
	adc_init();
     8d0:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_init>
	UART_init();
     8d4:	0e 94 bf 05 	call	0xb7e	; 0xb7e <UART_init>
	PWM1_init();
     8d8:	0e 94 a4 05 	call	0xb48	; 0xb48 <PWM1_init>
	setRotationForward();
     8dc:	0e 94 ac 01 	call	0x358	; 0x358 <setRotationForward>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8e0:	2f ef       	ldi	r18, 0xFF	; 255
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	9d e3       	ldi	r25, 0x3D	; 61
     8e6:	21 50       	subi	r18, 0x01	; 1
     8e8:	80 40       	sbci	r24, 0x00	; 0
     8ea:	90 40       	sbci	r25, 0x00	; 0
     8ec:	e1 f7       	brne	.-8      	; 0x8e6 <main+0x24>
     8ee:	00 c0       	rjmp	.+0      	; 0x8f0 <main+0x2e>
     8f0:	00 00       	nop
	
	
	_delay_ms(1000);
	autoCalibration();
     8f2:	0e 94 b6 02 	call	0x56c	; 0x56c <autoCalibration>
     8f6:	2f ef       	ldi	r18, 0xFF	; 255
     8f8:	88 e0       	ldi	r24, 0x08	; 8
     8fa:	9d e3       	ldi	r25, 0x3D	; 61
     8fc:	21 50       	subi	r18, 0x01	; 1
     8fe:	80 40       	sbci	r24, 0x00	; 0
     900:	90 40       	sbci	r25, 0x00	; 0
     902:	e1 f7       	brne	.-8      	; 0x8fc <main+0x3a>
     904:	00 c0       	rjmp	.+0      	; 0x906 <__stack+0x7>
     906:	00 00       	nop
	_delay_ms(1000);

	Stop();
     908:	0e 94 88 02 	call	0x510	; 0x510 <Stop>
	speedFlag = 1;
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <__data_end>
// 		enable1(120);
// 		enable2(110);
// 	}


		sensorValueConversion();
     912:	0e 94 76 00 	call	0xec	; 0xec <sensorValueConversion>
// 			
// 				while (sensorCount == 0 || weightedValue > 7 || weightedValue < 4)	sensorValueConversion();
// // 			}			
// 		}
// 
		if (stopFlag > 120)
     916:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <stopFlag>
     91a:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <stopFlag+0x1>
     91e:	89 37       	cpi	r24, 0x79	; 121
     920:	91 05       	cpc	r25, r1
     922:	0c f1       	brlt	.+66     	; 0x966 <__stack+0x67>
		{
			RightSharp(80);
     924:	80 e5       	ldi	r24, 0x50	; 80
     926:	0e 94 9d 02 	call	0x53a	; 0x53a <RightSharp>
     92a:	2f ef       	ldi	r18, 0xFF	; 255
     92c:	88 e0       	ldi	r24, 0x08	; 8
     92e:	9d e3       	ldi	r25, 0x3D	; 61
     930:	21 50       	subi	r18, 0x01	; 1
     932:	80 40       	sbci	r24, 0x00	; 0
     934:	90 40       	sbci	r25, 0x00	; 0
     936:	e1 f7       	brne	.-8      	; 0x930 <__stack+0x31>
     938:	00 c0       	rjmp	.+0      	; 0x93a <__stack+0x3b>
     93a:	00 00       	nop
			_delay_ms(1000);
			
			while (rightFlag == 0) sensorValueConversion();
     93c:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <rightFlag>
     940:	81 11       	cpse	r24, r1
     942:	09 c0       	rjmp	.+18     	; 0x956 <__stack+0x57>
     944:	0e 94 76 00 	call	0xec	; 0xec <sensorValueConversion>
     948:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <rightFlag>
     94c:	88 23       	and	r24, r24
     94e:	d1 f3       	breq	.-12     	; 0x944 <__stack+0x45>
     950:	02 c0       	rjmp	.+4      	; 0x956 <__stack+0x57>
			
			while (sensorCount == 0 || weightedValue == 4) sensorValueConversion();
     952:	0e 94 76 00 	call	0xec	; 0xec <sensorValueConversion>
     956:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <sensorCount>
     95a:	88 23       	and	r24, r24
     95c:	d1 f3       	breq	.-12     	; 0x952 <__stack+0x53>
     95e:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <weightedValue>
     962:	84 30       	cpi	r24, 0x04	; 4
     964:	b1 f3       	breq	.-20     	; 0x952 <__stack+0x53>
		}
	
	
		if (leftFlag == 1 && weightedValue < 6 && weightedValue > 2)
     966:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <leftFlag>
     96a:	81 30       	cpi	r24, 0x01	; 1
     96c:	09 f0       	breq	.+2      	; 0x970 <__stack+0x71>
     96e:	44 c0       	rjmp	.+136    	; 0x9f8 <__stack+0xf9>
     970:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <weightedValue>
     974:	83 50       	subi	r24, 0x03	; 3
     976:	83 30       	cpi	r24, 0x03	; 3
     978:	08 f0       	brcs	.+2      	; 0x97c <__stack+0x7d>
     97a:	3e c0       	rjmp	.+124    	; 0x9f8 <__stack+0xf9>
		{
			Backward();
     97c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <Backward>
     980:	8f e4       	ldi	r24, 0x4F	; 79
     982:	93 ec       	ldi	r25, 0xC3	; 195
     984:	01 97       	sbiw	r24, 0x01	; 1
     986:	f1 f7       	brne	.-4      	; 0x984 <__stack+0x85>
     988:	00 c0       	rjmp	.+0      	; 0x98a <__stack+0x8b>
     98a:	00 00       	nop
			_delay_ms(10);
			Forward();
     98c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <Forward>
			while (leftFlag == 1)
     990:	0b c0       	rjmp	.+22     	; 0x9a8 <__stack+0xa9>
			{
				sensorValueConversion();
     992:	0e 94 76 00 	call	0xec	; 0xec <sensorValueConversion>
				if (allFlag == 1 || rightFlag == 1) break;
     996:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <allFlag>
     99a:	81 30       	cpi	r24, 0x01	; 1
     99c:	69 f1       	breq	.+90     	; 0x9f8 <__stack+0xf9>
     99e:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <rightFlag>
     9a2:	81 30       	cpi	r24, 0x01	; 1
     9a4:	09 f4       	brne	.+2      	; 0x9a8 <__stack+0xa9>
     9a6:	c0 c0       	rjmp	.+384    	; 0xb28 <__stack+0x229>
		if (leftFlag == 1 && weightedValue < 6 && weightedValue > 2)
		{
			Backward();
			_delay_ms(10);
			Forward();
			while (leftFlag == 1)
     9a8:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <leftFlag>
     9ac:	81 30       	cpi	r24, 0x01	; 1
     9ae:	89 f3       	breq	.-30     	; 0x992 <__stack+0x93>
			}
			
// 			_delay_ms(20);
// 			sensorValueConversion();

			if (allFlag == 0 && rightFlag == 0 && midFlag == 0)
     9b0:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <allFlag>
     9b4:	81 11       	cpse	r24, r1
     9b6:	20 c0       	rjmp	.+64     	; 0x9f8 <__stack+0xf9>
     9b8:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <rightFlag>
     9bc:	81 11       	cpse	r24, r1
     9be:	ae c0       	rjmp	.+348    	; 0xb1c <__stack+0x21d>
     9c0:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <midFlag>
     9c4:	81 11       	cpse	r24, r1
     9c6:	95 c0       	rjmp	.+298    	; 0xaf2 <__stack+0x1f3>
			{
				LeftSharp(80);
     9c8:	80 e5       	ldi	r24, 0x50	; 80
     9ca:	0e 94 48 04 	call	0x890	; 0x890 <LeftSharp>
				//				_delay_ms(100);
				
				while (leftFlag == 0) sensorValueConversion();
     9ce:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <leftFlag>
     9d2:	81 11       	cpse	r24, r1
     9d4:	09 c0       	rjmp	.+18     	; 0x9e8 <__stack+0xe9>
     9d6:	0e 94 76 00 	call	0xec	; 0xec <sensorValueConversion>
     9da:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <leftFlag>
     9de:	88 23       	and	r24, r24
     9e0:	d1 f3       	breq	.-12     	; 0x9d6 <__stack+0xd7>
     9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <__stack+0xe9>
				
				while (sensorCount == 0 || weightedValue == 4) sensorValueConversion();
     9e4:	0e 94 76 00 	call	0xec	; 0xec <sensorValueConversion>
     9e8:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <sensorCount>
     9ec:	88 23       	and	r24, r24
     9ee:	d1 f3       	breq	.-12     	; 0x9e4 <__stack+0xe5>
     9f0:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <weightedValue>
     9f4:	84 30       	cpi	r24, 0x04	; 4
     9f6:	b1 f3       	breq	.-20     	; 0x9e4 <__stack+0xe5>
// 				baseSpeed = 120;

			}
		}

		if (rightFlag == 1 && weightedValue < 6 && weightedValue > 2)
     9f8:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <rightFlag>
     9fc:	81 30       	cpi	r24, 0x01	; 1
     9fe:	09 f0       	breq	.+2      	; 0xa02 <__stack+0x103>
     a00:	44 c0       	rjmp	.+136    	; 0xa8a <__stack+0x18b>
     a02:	97 c0       	rjmp	.+302    	; 0xb32 <__stack+0x233>
		{
			Backward();
     a04:	0e 94 73 02 	call	0x4e6	; 0x4e6 <Backward>
     a08:	8f e4       	ldi	r24, 0x4F	; 79
     a0a:	93 ec       	ldi	r25, 0xC3	; 195
     a0c:	01 97       	sbiw	r24, 0x01	; 1
     a0e:	f1 f7       	brne	.-4      	; 0xa0c <__stack+0x10d>
     a10:	00 c0       	rjmp	.+0      	; 0xa12 <__stack+0x113>
     a12:	00 00       	nop
			_delay_ms(10);
			Forward();
     a14:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <Forward>
			while (rightFlag == 1)
     a18:	0b c0       	rjmp	.+22     	; 0xa30 <__stack+0x131>
			{
				sensorValueConversion();
     a1a:	0e 94 76 00 	call	0xec	; 0xec <sensorValueConversion>
				if (allFlag == 1 || leftFlag == 1) break;
     a1e:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <allFlag>
     a22:	81 30       	cpi	r24, 0x01	; 1
     a24:	b1 f1       	breq	.+108    	; 0xa92 <__stack+0x193>
     a26:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <leftFlag>
     a2a:	81 30       	cpi	r24, 0x01	; 1
     a2c:	09 f4       	brne	.+2      	; 0xa30 <__stack+0x131>
     a2e:	87 c0       	rjmp	.+270    	; 0xb3e <__stack+0x23f>
		if (rightFlag == 1 && weightedValue < 6 && weightedValue > 2)
		{
			Backward();
			_delay_ms(10);
			Forward();
			while (rightFlag == 1)
     a30:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <rightFlag>
     a34:	81 30       	cpi	r24, 0x01	; 1
     a36:	89 f3       	breq	.-30     	; 0xa1a <__stack+0x11b>
			{
				sensorValueConversion();
				if (allFlag == 1 || leftFlag == 1) break;
			}
			
			if (allFlag == 0 && leftFlag == 0)
     a38:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <allFlag>
     a3c:	81 11       	cpse	r24, r1
     a3e:	25 c0       	rjmp	.+74     	; 0xa8a <__stack+0x18b>
     a40:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <leftFlag>
     a44:	81 11       	cpse	r24, r1
     a46:	55 c0       	rjmp	.+170    	; 0xaf2 <__stack+0x1f3>
     a48:	9f ef       	ldi	r25, 0xFF	; 255
     a4a:	21 ee       	ldi	r18, 0xE1	; 225
     a4c:	84 e0       	ldi	r24, 0x04	; 4
     a4e:	91 50       	subi	r25, 0x01	; 1
     a50:	20 40       	sbci	r18, 0x00	; 0
     a52:	80 40       	sbci	r24, 0x00	; 0
     a54:	e1 f7       	brne	.-8      	; 0xa4e <__stack+0x14f>
     a56:	00 c0       	rjmp	.+0      	; 0xa58 <__stack+0x159>
     a58:	00 00       	nop
			{
// 				Backward();
				_delay_ms(80);
				// 				sensorValueConversion();

				RightSharp(80);
     a5a:	80 e5       	ldi	r24, 0x50	; 80
     a5c:	0e 94 9d 02 	call	0x53a	; 0x53a <RightSharp>
				//				_delay_ms(100);
				
				while (rightFlag == 0) sensorValueConversion();
     a60:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <rightFlag>
     a64:	81 11       	cpse	r24, r1
     a66:	09 c0       	rjmp	.+18     	; 0xa7a <__stack+0x17b>
     a68:	0e 94 76 00 	call	0xec	; 0xec <sensorValueConversion>
     a6c:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <rightFlag>
     a70:	88 23       	and	r24, r24
     a72:	d1 f3       	breq	.-12     	; 0xa68 <__stack+0x169>
     a74:	02 c0       	rjmp	.+4      	; 0xa7a <__stack+0x17b>
				
				while (sensorCount == 0 || weightedValue == 4) sensorValueConversion();
     a76:	0e 94 76 00 	call	0xec	; 0xec <sensorValueConversion>
     a7a:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <sensorCount>
     a7e:	88 23       	and	r24, r24
     a80:	d1 f3       	breq	.-12     	; 0xa76 <__stack+0x177>
     a82:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <weightedValue>
     a86:	84 30       	cpi	r24, 0x04	; 4
     a88:	b1 f3       	breq	.-20     	; 0xa76 <__stack+0x177>
// 				baseSpeed = 120;
				
			}
		}
		
		if (allFlag == 1 && weightedValue < 6 && weightedValue > 2)
     a8a:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <allFlag>
     a8e:	81 30       	cpi	r24, 0x01	; 1
     a90:	81 f5       	brne	.+96     	; 0xaf2 <__stack+0x1f3>
     a92:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <weightedValue>
     a96:	83 50       	subi	r24, 0x03	; 3
     a98:	83 30       	cpi	r24, 0x03	; 3
     a9a:	58 f5       	brcc	.+86     	; 0xaf2 <__stack+0x1f3>
		{
			Backward();
     a9c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <Backward>
     aa0:	8f e4       	ldi	r24, 0x4F	; 79
     aa2:	93 ec       	ldi	r25, 0xC3	; 195
     aa4:	01 97       	sbiw	r24, 0x01	; 1
     aa6:	f1 f7       	brne	.-4      	; 0xaa4 <__stack+0x1a5>
     aa8:	00 c0       	rjmp	.+0      	; 0xaaa <__stack+0x1ab>
     aaa:	00 00       	nop
			_delay_ms(10);
			Forward();
     aac:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <Forward>
     ab0:	9f ef       	ldi	r25, 0xFF	; 255
     ab2:	21 ee       	ldi	r18, 0xE1	; 225
     ab4:	84 e0       	ldi	r24, 0x04	; 4
     ab6:	91 50       	subi	r25, 0x01	; 1
     ab8:	20 40       	sbci	r18, 0x00	; 0
     aba:	80 40       	sbci	r24, 0x00	; 0
     abc:	e1 f7       	brne	.-8      	; 0xab6 <__stack+0x1b7>
     abe:	00 c0       	rjmp	.+0      	; 0xac0 <__stack+0x1c1>
     ac0:	00 00       	nop
			
			_delay_ms(80);
			// 				sensorValueConversion();

			RightSharp(80);
     ac2:	80 e5       	ldi	r24, 0x50	; 80
     ac4:	0e 94 9d 02 	call	0x53a	; 0x53a <RightSharp>
			//				_delay_ms(100);
				
			while (rightFlag == 0) sensorValueConversion();
     ac8:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <rightFlag>
     acc:	81 11       	cpse	r24, r1
     ace:	09 c0       	rjmp	.+18     	; 0xae2 <__stack+0x1e3>
     ad0:	0e 94 76 00 	call	0xec	; 0xec <sensorValueConversion>
     ad4:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <rightFlag>
     ad8:	88 23       	and	r24, r24
     ada:	d1 f3       	breq	.-12     	; 0xad0 <__stack+0x1d1>
     adc:	02 c0       	rjmp	.+4      	; 0xae2 <__stack+0x1e3>
				
				while (sensorCount == 0 || weightedValue == 4) sensorValueConversion();
     ade:	0e 94 76 00 	call	0xec	; 0xec <sensorValueConversion>
     ae2:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <sensorCount>
     ae6:	88 23       	and	r24, r24
     ae8:	d1 f3       	breq	.-12     	; 0xade <__stack+0x1df>
     aea:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <weightedValue>
     aee:	84 30       	cpi	r24, 0x04	; 4
     af0:	b1 f3       	breq	.-20     	; 0xade <__stack+0x1df>
/*****************************************************Stop Sequence****************************************************/
		

/**********************************************************PID********************************************************/

		if (weightedValue != 255)
     af2:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <weightedValue>
     af6:	8f 3f       	cpi	r24, 0xFF	; 255
     af8:	09 f4       	brne	.+2      	; 0xafc <__stack+0x1fd>
     afa:	0b cf       	rjmp	.-490    	; 0x912 <__stack+0x13>
		{
			PID_Correction();
     afc:	0e 94 b9 01 	call	0x372	; 0x372 <PID_Correction>
			enable1(RMspeed);
     b00:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <RMspeed>
     b04:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <RMspeed+0x1>
     b08:	0e 94 b5 05 	call	0xb6a	; 0xb6a <PWM1A>
			enable2(LMspeed - 15);
     b0c:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <LMspeed>
     b10:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <LMspeed+0x1>
     b14:	0f 97       	sbiw	r24, 0x0f	; 15
     b16:	0e 94 ba 05 	call	0xb74	; 0xb74 <PWM1B>
     b1a:	fb ce       	rjmp	.-522    	; 0x912 <__stack+0x13>
// 				baseSpeed = 120;

			}
		}

		if (rightFlag == 1 && weightedValue < 6 && weightedValue > 2)
     b1c:	81 30       	cpi	r24, 0x01	; 1
     b1e:	49 f7       	brne	.-46     	; 0xaf2 <__stack+0x1f3>
     b20:	08 c0       	rjmp	.+16     	; 0xb32 <__stack+0x233>
			}
			
// 			_delay_ms(20);
// 			sensorValueConversion();

			if (allFlag == 0 && rightFlag == 0 && midFlag == 0)
     b22:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <rightFlag>
     b26:	fa cf       	rjmp	.-12     	; 0xb1c <__stack+0x21d>
     b28:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <allFlag>
     b2c:	88 23       	and	r24, r24
     b2e:	c9 f3       	breq	.-14     	; 0xb22 <__stack+0x223>
     b30:	63 cf       	rjmp	.-314    	; 0x9f8 <__stack+0xf9>
// 				baseSpeed = 120;

			}
		}

		if (rightFlag == 1 && weightedValue < 6 && weightedValue > 2)
     b32:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <weightedValue>
     b36:	83 50       	subi	r24, 0x03	; 3
     b38:	83 30       	cpi	r24, 0x03	; 3
     b3a:	d8 f6       	brcc	.-74     	; 0xaf2 <__stack+0x1f3>
     b3c:	63 cf       	rjmp	.-314    	; 0xa04 <__stack+0x105>
			{
				sensorValueConversion();
				if (allFlag == 1 || leftFlag == 1) break;
			}
			
			if (allFlag == 0 && leftFlag == 0)
     b3e:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <allFlag>
     b42:	88 23       	and	r24, r24
     b44:	b1 f2       	breq	.-84     	; 0xaf2 <__stack+0x1f3>
     b46:	a1 cf       	rjmp	.-190    	; 0xa8a <__stack+0x18b>

00000b48 <PWM1_init>:



void PWM1_init(void)										// PWM1A (PD5 of ATmega32A) and PWM0 (PB3 of ATmega32A)
{
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1);
     b48:	e0 e8       	ldi	r30, 0x80	; 128
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	80 81       	ld	r24, Z
     b4e:	80 6a       	ori	r24, 0xA0	; 160
     b50:	80 83       	st	Z, r24
	TCCR1A |= (1 << WGM10);
     b52:	80 81       	ld	r24, Z
     b54:	81 60       	ori	r24, 0x01	; 1
     b56:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12);
     b58:	e1 e8       	ldi	r30, 0x81	; 129
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	80 81       	ld	r24, Z
     b5e:	88 60       	ori	r24, 0x08	; 8
     b60:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS10);	
     b62:	80 81       	ld	r24, Z
     b64:	81 60       	ori	r24, 0x01	; 1
     b66:	80 83       	st	Z, r24
     b68:	08 95       	ret

00000b6a <PWM1A>:
// 	OCR0 = dutyCycle;
// }

void PWM1A(int dutyCycle)
{
	OCR1A = dutyCycle;
     b6a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     b6e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     b72:	08 95       	ret

00000b74 <PWM1B>:
}

void PWM1B(int dutyCycle)
{
	OCR1B = dutyCycle;
     b74:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     b78:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     b7c:	08 95       	ret

00000b7e <UART_init>:
#include "serial_lib.h"

void UART_init(void)
{
	UBRR0H = 0;
     b7e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = 129;
     b82:	81 e8       	ldi	r24, 0x81	; 129
     b84:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
     b88:	e1 ec       	ldi	r30, 0xC1	; 193
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	88 61       	ori	r24, 0x18	; 24
     b90:	80 83       	st	Z, r24
	UCSR0C |= (1 << USBS0) | (3 << UCSZ00);
     b92:	e2 ec       	ldi	r30, 0xC2	; 194
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	8e 60       	ori	r24, 0x0E	; 14
     b9a:	80 83       	st	Z, r24
     b9c:	08 95       	ret

00000b9e <Serial_sendChar>:
	Serial_sendString("\t");
}

void Serial_sendChar(char c)
{
	while (!(UCSR0A & (1 << UDRE0)));
     b9e:	e0 ec       	ldi	r30, 0xC0	; 192
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	90 81       	ld	r25, Z
     ba4:	95 ff       	sbrs	r25, 5
     ba6:	fd cf       	rjmp	.-6      	; 0xba2 <Serial_sendChar+0x4>
	UDR0 = c;
     ba8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     bac:	08 95       	ret

00000bae <Serial_sendString>:
}

void Serial_sendString(char *s)
{
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	ec 01       	movw	r28, r24
	for(int i = 0; s[i] != '\0'; i++)
     bb4:	88 81       	ld	r24, Y
     bb6:	88 23       	and	r24, r24
     bb8:	31 f0       	breq	.+12     	; 0xbc6 <Serial_sendString+0x18>
     bba:	21 96       	adiw	r28, 0x01	; 1
	{
		Serial_sendChar(s[i]);
     bbc:	0e 94 cf 05 	call	0xb9e	; 0xb9e <Serial_sendChar>
	UDR0 = c;
}

void Serial_sendString(char *s)
{
	for(int i = 0; s[i] != '\0'; i++)
     bc0:	89 91       	ld	r24, Y+
     bc2:	81 11       	cpse	r24, r1
     bc4:	fb cf       	rjmp	.-10     	; 0xbbc <Serial_sendString+0xe>
	{
		Serial_sendChar(s[i]);
	}
}
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	08 95       	ret

00000bcc <Serial_sendInt>:
// 	
// 	UDR = data;
// }

void Serial_sendInt(unsigned int data, int intBase)
{
     bcc:	cf 93       	push	r28
     bce:	df 93       	push	r29
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
     bd4:	64 97       	sbiw	r28, 0x14	; 20
     bd6:	0f b6       	in	r0, 0x3f	; 63
     bd8:	f8 94       	cli
     bda:	de bf       	out	0x3e, r29	; 62
     bdc:	0f be       	out	0x3f, r0	; 63
     bde:	cd bf       	out	0x3d, r28	; 61
     be0:	9c 01       	movw	r18, r24
     be2:	ab 01       	movw	r20, r22
	while (!(UCSR0A & (1 << UDRE0)));
     be4:	e0 ec       	ldi	r30, 0xC0	; 192
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	90 81       	ld	r25, Z
     bea:	95 ff       	sbrs	r25, 5
     bec:	fd cf       	rjmp	.-6      	; 0xbe8 <Serial_sendInt+0x1c>
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
     bee:	be 01       	movw	r22, r28
     bf0:	6f 5f       	subi	r22, 0xFF	; 255
     bf2:	7f 4f       	sbci	r23, 0xFF	; 255
     bf4:	c9 01       	movw	r24, r18
     bf6:	0e 94 d7 07 	call	0xfae	; 0xfae <itoa>
	char intBuffer[20];
	itoa(data, intBuffer, intBase);
	Serial_sendString(intBuffer);
     bfa:	ce 01       	movw	r24, r28
     bfc:	01 96       	adiw	r24, 0x01	; 1
     bfe:	0e 94 d7 05 	call	0xbae	; 0xbae <Serial_sendString>
}
     c02:	64 96       	adiw	r28, 0x14	; 20
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	f8 94       	cli
     c08:	de bf       	out	0x3e, r29	; 62
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	cd bf       	out	0x3d, r28	; 61
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	08 95       	ret

00000c14 <__subsf3>:
     c14:	50 58       	subi	r21, 0x80	; 128

00000c16 <__addsf3>:
     c16:	bb 27       	eor	r27, r27
     c18:	aa 27       	eor	r26, r26
     c1a:	0e 94 22 06 	call	0xc44	; 0xc44 <__addsf3x>
     c1e:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__fp_round>
     c22:	0e 94 f3 06 	call	0xde6	; 0xde6 <__fp_pscA>
     c26:	38 f0       	brcs	.+14     	; 0xc36 <__addsf3+0x20>
     c28:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__fp_pscB>
     c2c:	20 f0       	brcs	.+8      	; 0xc36 <__addsf3+0x20>
     c2e:	39 f4       	brne	.+14     	; 0xc3e <__addsf3+0x28>
     c30:	9f 3f       	cpi	r25, 0xFF	; 255
     c32:	19 f4       	brne	.+6      	; 0xc3a <__addsf3+0x24>
     c34:	26 f4       	brtc	.+8      	; 0xc3e <__addsf3+0x28>
     c36:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__fp_nan>
     c3a:	0e f4       	brtc	.+2      	; 0xc3e <__addsf3+0x28>
     c3c:	e0 95       	com	r30
     c3e:	e7 fb       	bst	r30, 7
     c40:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__fp_inf>

00000c44 <__addsf3x>:
     c44:	e9 2f       	mov	r30, r25
     c46:	0e 94 12 07 	call	0xe24	; 0xe24 <__fp_split3>
     c4a:	58 f3       	brcs	.-42     	; 0xc22 <__addsf3+0xc>
     c4c:	ba 17       	cp	r27, r26
     c4e:	62 07       	cpc	r22, r18
     c50:	73 07       	cpc	r23, r19
     c52:	84 07       	cpc	r24, r20
     c54:	95 07       	cpc	r25, r21
     c56:	20 f0       	brcs	.+8      	; 0xc60 <__addsf3x+0x1c>
     c58:	79 f4       	brne	.+30     	; 0xc78 <__addsf3x+0x34>
     c5a:	a6 f5       	brtc	.+104    	; 0xcc4 <__addsf3x+0x80>
     c5c:	0c 94 34 07 	jmp	0xe68	; 0xe68 <__fp_zero>
     c60:	0e f4       	brtc	.+2      	; 0xc64 <__addsf3x+0x20>
     c62:	e0 95       	com	r30
     c64:	0b 2e       	mov	r0, r27
     c66:	ba 2f       	mov	r27, r26
     c68:	a0 2d       	mov	r26, r0
     c6a:	0b 01       	movw	r0, r22
     c6c:	b9 01       	movw	r22, r18
     c6e:	90 01       	movw	r18, r0
     c70:	0c 01       	movw	r0, r24
     c72:	ca 01       	movw	r24, r20
     c74:	a0 01       	movw	r20, r0
     c76:	11 24       	eor	r1, r1
     c78:	ff 27       	eor	r31, r31
     c7a:	59 1b       	sub	r21, r25
     c7c:	99 f0       	breq	.+38     	; 0xca4 <__addsf3x+0x60>
     c7e:	59 3f       	cpi	r21, 0xF9	; 249
     c80:	50 f4       	brcc	.+20     	; 0xc96 <__addsf3x+0x52>
     c82:	50 3e       	cpi	r21, 0xE0	; 224
     c84:	68 f1       	brcs	.+90     	; 0xce0 <__addsf3x+0x9c>
     c86:	1a 16       	cp	r1, r26
     c88:	f0 40       	sbci	r31, 0x00	; 0
     c8a:	a2 2f       	mov	r26, r18
     c8c:	23 2f       	mov	r18, r19
     c8e:	34 2f       	mov	r19, r20
     c90:	44 27       	eor	r20, r20
     c92:	58 5f       	subi	r21, 0xF8	; 248
     c94:	f3 cf       	rjmp	.-26     	; 0xc7c <__addsf3x+0x38>
     c96:	46 95       	lsr	r20
     c98:	37 95       	ror	r19
     c9a:	27 95       	ror	r18
     c9c:	a7 95       	ror	r26
     c9e:	f0 40       	sbci	r31, 0x00	; 0
     ca0:	53 95       	inc	r21
     ca2:	c9 f7       	brne	.-14     	; 0xc96 <__addsf3x+0x52>
     ca4:	7e f4       	brtc	.+30     	; 0xcc4 <__addsf3x+0x80>
     ca6:	1f 16       	cp	r1, r31
     ca8:	ba 0b       	sbc	r27, r26
     caa:	62 0b       	sbc	r22, r18
     cac:	73 0b       	sbc	r23, r19
     cae:	84 0b       	sbc	r24, r20
     cb0:	ba f0       	brmi	.+46     	; 0xce0 <__addsf3x+0x9c>
     cb2:	91 50       	subi	r25, 0x01	; 1
     cb4:	a1 f0       	breq	.+40     	; 0xcde <__addsf3x+0x9a>
     cb6:	ff 0f       	add	r31, r31
     cb8:	bb 1f       	adc	r27, r27
     cba:	66 1f       	adc	r22, r22
     cbc:	77 1f       	adc	r23, r23
     cbe:	88 1f       	adc	r24, r24
     cc0:	c2 f7       	brpl	.-16     	; 0xcb2 <__addsf3x+0x6e>
     cc2:	0e c0       	rjmp	.+28     	; 0xce0 <__addsf3x+0x9c>
     cc4:	ba 0f       	add	r27, r26
     cc6:	62 1f       	adc	r22, r18
     cc8:	73 1f       	adc	r23, r19
     cca:	84 1f       	adc	r24, r20
     ccc:	48 f4       	brcc	.+18     	; 0xce0 <__addsf3x+0x9c>
     cce:	87 95       	ror	r24
     cd0:	77 95       	ror	r23
     cd2:	67 95       	ror	r22
     cd4:	b7 95       	ror	r27
     cd6:	f7 95       	ror	r31
     cd8:	9e 3f       	cpi	r25, 0xFE	; 254
     cda:	08 f0       	brcs	.+2      	; 0xcde <__addsf3x+0x9a>
     cdc:	b0 cf       	rjmp	.-160    	; 0xc3e <__addsf3+0x28>
     cde:	93 95       	inc	r25
     ce0:	88 0f       	add	r24, r24
     ce2:	08 f0       	brcs	.+2      	; 0xce6 <__addsf3x+0xa2>
     ce4:	99 27       	eor	r25, r25
     ce6:	ee 0f       	add	r30, r30
     ce8:	97 95       	ror	r25
     cea:	87 95       	ror	r24
     cec:	08 95       	ret

00000cee <__fixsfsi>:
     cee:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__fixunssfsi>
     cf2:	68 94       	set
     cf4:	b1 11       	cpse	r27, r1
     cf6:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__fp_szero>
     cfa:	08 95       	ret

00000cfc <__fixunssfsi>:
     cfc:	0e 94 1a 07 	call	0xe34	; 0xe34 <__fp_splitA>
     d00:	88 f0       	brcs	.+34     	; 0xd24 <__fixunssfsi+0x28>
     d02:	9f 57       	subi	r25, 0x7F	; 127
     d04:	98 f0       	brcs	.+38     	; 0xd2c <__fixunssfsi+0x30>
     d06:	b9 2f       	mov	r27, r25
     d08:	99 27       	eor	r25, r25
     d0a:	b7 51       	subi	r27, 0x17	; 23
     d0c:	b0 f0       	brcs	.+44     	; 0xd3a <__fixunssfsi+0x3e>
     d0e:	e1 f0       	breq	.+56     	; 0xd48 <__fixunssfsi+0x4c>
     d10:	66 0f       	add	r22, r22
     d12:	77 1f       	adc	r23, r23
     d14:	88 1f       	adc	r24, r24
     d16:	99 1f       	adc	r25, r25
     d18:	1a f0       	brmi	.+6      	; 0xd20 <__fixunssfsi+0x24>
     d1a:	ba 95       	dec	r27
     d1c:	c9 f7       	brne	.-14     	; 0xd10 <__fixunssfsi+0x14>
     d1e:	14 c0       	rjmp	.+40     	; 0xd48 <__fixunssfsi+0x4c>
     d20:	b1 30       	cpi	r27, 0x01	; 1
     d22:	91 f0       	breq	.+36     	; 0xd48 <__fixunssfsi+0x4c>
     d24:	0e 94 34 07 	call	0xe68	; 0xe68 <__fp_zero>
     d28:	b1 e0       	ldi	r27, 0x01	; 1
     d2a:	08 95       	ret
     d2c:	0c 94 34 07 	jmp	0xe68	; 0xe68 <__fp_zero>
     d30:	67 2f       	mov	r22, r23
     d32:	78 2f       	mov	r23, r24
     d34:	88 27       	eor	r24, r24
     d36:	b8 5f       	subi	r27, 0xF8	; 248
     d38:	39 f0       	breq	.+14     	; 0xd48 <__fixunssfsi+0x4c>
     d3a:	b9 3f       	cpi	r27, 0xF9	; 249
     d3c:	cc f3       	brlt	.-14     	; 0xd30 <__fixunssfsi+0x34>
     d3e:	86 95       	lsr	r24
     d40:	77 95       	ror	r23
     d42:	67 95       	ror	r22
     d44:	b3 95       	inc	r27
     d46:	d9 f7       	brne	.-10     	; 0xd3e <__fixunssfsi+0x42>
     d48:	3e f4       	brtc	.+14     	; 0xd58 <__fixunssfsi+0x5c>
     d4a:	90 95       	com	r25
     d4c:	80 95       	com	r24
     d4e:	70 95       	com	r23
     d50:	61 95       	neg	r22
     d52:	7f 4f       	sbci	r23, 0xFF	; 255
     d54:	8f 4f       	sbci	r24, 0xFF	; 255
     d56:	9f 4f       	sbci	r25, 0xFF	; 255
     d58:	08 95       	ret

00000d5a <__floatunsisf>:
     d5a:	e8 94       	clt
     d5c:	09 c0       	rjmp	.+18     	; 0xd70 <__floatsisf+0x12>

00000d5e <__floatsisf>:
     d5e:	97 fb       	bst	r25, 7
     d60:	3e f4       	brtc	.+14     	; 0xd70 <__floatsisf+0x12>
     d62:	90 95       	com	r25
     d64:	80 95       	com	r24
     d66:	70 95       	com	r23
     d68:	61 95       	neg	r22
     d6a:	7f 4f       	sbci	r23, 0xFF	; 255
     d6c:	8f 4f       	sbci	r24, 0xFF	; 255
     d6e:	9f 4f       	sbci	r25, 0xFF	; 255
     d70:	99 23       	and	r25, r25
     d72:	a9 f0       	breq	.+42     	; 0xd9e <__floatsisf+0x40>
     d74:	f9 2f       	mov	r31, r25
     d76:	96 e9       	ldi	r25, 0x96	; 150
     d78:	bb 27       	eor	r27, r27
     d7a:	93 95       	inc	r25
     d7c:	f6 95       	lsr	r31
     d7e:	87 95       	ror	r24
     d80:	77 95       	ror	r23
     d82:	67 95       	ror	r22
     d84:	b7 95       	ror	r27
     d86:	f1 11       	cpse	r31, r1
     d88:	f8 cf       	rjmp	.-16     	; 0xd7a <__floatsisf+0x1c>
     d8a:	fa f4       	brpl	.+62     	; 0xdca <__floatsisf+0x6c>
     d8c:	bb 0f       	add	r27, r27
     d8e:	11 f4       	brne	.+4      	; 0xd94 <__floatsisf+0x36>
     d90:	60 ff       	sbrs	r22, 0
     d92:	1b c0       	rjmp	.+54     	; 0xdca <__floatsisf+0x6c>
     d94:	6f 5f       	subi	r22, 0xFF	; 255
     d96:	7f 4f       	sbci	r23, 0xFF	; 255
     d98:	8f 4f       	sbci	r24, 0xFF	; 255
     d9a:	9f 4f       	sbci	r25, 0xFF	; 255
     d9c:	16 c0       	rjmp	.+44     	; 0xdca <__floatsisf+0x6c>
     d9e:	88 23       	and	r24, r24
     da0:	11 f0       	breq	.+4      	; 0xda6 <__floatsisf+0x48>
     da2:	96 e9       	ldi	r25, 0x96	; 150
     da4:	11 c0       	rjmp	.+34     	; 0xdc8 <__floatsisf+0x6a>
     da6:	77 23       	and	r23, r23
     da8:	21 f0       	breq	.+8      	; 0xdb2 <__floatsisf+0x54>
     daa:	9e e8       	ldi	r25, 0x8E	; 142
     dac:	87 2f       	mov	r24, r23
     dae:	76 2f       	mov	r23, r22
     db0:	05 c0       	rjmp	.+10     	; 0xdbc <__floatsisf+0x5e>
     db2:	66 23       	and	r22, r22
     db4:	71 f0       	breq	.+28     	; 0xdd2 <__floatsisf+0x74>
     db6:	96 e8       	ldi	r25, 0x86	; 134
     db8:	86 2f       	mov	r24, r22
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	2a f0       	brmi	.+10     	; 0xdca <__floatsisf+0x6c>
     dc0:	9a 95       	dec	r25
     dc2:	66 0f       	add	r22, r22
     dc4:	77 1f       	adc	r23, r23
     dc6:	88 1f       	adc	r24, r24
     dc8:	da f7       	brpl	.-10     	; 0xdc0 <__floatsisf+0x62>
     dca:	88 0f       	add	r24, r24
     dcc:	96 95       	lsr	r25
     dce:	87 95       	ror	r24
     dd0:	97 f9       	bld	r25, 7
     dd2:	08 95       	ret

00000dd4 <__fp_inf>:
     dd4:	97 f9       	bld	r25, 7
     dd6:	9f 67       	ori	r25, 0x7F	; 127
     dd8:	80 e8       	ldi	r24, 0x80	; 128
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	08 95       	ret

00000de0 <__fp_nan>:
     de0:	9f ef       	ldi	r25, 0xFF	; 255
     de2:	80 ec       	ldi	r24, 0xC0	; 192
     de4:	08 95       	ret

00000de6 <__fp_pscA>:
     de6:	00 24       	eor	r0, r0
     de8:	0a 94       	dec	r0
     dea:	16 16       	cp	r1, r22
     dec:	17 06       	cpc	r1, r23
     dee:	18 06       	cpc	r1, r24
     df0:	09 06       	cpc	r0, r25
     df2:	08 95       	ret

00000df4 <__fp_pscB>:
     df4:	00 24       	eor	r0, r0
     df6:	0a 94       	dec	r0
     df8:	12 16       	cp	r1, r18
     dfa:	13 06       	cpc	r1, r19
     dfc:	14 06       	cpc	r1, r20
     dfe:	05 06       	cpc	r0, r21
     e00:	08 95       	ret

00000e02 <__fp_round>:
     e02:	09 2e       	mov	r0, r25
     e04:	03 94       	inc	r0
     e06:	00 0c       	add	r0, r0
     e08:	11 f4       	brne	.+4      	; 0xe0e <__fp_round+0xc>
     e0a:	88 23       	and	r24, r24
     e0c:	52 f0       	brmi	.+20     	; 0xe22 <__fp_round+0x20>
     e0e:	bb 0f       	add	r27, r27
     e10:	40 f4       	brcc	.+16     	; 0xe22 <__fp_round+0x20>
     e12:	bf 2b       	or	r27, r31
     e14:	11 f4       	brne	.+4      	; 0xe1a <__fp_round+0x18>
     e16:	60 ff       	sbrs	r22, 0
     e18:	04 c0       	rjmp	.+8      	; 0xe22 <__fp_round+0x20>
     e1a:	6f 5f       	subi	r22, 0xFF	; 255
     e1c:	7f 4f       	sbci	r23, 0xFF	; 255
     e1e:	8f 4f       	sbci	r24, 0xFF	; 255
     e20:	9f 4f       	sbci	r25, 0xFF	; 255
     e22:	08 95       	ret

00000e24 <__fp_split3>:
     e24:	57 fd       	sbrc	r21, 7
     e26:	90 58       	subi	r25, 0x80	; 128
     e28:	44 0f       	add	r20, r20
     e2a:	55 1f       	adc	r21, r21
     e2c:	59 f0       	breq	.+22     	; 0xe44 <__fp_splitA+0x10>
     e2e:	5f 3f       	cpi	r21, 0xFF	; 255
     e30:	71 f0       	breq	.+28     	; 0xe4e <__fp_splitA+0x1a>
     e32:	47 95       	ror	r20

00000e34 <__fp_splitA>:
     e34:	88 0f       	add	r24, r24
     e36:	97 fb       	bst	r25, 7
     e38:	99 1f       	adc	r25, r25
     e3a:	61 f0       	breq	.+24     	; 0xe54 <__fp_splitA+0x20>
     e3c:	9f 3f       	cpi	r25, 0xFF	; 255
     e3e:	79 f0       	breq	.+30     	; 0xe5e <__fp_splitA+0x2a>
     e40:	87 95       	ror	r24
     e42:	08 95       	ret
     e44:	12 16       	cp	r1, r18
     e46:	13 06       	cpc	r1, r19
     e48:	14 06       	cpc	r1, r20
     e4a:	55 1f       	adc	r21, r21
     e4c:	f2 cf       	rjmp	.-28     	; 0xe32 <__fp_split3+0xe>
     e4e:	46 95       	lsr	r20
     e50:	f1 df       	rcall	.-30     	; 0xe34 <__fp_splitA>
     e52:	08 c0       	rjmp	.+16     	; 0xe64 <__fp_splitA+0x30>
     e54:	16 16       	cp	r1, r22
     e56:	17 06       	cpc	r1, r23
     e58:	18 06       	cpc	r1, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	f1 cf       	rjmp	.-30     	; 0xe40 <__fp_splitA+0xc>
     e5e:	86 95       	lsr	r24
     e60:	71 05       	cpc	r23, r1
     e62:	61 05       	cpc	r22, r1
     e64:	08 94       	sec
     e66:	08 95       	ret

00000e68 <__fp_zero>:
     e68:	e8 94       	clt

00000e6a <__fp_szero>:
     e6a:	bb 27       	eor	r27, r27
     e6c:	66 27       	eor	r22, r22
     e6e:	77 27       	eor	r23, r23
     e70:	cb 01       	movw	r24, r22
     e72:	97 f9       	bld	r25, 7
     e74:	08 95       	ret

00000e76 <__mulsf3>:
     e76:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__mulsf3x>
     e7a:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__fp_round>
     e7e:	0e 94 f3 06 	call	0xde6	; 0xde6 <__fp_pscA>
     e82:	38 f0       	brcs	.+14     	; 0xe92 <__mulsf3+0x1c>
     e84:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__fp_pscB>
     e88:	20 f0       	brcs	.+8      	; 0xe92 <__mulsf3+0x1c>
     e8a:	95 23       	and	r25, r21
     e8c:	11 f0       	breq	.+4      	; 0xe92 <__mulsf3+0x1c>
     e8e:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__fp_inf>
     e92:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__fp_nan>
     e96:	11 24       	eor	r1, r1
     e98:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__fp_szero>

00000e9c <__mulsf3x>:
     e9c:	0e 94 12 07 	call	0xe24	; 0xe24 <__fp_split3>
     ea0:	70 f3       	brcs	.-36     	; 0xe7e <__mulsf3+0x8>

00000ea2 <__mulsf3_pse>:
     ea2:	95 9f       	mul	r25, r21
     ea4:	c1 f3       	breq	.-16     	; 0xe96 <__mulsf3+0x20>
     ea6:	95 0f       	add	r25, r21
     ea8:	50 e0       	ldi	r21, 0x00	; 0
     eaa:	55 1f       	adc	r21, r21
     eac:	62 9f       	mul	r22, r18
     eae:	f0 01       	movw	r30, r0
     eb0:	72 9f       	mul	r23, r18
     eb2:	bb 27       	eor	r27, r27
     eb4:	f0 0d       	add	r31, r0
     eb6:	b1 1d       	adc	r27, r1
     eb8:	63 9f       	mul	r22, r19
     eba:	aa 27       	eor	r26, r26
     ebc:	f0 0d       	add	r31, r0
     ebe:	b1 1d       	adc	r27, r1
     ec0:	aa 1f       	adc	r26, r26
     ec2:	64 9f       	mul	r22, r20
     ec4:	66 27       	eor	r22, r22
     ec6:	b0 0d       	add	r27, r0
     ec8:	a1 1d       	adc	r26, r1
     eca:	66 1f       	adc	r22, r22
     ecc:	82 9f       	mul	r24, r18
     ece:	22 27       	eor	r18, r18
     ed0:	b0 0d       	add	r27, r0
     ed2:	a1 1d       	adc	r26, r1
     ed4:	62 1f       	adc	r22, r18
     ed6:	73 9f       	mul	r23, r19
     ed8:	b0 0d       	add	r27, r0
     eda:	a1 1d       	adc	r26, r1
     edc:	62 1f       	adc	r22, r18
     ede:	83 9f       	mul	r24, r19
     ee0:	a0 0d       	add	r26, r0
     ee2:	61 1d       	adc	r22, r1
     ee4:	22 1f       	adc	r18, r18
     ee6:	74 9f       	mul	r23, r20
     ee8:	33 27       	eor	r19, r19
     eea:	a0 0d       	add	r26, r0
     eec:	61 1d       	adc	r22, r1
     eee:	23 1f       	adc	r18, r19
     ef0:	84 9f       	mul	r24, r20
     ef2:	60 0d       	add	r22, r0
     ef4:	21 1d       	adc	r18, r1
     ef6:	82 2f       	mov	r24, r18
     ef8:	76 2f       	mov	r23, r22
     efa:	6a 2f       	mov	r22, r26
     efc:	11 24       	eor	r1, r1
     efe:	9f 57       	subi	r25, 0x7F	; 127
     f00:	50 40       	sbci	r21, 0x00	; 0
     f02:	9a f0       	brmi	.+38     	; 0xf2a <__mulsf3_pse+0x88>
     f04:	f1 f0       	breq	.+60     	; 0xf42 <__mulsf3_pse+0xa0>
     f06:	88 23       	and	r24, r24
     f08:	4a f0       	brmi	.+18     	; 0xf1c <__mulsf3_pse+0x7a>
     f0a:	ee 0f       	add	r30, r30
     f0c:	ff 1f       	adc	r31, r31
     f0e:	bb 1f       	adc	r27, r27
     f10:	66 1f       	adc	r22, r22
     f12:	77 1f       	adc	r23, r23
     f14:	88 1f       	adc	r24, r24
     f16:	91 50       	subi	r25, 0x01	; 1
     f18:	50 40       	sbci	r21, 0x00	; 0
     f1a:	a9 f7       	brne	.-22     	; 0xf06 <__mulsf3_pse+0x64>
     f1c:	9e 3f       	cpi	r25, 0xFE	; 254
     f1e:	51 05       	cpc	r21, r1
     f20:	80 f0       	brcs	.+32     	; 0xf42 <__mulsf3_pse+0xa0>
     f22:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__fp_inf>
     f26:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__fp_szero>
     f2a:	5f 3f       	cpi	r21, 0xFF	; 255
     f2c:	e4 f3       	brlt	.-8      	; 0xf26 <__mulsf3_pse+0x84>
     f2e:	98 3e       	cpi	r25, 0xE8	; 232
     f30:	d4 f3       	brlt	.-12     	; 0xf26 <__mulsf3_pse+0x84>
     f32:	86 95       	lsr	r24
     f34:	77 95       	ror	r23
     f36:	67 95       	ror	r22
     f38:	b7 95       	ror	r27
     f3a:	f7 95       	ror	r31
     f3c:	e7 95       	ror	r30
     f3e:	9f 5f       	subi	r25, 0xFF	; 255
     f40:	c1 f7       	brne	.-16     	; 0xf32 <__mulsf3_pse+0x90>
     f42:	fe 2b       	or	r31, r30
     f44:	88 0f       	add	r24, r24
     f46:	91 1d       	adc	r25, r1
     f48:	96 95       	lsr	r25
     f4a:	87 95       	ror	r24
     f4c:	97 f9       	bld	r25, 7
     f4e:	08 95       	ret

00000f50 <__udivmodqi4>:
     f50:	99 1b       	sub	r25, r25
     f52:	79 e0       	ldi	r23, 0x09	; 9
     f54:	04 c0       	rjmp	.+8      	; 0xf5e <__udivmodqi4_ep>

00000f56 <__udivmodqi4_loop>:
     f56:	99 1f       	adc	r25, r25
     f58:	96 17       	cp	r25, r22
     f5a:	08 f0       	brcs	.+2      	; 0xf5e <__udivmodqi4_ep>
     f5c:	96 1b       	sub	r25, r22

00000f5e <__udivmodqi4_ep>:
     f5e:	88 1f       	adc	r24, r24
     f60:	7a 95       	dec	r23
     f62:	c9 f7       	brne	.-14     	; 0xf56 <__udivmodqi4_loop>
     f64:	80 95       	com	r24
     f66:	08 95       	ret

00000f68 <__udivmodhi4>:
     f68:	aa 1b       	sub	r26, r26
     f6a:	bb 1b       	sub	r27, r27
     f6c:	51 e1       	ldi	r21, 0x11	; 17
     f6e:	07 c0       	rjmp	.+14     	; 0xf7e <__udivmodhi4_ep>

00000f70 <__udivmodhi4_loop>:
     f70:	aa 1f       	adc	r26, r26
     f72:	bb 1f       	adc	r27, r27
     f74:	a6 17       	cp	r26, r22
     f76:	b7 07       	cpc	r27, r23
     f78:	10 f0       	brcs	.+4      	; 0xf7e <__udivmodhi4_ep>
     f7a:	a6 1b       	sub	r26, r22
     f7c:	b7 0b       	sbc	r27, r23

00000f7e <__udivmodhi4_ep>:
     f7e:	88 1f       	adc	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	5a 95       	dec	r21
     f84:	a9 f7       	brne	.-22     	; 0xf70 <__udivmodhi4_loop>
     f86:	80 95       	com	r24
     f88:	90 95       	com	r25
     f8a:	bc 01       	movw	r22, r24
     f8c:	cd 01       	movw	r24, r26
     f8e:	08 95       	ret

00000f90 <__umulhisi3>:
     f90:	a2 9f       	mul	r26, r18
     f92:	b0 01       	movw	r22, r0
     f94:	b3 9f       	mul	r27, r19
     f96:	c0 01       	movw	r24, r0
     f98:	a3 9f       	mul	r26, r19
     f9a:	70 0d       	add	r23, r0
     f9c:	81 1d       	adc	r24, r1
     f9e:	11 24       	eor	r1, r1
     fa0:	91 1d       	adc	r25, r1
     fa2:	b2 9f       	mul	r27, r18
     fa4:	70 0d       	add	r23, r0
     fa6:	81 1d       	adc	r24, r1
     fa8:	11 24       	eor	r1, r1
     faa:	91 1d       	adc	r25, r1
     fac:	08 95       	ret

00000fae <itoa>:
     fae:	45 32       	cpi	r20, 0x25	; 37
     fb0:	51 05       	cpc	r21, r1
     fb2:	20 f4       	brcc	.+8      	; 0xfbc <itoa+0xe>
     fb4:	42 30       	cpi	r20, 0x02	; 2
     fb6:	10 f0       	brcs	.+4      	; 0xfbc <itoa+0xe>
     fb8:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <__itoa_ncheck>
     fbc:	fb 01       	movw	r30, r22
     fbe:	10 82       	st	Z, r1
     fc0:	cb 01       	movw	r24, r22
     fc2:	08 95       	ret

00000fc4 <__itoa_ncheck>:
     fc4:	bb 27       	eor	r27, r27
     fc6:	4a 30       	cpi	r20, 0x0A	; 10
     fc8:	31 f4       	brne	.+12     	; 0xfd6 <__itoa_ncheck+0x12>
     fca:	99 23       	and	r25, r25
     fcc:	22 f4       	brpl	.+8      	; 0xfd6 <__itoa_ncheck+0x12>
     fce:	bd e2       	ldi	r27, 0x2D	; 45
     fd0:	90 95       	com	r25
     fd2:	81 95       	neg	r24
     fd4:	9f 4f       	sbci	r25, 0xFF	; 255
     fd6:	0c 94 ee 07 	jmp	0xfdc	; 0xfdc <__utoa_common>

00000fda <__utoa_ncheck>:
     fda:	bb 27       	eor	r27, r27

00000fdc <__utoa_common>:
     fdc:	fb 01       	movw	r30, r22
     fde:	55 27       	eor	r21, r21
     fe0:	aa 27       	eor	r26, r26
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	aa 1f       	adc	r26, r26
     fe8:	a4 17       	cp	r26, r20
     fea:	10 f0       	brcs	.+4      	; 0xff0 <__utoa_common+0x14>
     fec:	a4 1b       	sub	r26, r20
     fee:	83 95       	inc	r24
     ff0:	50 51       	subi	r21, 0x10	; 16
     ff2:	b9 f7       	brne	.-18     	; 0xfe2 <__utoa_common+0x6>
     ff4:	a0 5d       	subi	r26, 0xD0	; 208
     ff6:	aa 33       	cpi	r26, 0x3A	; 58
     ff8:	08 f0       	brcs	.+2      	; 0xffc <__utoa_common+0x20>
     ffa:	a9 5d       	subi	r26, 0xD9	; 217
     ffc:	a1 93       	st	Z+, r26
     ffe:	00 97       	sbiw	r24, 0x00	; 0
    1000:	79 f7       	brne	.-34     	; 0xfe0 <__utoa_common+0x4>
    1002:	b1 11       	cpse	r27, r1
    1004:	b1 93       	st	Z+, r27
    1006:	11 92       	st	Z+, r1
    1008:	cb 01       	movw	r24, r22
    100a:	0c 94 07 08 	jmp	0x100e	; 0x100e <strrev>

0000100e <strrev>:
    100e:	dc 01       	movw	r26, r24
    1010:	fc 01       	movw	r30, r24
    1012:	67 2f       	mov	r22, r23
    1014:	71 91       	ld	r23, Z+
    1016:	77 23       	and	r23, r23
    1018:	e1 f7       	brne	.-8      	; 0x1012 <strrev+0x4>
    101a:	32 97       	sbiw	r30, 0x02	; 2
    101c:	04 c0       	rjmp	.+8      	; 0x1026 <strrev+0x18>
    101e:	7c 91       	ld	r23, X
    1020:	6d 93       	st	X+, r22
    1022:	70 83       	st	Z, r23
    1024:	62 91       	ld	r22, -Z
    1026:	ae 17       	cp	r26, r30
    1028:	bf 07       	cpc	r27, r31
    102a:	c8 f3       	brcs	.-14     	; 0x101e <strrev+0x10>
    102c:	08 95       	ret

0000102e <_exit>:
    102e:	f8 94       	cli

00001030 <__stop_program>:
    1030:	ff cf       	rjmp	.-2      	; 0x1030 <__stop_program>
