
LFR_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001400  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00001400  00001494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  00800078  00800078  000014ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00001518  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013bc  00000000  00000000  000016b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000055e  00000000  00000000  00002a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009a7  00000000  00000000  00002fca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d4  00000000  00000000  00003974  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000537  00000000  00000000  00003d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a0c  00000000  00000000  0000427f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00004c8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__vector_1>
       8:	0c 94 49 07 	jmp	0xe92	; 0xe92 <__vector_2>
       c:	0c 94 94 07 	jmp	0xf28	; 0xf28 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e0       	ldi	r30, 0x00	; 0
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 39       	cpi	r26, 0x9F	; 159
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 54 05 	call	0xaa8	; 0xaa8 <main>
      8a:	0c 94 fe 09 	jmp	0x13fc	; 0x13fc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <adc_init>:
      92:	3e 9a       	sbi	0x07, 6	; 7
      94:	37 9a       	sbi	0x06, 7	; 6
      96:	86 b1       	in	r24, 0x06	; 6
      98:	87 60       	ori	r24, 0x07	; 7
      9a:	86 b9       	out	0x06, r24	; 6
      9c:	08 95       	ret

0000009e <adcRead>:
      9e:	97 b1       	in	r25, 0x07	; 7
      a0:	90 7e       	andi	r25, 0xE0	; 224
      a2:	97 b9       	out	0x07, r25	; 7
      a4:	97 b1       	in	r25, 0x07	; 7
      a6:	89 2b       	or	r24, r25
      a8:	87 b9       	out	0x07, r24	; 7
      aa:	36 9a       	sbi	0x06, 6	; 6
      ac:	36 99       	sbic	0x06, 6	; 6
      ae:	fe cf       	rjmp	.-4      	; 0xac <adcRead+0xe>
      b0:	84 b1       	in	r24, 0x04	; 4
      b2:	95 b1       	in	r25, 0x05	; 5
      b4:	08 95       	ret

000000b6 <sensorValueConversion>:
	trig2_PORT &= ~(1 << trig2_PIN);
	trig3_PORT &= ~(1 << trig3_PIN);
		
	distance1 = .0353 * pulse1 / 2;
	distance2 = .0353 * pulse2 / 2;
	distance3 = .0353 * pulse3 / 2;
      b6:	bf 92       	push	r11
      b8:	cf 92       	push	r12
      ba:	df 92       	push	r13
      bc:	ef 92       	push	r14
      be:	ff 92       	push	r15
      c0:	0f 93       	push	r16
      c2:	1f 93       	push	r17
		enable2(RMspeed);
	}
}

void sensorValueConversion(void)
{
      c4:	cf 93       	push	r28
      c6:	df 93       	push	r29
	int digitalValue = 0;
	sensorValue = 0;
      c8:	10 92 9e 00 	sts	0x009E, r1
      cc:	10 92 9d 00 	sts	0x009D, r1
      d0:	08 e7       	ldi	r16, 0x78	; 120
      d2:	10 e0       	ldi	r17, 0x00	; 0
      d4:	c0 e0       	ldi	r28, 0x00	; 0
      d6:	d0 e0       	ldi	r29, 0x00	; 0
      d8:	0f 2e       	mov	r0, r31
      da:	f7 e0       	ldi	r31, 0x07	; 7
      dc:	df 2e       	mov	r13, r31
      de:	f0 2d       	mov	r31, r0
	signed int sensorNumber = 0;
	
	for (sensorNumber = 7; sensorNumber >= 0; sensorNumber--)
	{
		int temp = adcRead(sensorNumber);
		if (temp > compareValue[sensorNumber]) digitalValue = 0;
      e0:	ee 24       	eor	r14, r14
      e2:	e3 94       	inc	r14
      e4:	f1 2c       	mov	r15, r1
      e6:	b1 2c       	mov	r11, r1
      e8:	c1 2c       	mov	r12, r1
	sensorValue = 0;
	signed int sensorNumber = 0;
	
	for (sensorNumber = 7; sensorNumber >= 0; sensorNumber--)
	{
		int temp = adcRead(sensorNumber);
      ea:	8d 2d       	mov	r24, r13
      ec:	8c 1b       	sub	r24, r28
      ee:	0e 94 4f 00 	call	0x9e	; 0x9e <adcRead>
		if (temp > compareValue[sensorNumber]) digitalValue = 0;
		else digitalValue = 1;
		sensorValue |= (digitalValue << (7 - sensorNumber));
      f2:	40 91 9d 00 	lds	r20, 0x009D
      f6:	50 91 9e 00 	lds	r21, 0x009E
	signed int sensorNumber = 0;
	
	for (sensorNumber = 7; sensorNumber >= 0; sensorNumber--)
	{
		int temp = adcRead(sensorNumber);
		if (temp > compareValue[sensorNumber]) digitalValue = 0;
      fa:	2e 2d       	mov	r18, r14
      fc:	3f 2d       	mov	r19, r15
      fe:	f8 01       	movw	r30, r16
     100:	72 91       	ld	r23, -Z
     102:	62 91       	ld	r22, -Z
     104:	8f 01       	movw	r16, r30
     106:	68 17       	cp	r22, r24
     108:	79 07       	cpc	r23, r25
     10a:	10 f4       	brcc	.+4      	; 0x110 <sensorValueConversion+0x5a>
     10c:	2b 2d       	mov	r18, r11
     10e:	3c 2d       	mov	r19, r12
		else digitalValue = 1;
		sensorValue |= (digitalValue << (7 - sensorNumber));
     110:	0c 2e       	mov	r0, r28
     112:	02 c0       	rjmp	.+4      	; 0x118 <sensorValueConversion+0x62>
     114:	22 0f       	add	r18, r18
     116:	33 1f       	adc	r19, r19
     118:	0a 94       	dec	r0
     11a:	e2 f7       	brpl	.-8      	; 0x114 <sensorValueConversion+0x5e>
     11c:	24 2b       	or	r18, r20
     11e:	35 2b       	or	r19, r21
     120:	30 93 9e 00 	sts	0x009E, r19
     124:	20 93 9d 00 	sts	0x009D, r18
     128:	21 96       	adiw	r28, 0x01	; 1
{
	int digitalValue = 0;
	sensorValue = 0;
	signed int sensorNumber = 0;
	
	for (sensorNumber = 7; sensorNumber >= 0; sensorNumber--)
     12a:	c8 30       	cpi	r28, 0x08	; 8
     12c:	d1 05       	cpc	r29, r1
     12e:	e9 f6       	brne	.-70     	; 0xea <sensorValueConversion+0x34>
// 		Serial_sendInt(temp, DEC);
// 		Serial_sendString("\t");
	}
// 	Serial_sendInt(sensorValue, BIN);
// 	Serial_sendString("\n");
}
     130:	df 91       	pop	r29
     132:	cf 91       	pop	r28
     134:	1f 91       	pop	r17
     136:	0f 91       	pop	r16
     138:	ff 90       	pop	r15
     13a:	ef 90       	pop	r14
     13c:	df 90       	pop	r13
     13e:	cf 90       	pop	r12
     140:	bf 90       	pop	r11
     142:	08 95       	ret

00000144 <sensorMapping>:



void sensorMapping(void)
{
	prev_mappedValue = mappedValue;
     144:	80 91 9b 00 	lds	r24, 0x009B
     148:	90 91 9c 00 	lds	r25, 0x009C
     14c:	90 93 9a 00 	sts	0x009A, r25
     150:	80 93 99 00 	sts	0x0099, r24
	if (sensorValue == 0b00000000) mappedValue = prev_mappedValue;
     154:	80 91 9d 00 	lds	r24, 0x009D
     158:	90 91 9e 00 	lds	r25, 0x009E
     15c:	89 2b       	or	r24, r25
     15e:	49 f4       	brne	.+18     	; 0x172 <sensorMapping+0x2e>
     160:	80 91 99 00 	lds	r24, 0x0099
     164:	90 91 9a 00 	lds	r25, 0x009A
     168:	90 93 9c 00 	sts	0x009C, r25
     16c:	80 93 9b 00 	sts	0x009B, r24
     170:	08 95       	ret
	else if (sensorValue == 0b11111111) mappedValue = 0;
     172:	80 91 9d 00 	lds	r24, 0x009D
     176:	90 91 9e 00 	lds	r25, 0x009E
     17a:	8f 3f       	cpi	r24, 0xFF	; 255
     17c:	91 05       	cpc	r25, r1
     17e:	29 f4       	brne	.+10     	; 0x18a <sensorMapping+0x46>
     180:	10 92 9c 00 	sts	0x009C, r1
     184:	10 92 9b 00 	sts	0x009B, r1
     188:	08 95       	ret
	
	else if ((sensorValue == 0b00011001) || (sensorValue == 0b00001001) || (sensorValue == 0b00010001) || (sensorValue == 0b00110001) || (sensorValue == 0b01110001) || (sensorValue == 0b01100001) || (sensorValue == 0b01100011)) mappedValue = 120;
     18a:	80 91 9d 00 	lds	r24, 0x009D
     18e:	90 91 9e 00 	lds	r25, 0x009E
     192:	49 97       	sbiw	r24, 0x19	; 25
     194:	39 f1       	breq	.+78     	; 0x1e4 <sensorMapping+0xa0>
     196:	80 91 9d 00 	lds	r24, 0x009D
     19a:	90 91 9e 00 	lds	r25, 0x009E
     19e:	09 97       	sbiw	r24, 0x09	; 9
     1a0:	09 f1       	breq	.+66     	; 0x1e4 <sensorMapping+0xa0>
     1a2:	80 91 9d 00 	lds	r24, 0x009D
     1a6:	90 91 9e 00 	lds	r25, 0x009E
     1aa:	41 97       	sbiw	r24, 0x11	; 17
     1ac:	d9 f0       	breq	.+54     	; 0x1e4 <sensorMapping+0xa0>
     1ae:	80 91 9d 00 	lds	r24, 0x009D
     1b2:	90 91 9e 00 	lds	r25, 0x009E
     1b6:	c1 97       	sbiw	r24, 0x31	; 49
     1b8:	a9 f0       	breq	.+42     	; 0x1e4 <sensorMapping+0xa0>
     1ba:	80 91 9d 00 	lds	r24, 0x009D
     1be:	90 91 9e 00 	lds	r25, 0x009E
     1c2:	81 37       	cpi	r24, 0x71	; 113
     1c4:	91 05       	cpc	r25, r1
     1c6:	71 f0       	breq	.+28     	; 0x1e4 <sensorMapping+0xa0>
     1c8:	80 91 9d 00 	lds	r24, 0x009D
     1cc:	90 91 9e 00 	lds	r25, 0x009E
     1d0:	81 36       	cpi	r24, 0x61	; 97
     1d2:	91 05       	cpc	r25, r1
     1d4:	39 f0       	breq	.+14     	; 0x1e4 <sensorMapping+0xa0>
     1d6:	80 91 9d 00 	lds	r24, 0x009D
     1da:	90 91 9e 00 	lds	r25, 0x009E
     1de:	83 36       	cpi	r24, 0x63	; 99
     1e0:	91 05       	cpc	r25, r1
     1e2:	39 f4       	brne	.+14     	; 0x1f2 <sensorMapping+0xae>
     1e4:	88 e7       	ldi	r24, 0x78	; 120
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	90 93 9c 00 	sts	0x009C, r25
     1ec:	80 93 9b 00 	sts	0x009B, r24
     1f0:	08 95       	ret
	else if ((sensorValue == 0b00001011) || (sensorValue == 0b00010011) || (sensorValue == 0b00011011) || (sensorValue == 0b00001010) || (sensorValue == 0b00010010) || (sensorValue == 0b01110111) || (sensorValue == 0b01110011) || (sensorValue == 0b00110111) || (sensorValue == 0b00011101) || (sensorValue == 0b01100111) || (sensorValue == 0b00001101) || (sensorValue == 0b00111001) || (sensorValue == 0b00110011)) mappedValue = 120;
     1f2:	80 91 9d 00 	lds	r24, 0x009D
     1f6:	90 91 9e 00 	lds	r25, 0x009E
     1fa:	0b 97       	sbiw	r24, 0x0b	; 11
     1fc:	09 f4       	brne	.+2      	; 0x200 <sensorMapping+0xbc>
     1fe:	4d c0       	rjmp	.+154    	; 0x29a <sensorMapping+0x156>
     200:	80 91 9d 00 	lds	r24, 0x009D
     204:	90 91 9e 00 	lds	r25, 0x009E
     208:	43 97       	sbiw	r24, 0x13	; 19
     20a:	09 f4       	brne	.+2      	; 0x20e <sensorMapping+0xca>
     20c:	46 c0       	rjmp	.+140    	; 0x29a <sensorMapping+0x156>
     20e:	80 91 9d 00 	lds	r24, 0x009D
     212:	90 91 9e 00 	lds	r25, 0x009E
     216:	4b 97       	sbiw	r24, 0x1b	; 27
     218:	09 f4       	brne	.+2      	; 0x21c <sensorMapping+0xd8>
     21a:	3f c0       	rjmp	.+126    	; 0x29a <sensorMapping+0x156>
     21c:	80 91 9d 00 	lds	r24, 0x009D
     220:	90 91 9e 00 	lds	r25, 0x009E
     224:	0a 97       	sbiw	r24, 0x0a	; 10
     226:	c9 f1       	breq	.+114    	; 0x29a <sensorMapping+0x156>
     228:	80 91 9d 00 	lds	r24, 0x009D
     22c:	90 91 9e 00 	lds	r25, 0x009E
     230:	42 97       	sbiw	r24, 0x12	; 18
     232:	99 f1       	breq	.+102    	; 0x29a <sensorMapping+0x156>
     234:	80 91 9d 00 	lds	r24, 0x009D
     238:	90 91 9e 00 	lds	r25, 0x009E
     23c:	87 37       	cpi	r24, 0x77	; 119
     23e:	91 05       	cpc	r25, r1
     240:	61 f1       	breq	.+88     	; 0x29a <sensorMapping+0x156>
     242:	80 91 9d 00 	lds	r24, 0x009D
     246:	90 91 9e 00 	lds	r25, 0x009E
     24a:	83 37       	cpi	r24, 0x73	; 115
     24c:	91 05       	cpc	r25, r1
     24e:	29 f1       	breq	.+74     	; 0x29a <sensorMapping+0x156>
     250:	80 91 9d 00 	lds	r24, 0x009D
     254:	90 91 9e 00 	lds	r25, 0x009E
     258:	c7 97       	sbiw	r24, 0x37	; 55
     25a:	f9 f0       	breq	.+62     	; 0x29a <sensorMapping+0x156>
     25c:	80 91 9d 00 	lds	r24, 0x009D
     260:	90 91 9e 00 	lds	r25, 0x009E
     264:	4d 97       	sbiw	r24, 0x1d	; 29
     266:	c9 f0       	breq	.+50     	; 0x29a <sensorMapping+0x156>
     268:	80 91 9d 00 	lds	r24, 0x009D
     26c:	90 91 9e 00 	lds	r25, 0x009E
     270:	87 36       	cpi	r24, 0x67	; 103
     272:	91 05       	cpc	r25, r1
     274:	91 f0       	breq	.+36     	; 0x29a <sensorMapping+0x156>
     276:	80 91 9d 00 	lds	r24, 0x009D
     27a:	90 91 9e 00 	lds	r25, 0x009E
     27e:	0d 97       	sbiw	r24, 0x0d	; 13
     280:	61 f0       	breq	.+24     	; 0x29a <sensorMapping+0x156>
     282:	80 91 9d 00 	lds	r24, 0x009D
     286:	90 91 9e 00 	lds	r25, 0x009E
     28a:	c9 97       	sbiw	r24, 0x39	; 57
     28c:	31 f0       	breq	.+12     	; 0x29a <sensorMapping+0x156>
     28e:	80 91 9d 00 	lds	r24, 0x009D
     292:	90 91 9e 00 	lds	r25, 0x009E
     296:	c3 97       	sbiw	r24, 0x33	; 51
     298:	39 f4       	brne	.+14     	; 0x2a8 <sensorMapping+0x164>
     29a:	88 e7       	ldi	r24, 0x78	; 120
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	90 93 9c 00 	sts	0x009C, r25
     2a2:	80 93 9b 00 	sts	0x009B, r24
     2a6:	08 95       	ret
	else if ((sensorValue == 0b00000111) || (sensorValue == 0b00001111) || (sensorValue == 0b00011111 || sensorValue == 0b00111111 || sensorValue == 0b01111111)) mappedValue = 100;
     2a8:	80 91 9d 00 	lds	r24, 0x009D
     2ac:	90 91 9e 00 	lds	r25, 0x009E
     2b0:	07 97       	sbiw	r24, 0x07	; 7
     2b2:	c9 f0       	breq	.+50     	; 0x2e6 <sensorMapping+0x1a2>
     2b4:	80 91 9d 00 	lds	r24, 0x009D
     2b8:	90 91 9e 00 	lds	r25, 0x009E
     2bc:	0f 97       	sbiw	r24, 0x0f	; 15
     2be:	99 f0       	breq	.+38     	; 0x2e6 <sensorMapping+0x1a2>
     2c0:	80 91 9d 00 	lds	r24, 0x009D
     2c4:	90 91 9e 00 	lds	r25, 0x009E
     2c8:	4f 97       	sbiw	r24, 0x1f	; 31
     2ca:	69 f0       	breq	.+26     	; 0x2e6 <sensorMapping+0x1a2>
     2cc:	80 91 9d 00 	lds	r24, 0x009D
     2d0:	90 91 9e 00 	lds	r25, 0x009E
     2d4:	cf 97       	sbiw	r24, 0x3f	; 63
     2d6:	39 f0       	breq	.+14     	; 0x2e6 <sensorMapping+0x1a2>
     2d8:	80 91 9d 00 	lds	r24, 0x009D
     2dc:	90 91 9e 00 	lds	r25, 0x009E
     2e0:	8f 37       	cpi	r24, 0x7F	; 127
     2e2:	91 05       	cpc	r25, r1
     2e4:	39 f4       	brne	.+14     	; 0x2f4 <sensorMapping+0x1b0>
     2e6:	84 e6       	ldi	r24, 0x64	; 100
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	90 93 9c 00 	sts	0x009C, r25
     2ee:	80 93 9b 00 	sts	0x009B, r24
     2f2:	08 95       	ret
	else if (sensorValue == 0b00000001) mappedValue = 70;
     2f4:	80 91 9d 00 	lds	r24, 0x009D
     2f8:	90 91 9e 00 	lds	r25, 0x009E
     2fc:	01 97       	sbiw	r24, 0x01	; 1
     2fe:	39 f4       	brne	.+14     	; 0x30e <sensorMapping+0x1ca>
     300:	86 e4       	ldi	r24, 0x46	; 70
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	90 93 9c 00 	sts	0x009C, r25
     308:	80 93 9b 00 	sts	0x009B, r24
     30c:	08 95       	ret
	else if (sensorValue == 0b00000011) mappedValue = 60;
     30e:	80 91 9d 00 	lds	r24, 0x009D
     312:	90 91 9e 00 	lds	r25, 0x009E
     316:	03 97       	sbiw	r24, 0x03	; 3
     318:	39 f4       	brne	.+14     	; 0x328 <sensorMapping+0x1e4>
     31a:	8c e3       	ldi	r24, 0x3C	; 60
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	90 93 9c 00 	sts	0x009C, r25
     322:	80 93 9b 00 	sts	0x009B, r24
     326:	08 95       	ret
	else if (sensorValue == 0b00000010 ||/* sensorValue == 0b00000111 ||*/ sensorValue == 0b11111101) mappedValue = 30;
     328:	80 91 9d 00 	lds	r24, 0x009D
     32c:	90 91 9e 00 	lds	r25, 0x009E
     330:	02 97       	sbiw	r24, 0x02	; 2
     332:	39 f0       	breq	.+14     	; 0x342 <sensorMapping+0x1fe>
     334:	80 91 9d 00 	lds	r24, 0x009D
     338:	90 91 9e 00 	lds	r25, 0x009E
     33c:	8d 3f       	cpi	r24, 0xFD	; 253
     33e:	91 05       	cpc	r25, r1
     340:	39 f4       	brne	.+14     	; 0x350 <sensorMapping+0x20c>
     342:	8e e1       	ldi	r24, 0x1E	; 30
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	90 93 9c 00 	sts	0x009C, r25
     34a:	80 93 9b 00 	sts	0x009B, r24
     34e:	08 95       	ret
	else if (sensorValue == 0b00000110 || sensorValue == 0b11111001) mappedValue = 20;
     350:	80 91 9d 00 	lds	r24, 0x009D
     354:	90 91 9e 00 	lds	r25, 0x009E
     358:	06 97       	sbiw	r24, 0x06	; 6
     35a:	39 f0       	breq	.+14     	; 0x36a <sensorMapping+0x226>
     35c:	80 91 9d 00 	lds	r24, 0x009D
     360:	90 91 9e 00 	lds	r25, 0x009E
     364:	89 3f       	cpi	r24, 0xF9	; 249
     366:	91 05       	cpc	r25, r1
     368:	39 f4       	brne	.+14     	; 0x378 <sensorMapping+0x234>
     36a:	84 e1       	ldi	r24, 0x14	; 20
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	90 93 9c 00 	sts	0x009C, r25
     372:	80 93 9b 00 	sts	0x009B, r24
     376:	08 95       	ret
	else if (sensorValue == 0b00000100 || sensorValue == 0b00001110) mappedValue = 15;
     378:	80 91 9d 00 	lds	r24, 0x009D
     37c:	90 91 9e 00 	lds	r25, 0x009E
     380:	04 97       	sbiw	r24, 0x04	; 4
     382:	31 f0       	breq	.+12     	; 0x390 <sensorMapping+0x24c>
     384:	80 91 9d 00 	lds	r24, 0x009D
     388:	90 91 9e 00 	lds	r25, 0x009E
     38c:	0e 97       	sbiw	r24, 0x0e	; 14
     38e:	39 f4       	brne	.+14     	; 0x39e <sensorMapping+0x25a>
     390:	8f e0       	ldi	r24, 0x0F	; 15
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	90 93 9c 00 	sts	0x009C, r25
     398:	80 93 9b 00 	sts	0x009B, r24
     39c:	08 95       	ret
	else if (sensorValue == 0b11111011)
     39e:	80 91 9d 00 	lds	r24, 0x009D
     3a2:	90 91 9e 00 	lds	r25, 0x009E
     3a6:	8b 3f       	cpi	r24, 0xFB	; 251
     3a8:	91 05       	cpc	r25, r1
     3aa:	39 f4       	brne	.+14     	; 0x3ba <sensorMapping+0x276>
	{
		mappedValue = 15;
     3ac:	8f e0       	ldi	r24, 0x0F	; 15
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	90 93 9c 00 	sts	0x009C, r25
     3b4:	80 93 9b 00 	sts	0x009B, r24
     3b8:	08 95       	ret
// 		inverseLevel++;
	}
	else if (sensorValue == 0b00001100) mappedValue = 10;
     3ba:	80 91 9d 00 	lds	r24, 0x009D
     3be:	90 91 9e 00 	lds	r25, 0x009E
     3c2:	0c 97       	sbiw	r24, 0x0c	; 12
     3c4:	39 f4       	brne	.+14     	; 0x3d4 <sensorMapping+0x290>
     3c6:	8a e0       	ldi	r24, 0x0A	; 10
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	90 93 9c 00 	sts	0x009C, r25
     3ce:	80 93 9b 00 	sts	0x009B, r24
     3d2:	08 95       	ret
	else if (sensorValue == 0b11110011)
     3d4:	80 91 9d 00 	lds	r24, 0x009D
     3d8:	90 91 9e 00 	lds	r25, 0x009E
     3dc:	83 3f       	cpi	r24, 0xF3	; 243
     3de:	91 05       	cpc	r25, r1
     3e0:	39 f4       	brne	.+14     	; 0x3f0 <sensorMapping+0x2ac>
	{
		mappedValue = 10;
     3e2:	8a e0       	ldi	r24, 0x0A	; 10
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	90 93 9c 00 	sts	0x009C, r25
     3ea:	80 93 9b 00 	sts	0x009B, r24
     3ee:	08 95       	ret
// 		inverseLevel++;
	}
	else if (sensorValue == 0b00001000 || sensorValue == 0b00011100) mappedValue = 5;
     3f0:	80 91 9d 00 	lds	r24, 0x009D
     3f4:	90 91 9e 00 	lds	r25, 0x009E
     3f8:	08 97       	sbiw	r24, 0x08	; 8
     3fa:	31 f0       	breq	.+12     	; 0x408 <sensorMapping+0x2c4>
     3fc:	80 91 9d 00 	lds	r24, 0x009D
     400:	90 91 9e 00 	lds	r25, 0x009E
     404:	4c 97       	sbiw	r24, 0x1c	; 28
     406:	39 f4       	brne	.+14     	; 0x416 <sensorMapping+0x2d2>
     408:	85 e0       	ldi	r24, 0x05	; 5
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	90 93 9c 00 	sts	0x009C, r25
     410:	80 93 9b 00 	sts	0x009B, r24
     414:	08 95       	ret
	else if (sensorValue == 0b11110111)
     416:	80 91 9d 00 	lds	r24, 0x009D
     41a:	90 91 9e 00 	lds	r25, 0x009E
     41e:	87 3f       	cpi	r24, 0xF7	; 247
     420:	91 05       	cpc	r25, r1
     422:	39 f4       	brne	.+14     	; 0x432 <sensorMapping+0x2ee>
	{
		mappedValue = 5;
     424:	85 e0       	ldi	r24, 0x05	; 5
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	90 93 9c 00 	sts	0x009C, r25
     42c:	80 93 9b 00 	sts	0x009B, r24
     430:	08 95       	ret
//		inverseLevel++;
	}
	else if (sensorValue == 0b00011000 /*|| sensorValue == 0b11101110 || sensorValue == 0b01110111 || sensorValue == 0b01100110 || sensorValue == 0b10011001 || sensorValue == 0b00110111 || sensorValue == 0b11101100*/) mappedValue = 0;
     432:	80 91 9d 00 	lds	r24, 0x009D
     436:	90 91 9e 00 	lds	r25, 0x009E
     43a:	48 97       	sbiw	r24, 0x18	; 24
     43c:	29 f4       	brne	.+10     	; 0x448 <sensorMapping+0x304>
     43e:	10 92 9c 00 	sts	0x009C, r1
     442:	10 92 9b 00 	sts	0x009B, r1
     446:	08 95       	ret
	else if (sensorValue == 0b11100111)
     448:	80 91 9d 00 	lds	r24, 0x009D
     44c:	90 91 9e 00 	lds	r25, 0x009E
     450:	87 3e       	cpi	r24, 0xE7	; 231
     452:	91 05       	cpc	r25, r1
     454:	29 f4       	brne	.+10     	; 0x460 <sensorMapping+0x31c>
	{
		mappedValue = 0;
     456:	10 92 9c 00 	sts	0x009C, r1
     45a:	10 92 9b 00 	sts	0x009B, r1
     45e:	08 95       	ret
//		inverseLevel++;
	}
	else if (sensorValue == 0b11101110 || sensorValue == 0b01110111 || sensorValue == 0b01100110 || sensorValue == 0b10011001 || sensorValue == 0b01111110 || sensorValue == 0b00111100 || sensorValue == 0b01111100 || sensorValue == 0b00111110 || sensorValue == 0b01110111 || sensorValue == 0b11101110)  mappedValue = .5;
     460:	80 91 9d 00 	lds	r24, 0x009D
     464:	90 91 9e 00 	lds	r25, 0x009E
     468:	8e 3e       	cpi	r24, 0xEE	; 238
     46a:	91 05       	cpc	r25, r1
     46c:	e9 f1       	breq	.+122    	; 0x4e8 <sensorMapping+0x3a4>
     46e:	80 91 9d 00 	lds	r24, 0x009D
     472:	90 91 9e 00 	lds	r25, 0x009E
     476:	87 37       	cpi	r24, 0x77	; 119
     478:	91 05       	cpc	r25, r1
     47a:	b1 f1       	breq	.+108    	; 0x4e8 <sensorMapping+0x3a4>
     47c:	80 91 9d 00 	lds	r24, 0x009D
     480:	90 91 9e 00 	lds	r25, 0x009E
     484:	86 36       	cpi	r24, 0x66	; 102
     486:	91 05       	cpc	r25, r1
     488:	79 f1       	breq	.+94     	; 0x4e8 <sensorMapping+0x3a4>
     48a:	80 91 9d 00 	lds	r24, 0x009D
     48e:	90 91 9e 00 	lds	r25, 0x009E
     492:	89 39       	cpi	r24, 0x99	; 153
     494:	91 05       	cpc	r25, r1
     496:	41 f1       	breq	.+80     	; 0x4e8 <sensorMapping+0x3a4>
     498:	80 91 9d 00 	lds	r24, 0x009D
     49c:	90 91 9e 00 	lds	r25, 0x009E
     4a0:	8e 37       	cpi	r24, 0x7E	; 126
     4a2:	91 05       	cpc	r25, r1
     4a4:	09 f1       	breq	.+66     	; 0x4e8 <sensorMapping+0x3a4>
     4a6:	80 91 9d 00 	lds	r24, 0x009D
     4aa:	90 91 9e 00 	lds	r25, 0x009E
     4ae:	cc 97       	sbiw	r24, 0x3c	; 60
     4b0:	d9 f0       	breq	.+54     	; 0x4e8 <sensorMapping+0x3a4>
     4b2:	80 91 9d 00 	lds	r24, 0x009D
     4b6:	90 91 9e 00 	lds	r25, 0x009E
     4ba:	8c 37       	cpi	r24, 0x7C	; 124
     4bc:	91 05       	cpc	r25, r1
     4be:	a1 f0       	breq	.+40     	; 0x4e8 <sensorMapping+0x3a4>
     4c0:	80 91 9d 00 	lds	r24, 0x009D
     4c4:	90 91 9e 00 	lds	r25, 0x009E
     4c8:	ce 97       	sbiw	r24, 0x3e	; 62
     4ca:	71 f0       	breq	.+28     	; 0x4e8 <sensorMapping+0x3a4>
     4cc:	80 91 9d 00 	lds	r24, 0x009D
     4d0:	90 91 9e 00 	lds	r25, 0x009E
     4d4:	87 37       	cpi	r24, 0x77	; 119
     4d6:	91 05       	cpc	r25, r1
     4d8:	39 f0       	breq	.+14     	; 0x4e8 <sensorMapping+0x3a4>
     4da:	80 91 9d 00 	lds	r24, 0x009D
     4de:	90 91 9e 00 	lds	r25, 0x009E
     4e2:	8e 3e       	cpi	r24, 0xEE	; 238
     4e4:	91 05       	cpc	r25, r1
     4e6:	29 f4       	brne	.+10     	; 0x4f2 <sensorMapping+0x3ae>
     4e8:	10 92 9c 00 	sts	0x009C, r1
     4ec:	10 92 9b 00 	sts	0x009B, r1
     4f0:	08 95       	ret
	else if (sensorValue == 0b00010000 || sensorValue == 0b00111000) mappedValue = -5;
     4f2:	80 91 9d 00 	lds	r24, 0x009D
     4f6:	90 91 9e 00 	lds	r25, 0x009E
     4fa:	40 97       	sbiw	r24, 0x10	; 16
     4fc:	31 f0       	breq	.+12     	; 0x50a <sensorMapping+0x3c6>
     4fe:	80 91 9d 00 	lds	r24, 0x009D
     502:	90 91 9e 00 	lds	r25, 0x009E
     506:	c8 97       	sbiw	r24, 0x38	; 56
     508:	39 f4       	brne	.+14     	; 0x518 <sensorMapping+0x3d4>
     50a:	8b ef       	ldi	r24, 0xFB	; 251
     50c:	9f ef       	ldi	r25, 0xFF	; 255
     50e:	90 93 9c 00 	sts	0x009C, r25
     512:	80 93 9b 00 	sts	0x009B, r24
     516:	08 95       	ret
	else if (sensorValue == 0b11101111)
     518:	80 91 9d 00 	lds	r24, 0x009D
     51c:	90 91 9e 00 	lds	r25, 0x009E
     520:	8f 3e       	cpi	r24, 0xEF	; 239
     522:	91 05       	cpc	r25, r1
     524:	39 f4       	brne	.+14     	; 0x534 <sensorMapping+0x3f0>
	{
		mappedValue = -5;
     526:	8b ef       	ldi	r24, 0xFB	; 251
     528:	9f ef       	ldi	r25, 0xFF	; 255
     52a:	90 93 9c 00 	sts	0x009C, r25
     52e:	80 93 9b 00 	sts	0x009B, r24
     532:	08 95       	ret
//		inverseLevel++;
	}
	else if (sensorValue == 0b00110000) mappedValue = -10;
     534:	80 91 9d 00 	lds	r24, 0x009D
     538:	90 91 9e 00 	lds	r25, 0x009E
     53c:	c0 97       	sbiw	r24, 0x30	; 48
     53e:	39 f4       	brne	.+14     	; 0x54e <sensorMapping+0x40a>
     540:	86 ef       	ldi	r24, 0xF6	; 246
     542:	9f ef       	ldi	r25, 0xFF	; 255
     544:	90 93 9c 00 	sts	0x009C, r25
     548:	80 93 9b 00 	sts	0x009B, r24
     54c:	08 95       	ret
	else if (sensorValue == 0b11001111)
     54e:	80 91 9d 00 	lds	r24, 0x009D
     552:	90 91 9e 00 	lds	r25, 0x009E
     556:	8f 3c       	cpi	r24, 0xCF	; 207
     558:	91 05       	cpc	r25, r1
     55a:	39 f4       	brne	.+14     	; 0x56a <sensorMapping+0x426>
	{
		mappedValue = -10;
     55c:	86 ef       	ldi	r24, 0xF6	; 246
     55e:	9f ef       	ldi	r25, 0xFF	; 255
     560:	90 93 9c 00 	sts	0x009C, r25
     564:	80 93 9b 00 	sts	0x009B, r24
     568:	08 95       	ret
//		inverseLevel++;
	}
	else if (sensorValue == 0b00100000 || sensorValue == 0b01110000) mappedValue = -15;
     56a:	80 91 9d 00 	lds	r24, 0x009D
     56e:	90 91 9e 00 	lds	r25, 0x009E
     572:	80 97       	sbiw	r24, 0x20	; 32
     574:	39 f0       	breq	.+14     	; 0x584 <sensorMapping+0x440>
     576:	80 91 9d 00 	lds	r24, 0x009D
     57a:	90 91 9e 00 	lds	r25, 0x009E
     57e:	80 37       	cpi	r24, 0x70	; 112
     580:	91 05       	cpc	r25, r1
     582:	39 f4       	brne	.+14     	; 0x592 <sensorMapping+0x44e>
     584:	81 ef       	ldi	r24, 0xF1	; 241
     586:	9f ef       	ldi	r25, 0xFF	; 255
     588:	90 93 9c 00 	sts	0x009C, r25
     58c:	80 93 9b 00 	sts	0x009B, r24
     590:	08 95       	ret
	else if (sensorValue == 0b11011111)
     592:	80 91 9d 00 	lds	r24, 0x009D
     596:	90 91 9e 00 	lds	r25, 0x009E
     59a:	8f 3d       	cpi	r24, 0xDF	; 223
     59c:	91 05       	cpc	r25, r1
     59e:	39 f4       	brne	.+14     	; 0x5ae <sensorMapping+0x46a>
	{
		mappedValue = -15;
     5a0:	81 ef       	ldi	r24, 0xF1	; 241
     5a2:	9f ef       	ldi	r25, 0xFF	; 255
     5a4:	90 93 9c 00 	sts	0x009C, r25
     5a8:	80 93 9b 00 	sts	0x009B, r24
     5ac:	08 95       	ret
//		inverseLevel++;
	}
	else if (sensorValue == 0b01100000 || sensorValue == 0b10011111) mappedValue = -20;
     5ae:	80 91 9d 00 	lds	r24, 0x009D
     5b2:	90 91 9e 00 	lds	r25, 0x009E
     5b6:	80 36       	cpi	r24, 0x60	; 96
     5b8:	91 05       	cpc	r25, r1
     5ba:	39 f0       	breq	.+14     	; 0x5ca <sensorMapping+0x486>
     5bc:	80 91 9d 00 	lds	r24, 0x009D
     5c0:	90 91 9e 00 	lds	r25, 0x009E
     5c4:	8f 39       	cpi	r24, 0x9F	; 159
     5c6:	91 05       	cpc	r25, r1
     5c8:	39 f4       	brne	.+14     	; 0x5d8 <sensorMapping+0x494>
     5ca:	8c ee       	ldi	r24, 0xEC	; 236
     5cc:	9f ef       	ldi	r25, 0xFF	; 255
     5ce:	90 93 9c 00 	sts	0x009C, r25
     5d2:	80 93 9b 00 	sts	0x009B, r24
     5d6:	08 95       	ret
	else if (sensorValue == 0b01000000 || /*sensorValue == 0b11100000 ||*/ sensorValue == 0b10111111) mappedValue = -30;
     5d8:	80 91 9d 00 	lds	r24, 0x009D
     5dc:	90 91 9e 00 	lds	r25, 0x009E
     5e0:	80 34       	cpi	r24, 0x40	; 64
     5e2:	91 05       	cpc	r25, r1
     5e4:	39 f0       	breq	.+14     	; 0x5f4 <sensorMapping+0x4b0>
     5e6:	80 91 9d 00 	lds	r24, 0x009D
     5ea:	90 91 9e 00 	lds	r25, 0x009E
     5ee:	8f 3b       	cpi	r24, 0xBF	; 191
     5f0:	91 05       	cpc	r25, r1
     5f2:	39 f4       	brne	.+14     	; 0x602 <sensorMapping+0x4be>
     5f4:	82 ee       	ldi	r24, 0xE2	; 226
     5f6:	9f ef       	ldi	r25, 0xFF	; 255
     5f8:	90 93 9c 00 	sts	0x009C, r25
     5fc:	80 93 9b 00 	sts	0x009B, r24
     600:	08 95       	ret
	else if (sensorValue == 0b11000000) mappedValue = -60;
     602:	80 91 9d 00 	lds	r24, 0x009D
     606:	90 91 9e 00 	lds	r25, 0x009E
     60a:	80 3c       	cpi	r24, 0xC0	; 192
     60c:	91 05       	cpc	r25, r1
     60e:	39 f4       	brne	.+14     	; 0x61e <sensorMapping+0x4da>
     610:	84 ec       	ldi	r24, 0xC4	; 196
     612:	9f ef       	ldi	r25, 0xFF	; 255
     614:	90 93 9c 00 	sts	0x009C, r25
     618:	80 93 9b 00 	sts	0x009B, r24
     61c:	08 95       	ret
	else if (sensorValue == 0b10000000) mappedValue = -70;
     61e:	80 91 9d 00 	lds	r24, 0x009D
     622:	90 91 9e 00 	lds	r25, 0x009E
     626:	80 38       	cpi	r24, 0x80	; 128
     628:	91 05       	cpc	r25, r1
     62a:	39 f4       	brne	.+14     	; 0x63a <sensorMapping+0x4f6>
     62c:	8a eb       	ldi	r24, 0xBA	; 186
     62e:	9f ef       	ldi	r25, 0xFF	; 255
     630:	90 93 9c 00 	sts	0x009C, r25
     634:	80 93 9b 00 	sts	0x009B, r24
     638:	08 95       	ret
	else if ((sensorValue == 0b11100000) || (sensorValue == 0b11110000) || (sensorValue == 0b11111000 || sensorValue == 0b11111100 || sensorValue == 0b11111110)) mappedValue = -100;
     63a:	80 91 9d 00 	lds	r24, 0x009D
     63e:	90 91 9e 00 	lds	r25, 0x009E
     642:	80 3e       	cpi	r24, 0xE0	; 224
     644:	91 05       	cpc	r25, r1
     646:	e1 f0       	breq	.+56     	; 0x680 <sensorMapping+0x53c>
     648:	80 91 9d 00 	lds	r24, 0x009D
     64c:	90 91 9e 00 	lds	r25, 0x009E
     650:	80 3f       	cpi	r24, 0xF0	; 240
     652:	91 05       	cpc	r25, r1
     654:	a9 f0       	breq	.+42     	; 0x680 <sensorMapping+0x53c>
     656:	80 91 9d 00 	lds	r24, 0x009D
     65a:	90 91 9e 00 	lds	r25, 0x009E
     65e:	88 3f       	cpi	r24, 0xF8	; 248
     660:	91 05       	cpc	r25, r1
     662:	71 f0       	breq	.+28     	; 0x680 <sensorMapping+0x53c>
     664:	80 91 9d 00 	lds	r24, 0x009D
     668:	90 91 9e 00 	lds	r25, 0x009E
     66c:	8c 3f       	cpi	r24, 0xFC	; 252
     66e:	91 05       	cpc	r25, r1
     670:	39 f0       	breq	.+14     	; 0x680 <sensorMapping+0x53c>
     672:	80 91 9d 00 	lds	r24, 0x009D
     676:	90 91 9e 00 	lds	r25, 0x009E
     67a:	8e 3f       	cpi	r24, 0xFE	; 254
     67c:	91 05       	cpc	r25, r1
     67e:	39 f4       	brne	.+14     	; 0x68e <sensorMapping+0x54a>
     680:	8c e9       	ldi	r24, 0x9C	; 156
     682:	9f ef       	ldi	r25, 0xFF	; 255
     684:	90 93 9c 00 	sts	0x009C, r25
     688:	80 93 9b 00 	sts	0x009B, r24
     68c:	08 95       	ret
	else if ((sensorValue == 0b11011000) || (sensorValue == 0b11010000) || (sensorValue == 0b11001000) || (sensorValue == 0b01010000) || (sensorValue == 0b01001000) || (sensorValue == 0b11101110) || (sensorValue == 0b11001110) || (sensorValue == 0b11101100) /*eita|| (sensorValue == 0b10111000)*/ || (sensorValue == 0b11100110) || (sensorValue == 0b10110000) || (sensorValue == 0b10011100) || (sensorValue == 0b11001100)) mappedValue = -120;
     68e:	80 91 9d 00 	lds	r24, 0x009D
     692:	90 91 9e 00 	lds	r25, 0x009E
     696:	88 3d       	cpi	r24, 0xD8	; 216
     698:	91 05       	cpc	r25, r1
     69a:	09 f4       	brne	.+2      	; 0x69e <sensorMapping+0x55a>
     69c:	4f c0       	rjmp	.+158    	; 0x73c <sensorMapping+0x5f8>
     69e:	80 91 9d 00 	lds	r24, 0x009D
     6a2:	90 91 9e 00 	lds	r25, 0x009E
     6a6:	80 3d       	cpi	r24, 0xD0	; 208
     6a8:	91 05       	cpc	r25, r1
     6aa:	09 f4       	brne	.+2      	; 0x6ae <sensorMapping+0x56a>
     6ac:	47 c0       	rjmp	.+142    	; 0x73c <sensorMapping+0x5f8>
     6ae:	80 91 9d 00 	lds	r24, 0x009D
     6b2:	90 91 9e 00 	lds	r25, 0x009E
     6b6:	88 3c       	cpi	r24, 0xC8	; 200
     6b8:	91 05       	cpc	r25, r1
     6ba:	09 f4       	brne	.+2      	; 0x6be <sensorMapping+0x57a>
     6bc:	3f c0       	rjmp	.+126    	; 0x73c <sensorMapping+0x5f8>
     6be:	80 91 9d 00 	lds	r24, 0x009D
     6c2:	90 91 9e 00 	lds	r25, 0x009E
     6c6:	80 35       	cpi	r24, 0x50	; 80
     6c8:	91 05       	cpc	r25, r1
     6ca:	c1 f1       	breq	.+112    	; 0x73c <sensorMapping+0x5f8>
     6cc:	80 91 9d 00 	lds	r24, 0x009D
     6d0:	90 91 9e 00 	lds	r25, 0x009E
     6d4:	88 34       	cpi	r24, 0x48	; 72
     6d6:	91 05       	cpc	r25, r1
     6d8:	89 f1       	breq	.+98     	; 0x73c <sensorMapping+0x5f8>
     6da:	80 91 9d 00 	lds	r24, 0x009D
     6de:	90 91 9e 00 	lds	r25, 0x009E
     6e2:	8e 3e       	cpi	r24, 0xEE	; 238
     6e4:	91 05       	cpc	r25, r1
     6e6:	51 f1       	breq	.+84     	; 0x73c <sensorMapping+0x5f8>
     6e8:	80 91 9d 00 	lds	r24, 0x009D
     6ec:	90 91 9e 00 	lds	r25, 0x009E
     6f0:	8e 3c       	cpi	r24, 0xCE	; 206
     6f2:	91 05       	cpc	r25, r1
     6f4:	19 f1       	breq	.+70     	; 0x73c <sensorMapping+0x5f8>
     6f6:	80 91 9d 00 	lds	r24, 0x009D
     6fa:	90 91 9e 00 	lds	r25, 0x009E
     6fe:	8c 3e       	cpi	r24, 0xEC	; 236
     700:	91 05       	cpc	r25, r1
     702:	e1 f0       	breq	.+56     	; 0x73c <sensorMapping+0x5f8>
     704:	80 91 9d 00 	lds	r24, 0x009D
     708:	90 91 9e 00 	lds	r25, 0x009E
     70c:	86 3e       	cpi	r24, 0xE6	; 230
     70e:	91 05       	cpc	r25, r1
     710:	a9 f0       	breq	.+42     	; 0x73c <sensorMapping+0x5f8>
     712:	80 91 9d 00 	lds	r24, 0x009D
     716:	90 91 9e 00 	lds	r25, 0x009E
     71a:	80 3b       	cpi	r24, 0xB0	; 176
     71c:	91 05       	cpc	r25, r1
     71e:	71 f0       	breq	.+28     	; 0x73c <sensorMapping+0x5f8>
     720:	80 91 9d 00 	lds	r24, 0x009D
     724:	90 91 9e 00 	lds	r25, 0x009E
     728:	8c 39       	cpi	r24, 0x9C	; 156
     72a:	91 05       	cpc	r25, r1
     72c:	39 f0       	breq	.+14     	; 0x73c <sensorMapping+0x5f8>
     72e:	80 91 9d 00 	lds	r24, 0x009D
     732:	90 91 9e 00 	lds	r25, 0x009E
     736:	8c 3c       	cpi	r24, 0xCC	; 204
     738:	91 05       	cpc	r25, r1
     73a:	39 f4       	brne	.+14     	; 0x74a <sensorMapping+0x606>
     73c:	88 e8       	ldi	r24, 0x88	; 136
     73e:	9f ef       	ldi	r25, 0xFF	; 255
     740:	90 93 9c 00 	sts	0x009C, r25
     744:	80 93 9b 00 	sts	0x009B, r24
     748:	08 95       	ret
	else if ((sensorValue == 0b10011000) || (sensorValue == 0b10010000) || (sensorValue == 0b10001000) || (sensorValue == 0b10001100) || (sensorValue == 0b10001110) || (sensorValue == 0b10000110) || (sensorValue == 0b11000110)) mappedValue = -120;
     74a:	80 91 9d 00 	lds	r24, 0x009D
     74e:	90 91 9e 00 	lds	r25, 0x009E
     752:	88 39       	cpi	r24, 0x98	; 152
     754:	91 05       	cpc	r25, r1
     756:	51 f1       	breq	.+84     	; 0x7ac <sensorMapping+0x668>
     758:	80 91 9d 00 	lds	r24, 0x009D
     75c:	90 91 9e 00 	lds	r25, 0x009E
     760:	80 39       	cpi	r24, 0x90	; 144
     762:	91 05       	cpc	r25, r1
     764:	19 f1       	breq	.+70     	; 0x7ac <sensorMapping+0x668>
     766:	80 91 9d 00 	lds	r24, 0x009D
     76a:	90 91 9e 00 	lds	r25, 0x009E
     76e:	88 38       	cpi	r24, 0x88	; 136
     770:	91 05       	cpc	r25, r1
     772:	e1 f0       	breq	.+56     	; 0x7ac <sensorMapping+0x668>
     774:	80 91 9d 00 	lds	r24, 0x009D
     778:	90 91 9e 00 	lds	r25, 0x009E
     77c:	8c 38       	cpi	r24, 0x8C	; 140
     77e:	91 05       	cpc	r25, r1
     780:	a9 f0       	breq	.+42     	; 0x7ac <sensorMapping+0x668>
     782:	80 91 9d 00 	lds	r24, 0x009D
     786:	90 91 9e 00 	lds	r25, 0x009E
     78a:	8e 38       	cpi	r24, 0x8E	; 142
     78c:	91 05       	cpc	r25, r1
     78e:	71 f0       	breq	.+28     	; 0x7ac <sensorMapping+0x668>
     790:	80 91 9d 00 	lds	r24, 0x009D
     794:	90 91 9e 00 	lds	r25, 0x009E
     798:	86 38       	cpi	r24, 0x86	; 134
     79a:	91 05       	cpc	r25, r1
     79c:	39 f0       	breq	.+14     	; 0x7ac <sensorMapping+0x668>
     79e:	80 91 9d 00 	lds	r24, 0x009D
     7a2:	90 91 9e 00 	lds	r25, 0x009E
     7a6:	86 3c       	cpi	r24, 0xC6	; 198
     7a8:	91 05       	cpc	r25, r1
     7aa:	39 f4       	brne	.+14     	; 0x7ba <sensorMapping+0x676>
     7ac:	88 e8       	ldi	r24, 0x88	; 136
     7ae:	9f ef       	ldi	r25, 0xFF	; 255
     7b0:	90 93 9c 00 	sts	0x009C, r25
     7b4:	80 93 9b 00 	sts	0x009B, r24
     7b8:	08 95       	ret
	else mappedValue = prev_mappedValue;
     7ba:	80 91 99 00 	lds	r24, 0x0099
     7be:	90 91 9a 00 	lds	r25, 0x009A
     7c2:	90 93 9c 00 	sts	0x009C, r25
     7c6:	80 93 9b 00 	sts	0x009B, r24
     7ca:	08 95       	ret

000007cc <setRotationForward>:
	motor2b_PORT &= ~(1 << motor2b_PIN);
}

void setRotationForward(void)
{
	enable1(0);
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	0e 94 25 08 	call	0x104a	; 0x104a <PWM0>
	enable2(0);
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	0e 94 27 08 	call	0x104e	; 0x104e <PWM2>
	
	motor1a_PORT |= (1 << motor1a_PIN);
     7dc:	af 9a       	sbi	0x15, 7	; 21
	motor1b_PORT &= ~(1 << motor1b_PIN);
     7de:	ae 98       	cbi	0x15, 6	; 21
	motor2a_PORT |= (1 << motor2a_PIN);
     7e0:	ad 9a       	sbi	0x15, 5	; 21
	motor2b_PORT &= ~(1 << motor2b_PIN);
     7e2:	ac 98       	cbi	0x15, 4	; 21
     7e4:	08 95       	ret

000007e6 <setRotationLeftSharp>:
}

void setRotationLeftSharp(void)
{
	enable1(0);
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0e 94 25 08 	call	0x104a	; 0x104a <PWM0>
	enable2(0);
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 27 08 	call	0x104e	; 0x104e <PWM2>
	
	motor1a_PORT &= ~(1 << motor1a_PIN);
     7f6:	af 98       	cbi	0x15, 7	; 21
	motor1b_PORT |= (1 << motor1b_PIN);
     7f8:	ae 9a       	sbi	0x15, 6	; 21
	motor2a_PORT |= (1 << motor2a_PIN);
     7fa:	ad 9a       	sbi	0x15, 5	; 21
	motor2b_PORT &= ~(1 << motor2b_PIN);
     7fc:	ac 98       	cbi	0x15, 4	; 21
     7fe:	08 95       	ret

00000800 <setRotationRightSharp>:
}

void setRotationRightSharp(void)
{
	enable1(0);
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	0e 94 25 08 	call	0x104a	; 0x104a <PWM0>
	enable2(0);
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	0e 94 27 08 	call	0x104e	; 0x104e <PWM2>
	
	motor1a_PORT |= (1 << motor1a_PIN);
     810:	af 9a       	sbi	0x15, 7	; 21
	motor1b_PORT &= ~(1 << motor1b_PIN);
     812:	ae 98       	cbi	0x15, 6	; 21
	motor2a_PORT &= ~(1 << motor2a_PIN);
     814:	ad 98       	cbi	0x15, 5	; 21
	motor2b_PORT |= (1 << motor2b_PIN);
     816:	ac 9a       	sbi	0x15, 4	; 21
     818:	08 95       	ret

0000081a <PID_Correction>:
	else mappedValue = prev_mappedValue;
}


void PID_Correction(void) //my algo
{
     81a:	8f 92       	push	r8
     81c:	9f 92       	push	r9
     81e:	af 92       	push	r10
     820:	bf 92       	push	r11
     822:	cf 92       	push	r12
     824:	df 92       	push	r13
     826:	ef 92       	push	r14
     828:	ff 92       	push	r15
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
	error = targetValue - mappedValue;
     832:	c0 91 9b 00 	lds	r28, 0x009B
     836:	d0 91 9c 00 	lds	r29, 0x009C
     83a:	c1 95       	neg	r28
     83c:	c0 93 88 00 	sts	0x0088, r28
	sum_error = (sum_error + error) / 2;
     840:	0c 2f       	mov	r16, r28
     842:	0c 2e       	mov	r0, r28
     844:	00 0c       	add	r0, r0
     846:	11 0b       	sbc	r17, r17
     848:	60 91 85 00 	lds	r22, 0x0085
     84c:	70 91 86 00 	lds	r23, 0x0086
     850:	60 0f       	add	r22, r16
     852:	71 1f       	adc	r23, r17
     854:	77 23       	and	r23, r23
     856:	14 f4       	brge	.+4      	; 0x85c <PID_Correction+0x42>
     858:	6f 5f       	subi	r22, 0xFF	; 255
     85a:	7f 4f       	sbci	r23, 0xFF	; 255
     85c:	7b 01       	movw	r14, r22
     85e:	f5 94       	asr	r15
     860:	e7 94       	ror	r14
     862:	f0 92 86 00 	sts	0x0086, r15
     866:	e0 92 85 00 	sts	0x0085, r14
	
	correction = ((Kp * error) + (Ki * sum_error) + (Kd * (error - prev_error)));
     86a:	6c 2f       	mov	r22, r28
     86c:	0c 2e       	mov	r0, r28
     86e:	00 0c       	add	r0, r0
     870:	77 0b       	sbc	r23, r23
     872:	88 0b       	sbc	r24, r24
     874:	99 0b       	sbc	r25, r25
     876:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <__floatsisf>
     87a:	20 91 64 00 	lds	r18, 0x0064
     87e:	30 91 65 00 	lds	r19, 0x0065
     882:	40 91 66 00 	lds	r20, 0x0066
     886:	50 91 67 00 	lds	r21, 0x0067
     88a:	0e 94 91 09 	call	0x1322	; 0x1322 <__mulsf3>
     88e:	4b 01       	movw	r8, r22
     890:	5c 01       	movw	r10, r24
     892:	b7 01       	movw	r22, r14
     894:	ff 0c       	add	r15, r15
     896:	88 0b       	sbc	r24, r24
     898:	99 0b       	sbc	r25, r25
     89a:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <__floatsisf>
     89e:	20 91 78 00 	lds	r18, 0x0078
     8a2:	30 91 79 00 	lds	r19, 0x0079
     8a6:	40 91 7a 00 	lds	r20, 0x007A
     8aa:	50 91 7b 00 	lds	r21, 0x007B
     8ae:	0e 94 91 09 	call	0x1322	; 0x1322 <__mulsf3>
     8b2:	9b 01       	movw	r18, r22
     8b4:	ac 01       	movw	r20, r24
     8b6:	c5 01       	movw	r24, r10
     8b8:	b4 01       	movw	r22, r8
     8ba:	0e 94 38 08 	call	0x1070	; 0x1070 <__addsf3>
     8be:	6b 01       	movw	r12, r22
     8c0:	7c 01       	movw	r14, r24
     8c2:	80 91 87 00 	lds	r24, 0x0087
     8c6:	98 01       	movw	r18, r16
     8c8:	28 1b       	sub	r18, r24
     8ca:	31 09       	sbc	r19, r1
     8cc:	87 fd       	sbrc	r24, 7
     8ce:	33 95       	inc	r19
     8d0:	b9 01       	movw	r22, r18
     8d2:	33 0f       	add	r19, r19
     8d4:	88 0b       	sbc	r24, r24
     8d6:	99 0b       	sbc	r25, r25
     8d8:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <__floatsisf>
     8dc:	20 91 60 00 	lds	r18, 0x0060
     8e0:	30 91 61 00 	lds	r19, 0x0061
     8e4:	40 91 62 00 	lds	r20, 0x0062
     8e8:	50 91 63 00 	lds	r21, 0x0063
     8ec:	0e 94 91 09 	call	0x1322	; 0x1322 <__mulsf3>
     8f0:	9b 01       	movw	r18, r22
     8f2:	ac 01       	movw	r20, r24
     8f4:	c7 01       	movw	r24, r14
     8f6:	b6 01       	movw	r22, r12
     8f8:	0e 94 38 08 	call	0x1070	; 0x1070 <__addsf3>
     8fc:	60 93 81 00 	sts	0x0081, r22
     900:	70 93 82 00 	sts	0x0082, r23
     904:	80 93 83 00 	sts	0x0083, r24
     908:	90 93 84 00 	sts	0x0084, r25

	prev_error = error;
     90c:	c0 93 87 00 	sts	0x0087, r28
	motorResponse = (int)correction;
     910:	0e 94 a9 08 	call	0x1152	; 0x1152 <__fixsfsi>
     914:	70 93 80 00 	sts	0x0080, r23
     918:	60 93 7f 00 	sts	0x007F, r22
	
	if(motorResponse > maxSpeed)
     91c:	6f 3f       	cpi	r22, 0xFF	; 255
     91e:	71 05       	cpc	r23, r1
     920:	a1 f0       	breq	.+40     	; 0x94a <__stack+0xeb>
     922:	9c f0       	brlt	.+38     	; 0x94a <__stack+0xeb>
	{
		reverseSpeed = motorResponse - maxSpeed;
     924:	6f 5f       	subi	r22, 0xFF	; 255
     926:	60 93 7c 00 	sts	0x007C, r22
		if (reverseSpeed > maxSpeed) reverseSpeed = maxSpeed;
		motorResponse = maxSpeed;
     92a:	8f ef       	ldi	r24, 0xFF	; 255
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	90 93 80 00 	sts	0x0080, r25
     932:	80 93 7f 00 	sts	0x007F, r24
		
		setRotationLeftSharp();
     936:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <setRotationLeftSharp>
		
		LMspeed = reverseSpeed;
     93a:	80 91 7c 00 	lds	r24, 0x007C
     93e:	80 93 7e 00 	sts	0x007E, r24
		RMspeed = maxSpeed;
     942:	8f ef       	ldi	r24, 0xFF	; 255
     944:	80 93 7d 00 	sts	0x007D, r24
     948:	39 c0       	rjmp	.+114    	; 0x9bc <__stack+0x15d>
	}
	
	else if(motorResponse < -maxSpeed)
     94a:	61 30       	cpi	r22, 0x01	; 1
     94c:	4f ef       	ldi	r20, 0xFF	; 255
     94e:	74 07       	cpc	r23, r20
     950:	ac f4       	brge	.+42     	; 0x97c <__stack+0x11d>
	{
		reverseSpeed = -motorResponse - maxSpeed;
     952:	21 e0       	ldi	r18, 0x01	; 1
     954:	82 2f       	mov	r24, r18
     956:	86 1b       	sub	r24, r22
     958:	80 93 7c 00 	sts	0x007C, r24
		if (reverseSpeed > maxSpeed) reverseSpeed = maxSpeed;
		motorResponse = -maxSpeed;
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	9f ef       	ldi	r25, 0xFF	; 255
     960:	90 93 80 00 	sts	0x0080, r25
     964:	80 93 7f 00 	sts	0x007F, r24
		
		setRotationRightSharp();
     968:	0e 94 00 04 	call	0x800	; 0x800 <setRotationRightSharp>
		
		LMspeed = maxSpeed;
     96c:	8f ef       	ldi	r24, 0xFF	; 255
     96e:	80 93 7e 00 	sts	0x007E, r24
		RMspeed = reverseSpeed;
     972:	80 91 7c 00 	lds	r24, 0x007C
     976:	80 93 7d 00 	sts	0x007D, r24
     97a:	20 c0       	rjmp	.+64     	; 0x9bc <__stack+0x15d>
	}
	
	else if(motorResponse < 0 && motorResponse > -maxSpeed)
     97c:	9b 01       	movw	r18, r22
     97e:	22 50       	subi	r18, 0x02	; 2
     980:	3f 4f       	sbci	r19, 0xFF	; 255
     982:	2e 3f       	cpi	r18, 0xFE	; 254
     984:	31 05       	cpc	r19, r1
     986:	58 f4       	brcc	.+22     	; 0x99e <__stack+0x13f>
	{
		setRotationForward();
     988:	0e 94 e6 03 	call	0x7cc	; 0x7cc <setRotationForward>
		
		LMspeed = maxSpeed;
     98c:	8f ef       	ldi	r24, 0xFF	; 255
     98e:	80 93 7e 00 	sts	0x007E, r24
		RMspeed = maxSpeed + motorResponse;
     992:	80 91 7f 00 	lds	r24, 0x007F
     996:	81 50       	subi	r24, 0x01	; 1
     998:	80 93 7d 00 	sts	0x007D, r24
     99c:	0f c0       	rjmp	.+30     	; 0x9bc <__stack+0x15d>
	}
	else if(motorResponse > 0 && motorResponse < maxSpeed)
     99e:	61 50       	subi	r22, 0x01	; 1
     9a0:	71 09       	sbc	r23, r1
     9a2:	6e 3f       	cpi	r22, 0xFE	; 254
     9a4:	71 05       	cpc	r23, r1
     9a6:	50 f4       	brcc	.+20     	; 0x9bc <__stack+0x15d>
	{
		setRotationForward();
     9a8:	0e 94 e6 03 	call	0x7cc	; 0x7cc <setRotationForward>
		
		LMspeed = maxSpeed - motorResponse;
     9ac:	80 91 7f 00 	lds	r24, 0x007F
     9b0:	80 95       	com	r24
     9b2:	80 93 7e 00 	sts	0x007E, r24
		RMspeed = maxSpeed;
     9b6:	8f ef       	ldi	r24, 0xFF	; 255
     9b8:	80 93 7d 00 	sts	0x007D, r24
	}
}
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	1f 91       	pop	r17
     9c2:	0f 91       	pop	r16
     9c4:	ff 90       	pop	r15
     9c6:	ef 90       	pop	r14
     9c8:	df 90       	pop	r13
     9ca:	cf 90       	pop	r12
     9cc:	bf 90       	pop	r11
     9ce:	af 90       	pop	r10
     9d0:	9f 90       	pop	r9
     9d2:	8f 90       	pop	r8
     9d4:	08 95       	ret

000009d6 <Forward>:
	motor2b_PORT |= (1 << motor2b_PIN);
}

void Forward(void)
{
	enable1(0);
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	0e 94 25 08 	call	0x104a	; 0x104a <PWM0>
	enable2(0);
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	0e 94 27 08 	call	0x104e	; 0x104e <PWM2>
	
	motor1a_PORT |= (1 << motor1a_PIN);
     9e6:	af 9a       	sbi	0x15, 7	; 21
	motor1b_PORT &= ~(1 << motor1b_PIN);
     9e8:	ae 98       	cbi	0x15, 6	; 21
	motor2a_PORT |= (1 << motor2a_PIN);
     9ea:	ad 9a       	sbi	0x15, 5	; 21
	motor2b_PORT &= ~(1 << motor2b_PIN);
     9ec:	ac 98       	cbi	0x15, 4	; 21

	enable1(maxSpeed);
     9ee:	8f ef       	ldi	r24, 0xFF	; 255
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	0e 94 25 08 	call	0x104a	; 0x104a <PWM0>
	enable2(maxSpeed);
     9f6:	8f ef       	ldi	r24, 0xFF	; 255
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	0e 94 27 08 	call	0x104e	; 0x104e <PWM2>
     9fe:	08 95       	ret

00000a00 <Backward>:
}

void Backward(void)
{
	enable1(0);
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	0e 94 25 08 	call	0x104a	; 0x104a <PWM0>
	enable2(0);
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	0e 94 27 08 	call	0x104e	; 0x104e <PWM2>
	
	motor1a_PORT &= ~(1 << motor1a_PIN);
     a10:	af 98       	cbi	0x15, 7	; 21
	motor1b_PORT |= (1 << motor1b_PIN);
     a12:	ae 9a       	sbi	0x15, 6	; 21
	motor2a_PORT &= ~(1 << motor2a_PIN);
     a14:	ad 98       	cbi	0x15, 5	; 21
	motor2b_PORT |= (1 << motor2b_PIN);
     a16:	ac 9a       	sbi	0x15, 4	; 21

	enable1(maxSpeed);
     a18:	8f ef       	ldi	r24, 0xFF	; 255
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	0e 94 25 08 	call	0x104a	; 0x104a <PWM0>
	enable2(maxSpeed);
     a20:	8f ef       	ldi	r24, 0xFF	; 255
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	0e 94 27 08 	call	0x104e	; 0x104e <PWM2>
     a28:	08 95       	ret

00000a2a <Stop>:
	}
}

void Stop(void)
{
	Backward();
     a2a:	0e 94 00 05 	call	0xa00	; 0xa00 <Backward>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a2e:	8f e8       	ldi	r24, 0x8F	; 143
     a30:	91 e0       	ldi	r25, 0x01	; 1
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	f1 f7       	brne	.-4      	; 0xa32 <Stop+0x8>
     a36:	00 c0       	rjmp	.+0      	; 0xa38 <Stop+0xe>
     a38:	00 00       	nop
	_delay_us(100);
	enable1(0);
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	0e 94 25 08 	call	0x104a	; 0x104a <PWM0>
	enable2(0);
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	0e 94 27 08 	call	0x104e	; 0x104e <PWM2>
	
	motor1a_PORT &= ~(1 << motor1a_PIN);
     a4a:	af 98       	cbi	0x15, 7	; 21
	motor1b_PORT &= ~(1 << motor1b_PIN);
     a4c:	ae 98       	cbi	0x15, 6	; 21
	motor2a_PORT &= ~(1 << motor2a_PIN);
     a4e:	ad 98       	cbi	0x15, 5	; 21
	motor2b_PORT &= ~(1 << motor2b_PIN);
     a50:	ac 98       	cbi	0x15, 4	; 21
     a52:	08 95       	ret

00000a54 <RightSharp>:
	enable2(maxSpeed);
}

void RightSharp(void)
{
	enable1(0);
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	0e 94 25 08 	call	0x104a	; 0x104a <PWM0>
	enable2(0);
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	0e 94 27 08 	call	0x104e	; 0x104e <PWM2>
	
	motor1a_PORT |= (1 << motor1a_PIN);
     a64:	af 9a       	sbi	0x15, 7	; 21
	motor1b_PORT &= ~(1 << motor1b_PIN);
     a66:	ae 98       	cbi	0x15, 6	; 21
	motor2a_PORT &= ~(1 << motor2a_PIN);
     a68:	ad 98       	cbi	0x15, 5	; 21
	motor2b_PORT |= (1 << motor2b_PIN);
     a6a:	ac 9a       	sbi	0x15, 4	; 21

	enable1(maxSpeed - 20);
     a6c:	8b ee       	ldi	r24, 0xEB	; 235
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	0e 94 25 08 	call	0x104a	; 0x104a <PWM0>
	enable2(maxSpeed - 20);
     a74:	8b ee       	ldi	r24, 0xEB	; 235
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	0e 94 27 08 	call	0x104e	; 0x104e <PWM2>
     a7c:	08 95       	ret

00000a7e <LeftSharp>:
}

void LeftSharp(void)
{
	enable1(0);
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	0e 94 25 08 	call	0x104a	; 0x104a <PWM0>
	enable2(0);
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 27 08 	call	0x104e	; 0x104e <PWM2>
	
	motor1a_PORT &= ~(1 << motor1a_PIN);
     a8e:	af 98       	cbi	0x15, 7	; 21
	motor1b_PORT |= (1 << motor1b_PIN);
     a90:	ae 9a       	sbi	0x15, 6	; 21
	motor2a_PORT |= (1 << motor2a_PIN);
     a92:	ad 9a       	sbi	0x15, 5	; 21
	motor2b_PORT &= ~(1 << motor2b_PIN);
     a94:	ac 98       	cbi	0x15, 4	; 21

	enable1(maxSpeed - 20);
     a96:	8b ee       	ldi	r24, 0xEB	; 235
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	0e 94 25 08 	call	0x104a	; 0x104a <PWM0>
	enable2(maxSpeed - 20);
     a9e:	8b ee       	ldi	r24, 0xEB	; 235
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	0e 94 27 08 	call	0x104e	; 0x104e <PWM2>
     aa6:	08 95       	ret

00000aa8 <main>:

int main(void)
{
	// Input-Output settings
	
	trig1_DDR |= (1 << trig1_PIN);
     aa8:	8c 9a       	sbi	0x11, 4	; 17
	trig2_DDR |= (1 << trig2_PIN);
     aaa:	8d 9a       	sbi	0x11, 5	; 17
	trig3_DDR |= (1 << trig3_PIN);
     aac:	b9 9a       	sbi	0x17, 1	; 23
	echo1_DDR &= ~(1 << echo1_PIN);
     aae:	8b 98       	cbi	0x11, 3	; 17
	echo2_DDR &= ~(1 << echo2_PIN);
     ab0:	8a 98       	cbi	0x11, 2	; 17
	echo3_DDR &= ~(1 << echo3_PIN);
     ab2:	ba 98       	cbi	0x17, 2	; 23
	motor1a_DDR |= (1 << motor1a_PIN);
     ab4:	a7 9a       	sbi	0x14, 7	; 20
	motor1b_DDR |= (1 << motor1b_PIN);
     ab6:	a6 9a       	sbi	0x14, 6	; 20
	motor2a_DDR |= (1 << motor2a_PIN);
     ab8:	a5 9a       	sbi	0x14, 5	; 20
	motor2b_DDR |= (1 << motor2b_PIN);
     aba:	a4 9a       	sbi	0x14, 4	; 20
	enable1_DDR |= (1 << enable1_PIN);
     abc:	8f 9a       	sbi	0x11, 7	; 17
	enable2_DDR |= (1 << enable2_PIN);
     abe:	bb 9a       	sbi	0x17, 3	; 23
	
//	uint8_t finishLevelCount = 0;
	
	// Initializations	
	
	adc_init();
     ac0:	0e 94 49 00 	call	0x92	; 0x92 <adc_init>
	UART_init();
     ac4:	0e 94 29 08 	call	0x1052	; 0x1052 <UART_init>
	PWM0_init();
     ac8:	0e 94 11 08 	call	0x1022	; 0x1022 <PWM0_init>
	PWM2_init();
     acc:	0e 94 1b 08 	call	0x1036	; 0x1036 <PWM2_init>
	setRotationForward();	
     ad0:	0e 94 e6 03 	call	0x7cc	; 0x7cc <setRotationForward>
	Forward();
     ad4:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Forward>
	enable1(maxSpeed);
     ad8:	8f ef       	ldi	r24, 0xFF	; 255
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	0e 94 25 08 	call	0x104a	; 0x104a <PWM0>
	enable2(maxSpeed);
     ae0:	8f ef       	ldi	r24, 0xFF	; 255
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	0e 94 27 08 	call	0x104e	; 0x104e <PWM2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ae8:	06 e0       	ldi	r16, 0x06	; 6
     aea:	10 e0       	ldi	r17, 0x00	; 0
					sensorMapping();
				}				
			}
		}
		
		if (mappedValue == 100/* || mappedValue == 110*/)
     aec:	0f 2e       	mov	r0, r31
     aee:	fe e1       	ldi	r31, 0x1E	; 30
     af0:	cf 2e       	mov	r12, r31
     af2:	f0 2d       	mov	r31, r0
     af4:	e1 2c       	mov	r14, r1
     af6:	0f 2e       	mov	r0, r31
     af8:	fa e0       	ldi	r31, 0x0A	; 10
     afa:	df 2e       	mov	r13, r31
     afc:	f0 2d       	mov	r31, r0
     afe:	f1 2c       	mov	r15, r1
// 	_delay_ms(5000);
// 	
    while (1) 
    {
		
			sensorValueConversion();
     b00:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
			sensorMapping();
     b04:	0e 94 a2 00 	call	0x144	; 0x144 <sensorMapping>
// 			enable2(RMspeed);
// 			if (sensorValue == 0b11111111) _delay_ms(100);
// 
// 		}
// 		
		if (mappedValue == .5)
     b08:	60 91 9b 00 	lds	r22, 0x009B
     b0c:	70 91 9c 00 	lds	r23, 0x009C
     b10:	07 2e       	mov	r0, r23
     b12:	00 0c       	add	r0, r0
     b14:	88 0b       	sbc	r24, r24
     b16:	99 0b       	sbc	r25, r25
     b18:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <__floatsisf>
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	40 e0       	ldi	r20, 0x00	; 0
     b22:	5f e3       	ldi	r21, 0x3F	; 63
     b24:	0e 94 a4 08 	call	0x1148	; 0x1148 <__cmpsf2>
     b28:	81 11       	cpse	r24, r1
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <main+0x88>
		{
			Forward();
     b2c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Forward>
// 			}
// 			
// 		}


		if (mappedValue == 112)
     b30:	80 91 9b 00 	lds	r24, 0x009B
     b34:	90 91 9c 00 	lds	r25, 0x009C
     b38:	80 37       	cpi	r24, 0x70	; 112
     b3a:	91 05       	cpc	r25, r1
     b3c:	59 f4       	brne	.+22     	; 0xb54 <main+0xac>
		{
			Forward();
     b3e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Forward>
     b42:	2f ef       	ldi	r18, 0xFF	; 255
     b44:	81 ee       	ldi	r24, 0xE1	; 225
     b46:	94 e0       	ldi	r25, 0x04	; 4
     b48:	21 50       	subi	r18, 0x01	; 1
     b4a:	80 40       	sbci	r24, 0x00	; 0
     b4c:	90 40       	sbci	r25, 0x00	; 0
     b4e:	e1 f7       	brne	.-8      	; 0xb48 <main+0xa0>
     b50:	00 c0       	rjmp	.+0      	; 0xb52 <main+0xaa>
     b52:	00 00       	nop
			_delay_ms(100);
		}
		
		if (mappedValue == 120/* || mappedValue == 110*/)
     b54:	80 91 9b 00 	lds	r24, 0x009B
     b58:	90 91 9c 00 	lds	r25, 0x009C
     b5c:	88 37       	cpi	r24, 0x78	; 120
     b5e:	91 05       	cpc	r25, r1
     b60:	09 f0       	breq	.+2      	; 0xb64 <main+0xbc>
     b62:	41 c0       	rjmp	.+130    	; 0xbe6 <main+0x13e>
		{
			Stop();
     b64:	0e 94 15 05 	call	0xa2a	; 0xa2a <Stop>
     b68:	2f ef       	ldi	r18, 0xFF	; 255
     b6a:	80 e7       	ldi	r24, 0x70	; 112
     b6c:	92 e0       	ldi	r25, 0x02	; 2
     b6e:	21 50       	subi	r18, 0x01	; 1
     b70:	80 40       	sbci	r24, 0x00	; 0
     b72:	90 40       	sbci	r25, 0x00	; 0
     b74:	e1 f7       	brne	.-8      	; 0xb6e <main+0xc6>
     b76:	00 c0       	rjmp	.+0      	; 0xb78 <main+0xd0>
     b78:	00 00       	nop
     b7a:	c0 2f       	mov	r28, r16
     b7c:	d1 2f       	mov	r29, r17
			_delay_ms(50);
			for (int temp = 0; temp < 6; temp++)
			{
				sensorValueConversion();
     b7e:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
				sensorMapping();
     b82:	0e 94 a2 00 	call	0x144	; 0x144 <sensorMapping>
     b86:	21 97       	sbiw	r28, 0x01	; 1
		
		if (mappedValue == 120/* || mappedValue == 110*/)
		{
			Stop();
			_delay_ms(50);
			for (int temp = 0; temp < 6; temp++)
     b88:	d1 f7       	brne	.-12     	; 0xb7e <main+0xd6>
     b8a:	26 c0       	rjmp	.+76     	; 0xbd8 <main+0x130>
				sensorValueConversion();
				sensorMapping();
			}
			while (mappedValue == 120)
			{
				Stop();
     b8c:	0e 94 15 05 	call	0xa2a	; 0xa2a <Stop>
     b90:	9f ef       	ldi	r25, 0xFF	; 255
     b92:	21 ee       	ldi	r18, 0xE1	; 225
     b94:	84 e0       	ldi	r24, 0x04	; 4
     b96:	91 50       	subi	r25, 0x01	; 1
     b98:	20 40       	sbci	r18, 0x00	; 0
     b9a:	80 40       	sbci	r24, 0x00	; 0
     b9c:	e1 f7       	brne	.-8      	; 0xb96 <main+0xee>
     b9e:	00 c0       	rjmp	.+0      	; 0xba0 <main+0xf8>
     ba0:	00 00       	nop
				_delay_ms(100);
				RightSharp();
     ba2:	0e 94 2a 05 	call	0xa54	; 0xa54 <RightSharp>
     ba6:	9f ef       	ldi	r25, 0xFF	; 255
     ba8:	24 e3       	ldi	r18, 0x34	; 52
     baa:	8c e0       	ldi	r24, 0x0C	; 12
     bac:	91 50       	subi	r25, 0x01	; 1
     bae:	20 40       	sbci	r18, 0x00	; 0
     bb0:	80 40       	sbci	r24, 0x00	; 0
     bb2:	e1 f7       	brne	.-8      	; 0xbac <main+0x104>
     bb4:	00 c0       	rjmp	.+0      	; 0xbb6 <main+0x10e>
     bb6:	00 00       	nop
				_delay_ms(250);
				while(mappedValue > 15)
     bb8:	80 91 9b 00 	lds	r24, 0x009B
     bbc:	90 91 9c 00 	lds	r25, 0x009C
     bc0:	40 97       	sbiw	r24, 0x10	; 16
     bc2:	54 f0       	brlt	.+20     	; 0xbd8 <main+0x130>
				{
					sensorValueConversion();
     bc4:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
					sensorMapping();
     bc8:	0e 94 a2 00 	call	0x144	; 0x144 <sensorMapping>
			{
				Stop();
				_delay_ms(100);
				RightSharp();
				_delay_ms(250);
				while(mappedValue > 15)
     bcc:	80 91 9b 00 	lds	r24, 0x009B
     bd0:	90 91 9c 00 	lds	r25, 0x009C
     bd4:	40 97       	sbiw	r24, 0x10	; 16
     bd6:	b4 f7       	brge	.-20     	; 0xbc4 <main+0x11c>
			for (int temp = 0; temp < 6; temp++)
			{
				sensorValueConversion();
				sensorMapping();
			}
			while (mappedValue == 120)
     bd8:	80 91 9b 00 	lds	r24, 0x009B
     bdc:	90 91 9c 00 	lds	r25, 0x009C
     be0:	88 37       	cpi	r24, 0x78	; 120
     be2:	91 05       	cpc	r25, r1
     be4:	99 f2       	breq	.-90     	; 0xb8c <main+0xe4>
					sensorMapping();
				}
			}
		}
		
		if (mappedValue == -120/* || mappedValue == -110*/)
     be6:	80 91 9b 00 	lds	r24, 0x009B
     bea:	90 91 9c 00 	lds	r25, 0x009C
     bee:	88 38       	cpi	r24, 0x88	; 136
     bf0:	9f 4f       	sbci	r25, 0xFF	; 255
     bf2:	09 f0       	breq	.+2      	; 0xbf6 <main+0x14e>
     bf4:	09 c1       	rjmp	.+530    	; 0xe08 <main+0x360>
		{
			Stop();
     bf6:	0e 94 15 05 	call	0xa2a	; 0xa2a <Stop>
     bfa:	8f ef       	ldi	r24, 0xFF	; 255
     bfc:	90 e7       	ldi	r25, 0x70	; 112
     bfe:	22 e0       	ldi	r18, 0x02	; 2
     c00:	81 50       	subi	r24, 0x01	; 1
     c02:	90 40       	sbci	r25, 0x00	; 0
     c04:	20 40       	sbci	r18, 0x00	; 0
     c06:	e1 f7       	brne	.-8      	; 0xc00 <main+0x158>
     c08:	00 c0       	rjmp	.+0      	; 0xc0a <main+0x162>
     c0a:	00 00       	nop
			_delay_ms(50);
			for (int temp = 0; temp < 1; temp++)
			{
				sensorValueConversion();
     c0c:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
				sensorMapping();
     c10:	0e 94 a2 00 	call	0x144	; 0x144 <sensorMapping>
     c14:	28 c0       	rjmp	.+80     	; 0xc66 <main+0x1be>
			}
			while (mappedValue == -120)
			{	
				Stop();
     c16:	0e 94 15 05 	call	0xa2a	; 0xa2a <Stop>
     c1a:	8f ef       	ldi	r24, 0xFF	; 255
     c1c:	91 ee       	ldi	r25, 0xE1	; 225
     c1e:	24 e0       	ldi	r18, 0x04	; 4
     c20:	81 50       	subi	r24, 0x01	; 1
     c22:	90 40       	sbci	r25, 0x00	; 0
     c24:	20 40       	sbci	r18, 0x00	; 0
     c26:	e1 f7       	brne	.-8      	; 0xc20 <main+0x178>
     c28:	00 c0       	rjmp	.+0      	; 0xc2a <main+0x182>
     c2a:	00 00       	nop
 				_delay_ms(100);
				LeftSharp();
     c2c:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LeftSharp>
     c30:	8f ef       	ldi	r24, 0xFF	; 255
     c32:	94 e3       	ldi	r25, 0x34	; 52
     c34:	2c e0       	ldi	r18, 0x0C	; 12
     c36:	81 50       	subi	r24, 0x01	; 1
     c38:	90 40       	sbci	r25, 0x00	; 0
     c3a:	20 40       	sbci	r18, 0x00	; 0
     c3c:	e1 f7       	brne	.-8      	; 0xc36 <main+0x18e>
     c3e:	00 c0       	rjmp	.+0      	; 0xc40 <main+0x198>
     c40:	00 00       	nop
				_delay_ms(250);
				while(mappedValue < -15)
     c42:	80 91 9b 00 	lds	r24, 0x009B
     c46:	90 91 9c 00 	lds	r25, 0x009C
     c4a:	81 3f       	cpi	r24, 0xF1	; 241
     c4c:	9f 4f       	sbci	r25, 0xFF	; 255
     c4e:	5c f4       	brge	.+22     	; 0xc66 <main+0x1be>
				{
					sensorValueConversion();
     c50:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
					sensorMapping();
     c54:	0e 94 a2 00 	call	0x144	; 0x144 <sensorMapping>
			{	
				Stop();
 				_delay_ms(100);
				LeftSharp();
				_delay_ms(250);
				while(mappedValue < -15)
     c58:	80 91 9b 00 	lds	r24, 0x009B
     c5c:	90 91 9c 00 	lds	r25, 0x009C
     c60:	81 3f       	cpi	r24, 0xF1	; 241
     c62:	9f 4f       	sbci	r25, 0xFF	; 255
     c64:	ac f3       	brlt	.-22     	; 0xc50 <main+0x1a8>
			for (int temp = 0; temp < 1; temp++)
			{
				sensorValueConversion();
				sensorMapping();
			}
			while (mappedValue == -120)
     c66:	80 91 9b 00 	lds	r24, 0x009B
     c6a:	90 91 9c 00 	lds	r25, 0x009C
     c6e:	88 38       	cpi	r24, 0x88	; 136
     c70:	9f 4f       	sbci	r25, 0xFF	; 255
     c72:	89 f2       	breq	.-94     	; 0xc16 <main+0x16e>
     c74:	c9 c0       	rjmp	.+402    	; 0xe08 <main+0x360>
					sensorMapping();
				}				
			}
		}
		
		if (mappedValue == 100/* || mappedValue == 110*/)
     c76:	cd 2d       	mov	r28, r13
     c78:	df 2d       	mov	r29, r15
		{
// 			Stop();
// 			_delay_ms(200);
			for (int temp = 0; temp < 10; temp++)
			{
				sensorValueConversion();
     c7a:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
				sensorMapping();
     c7e:	0e 94 a2 00 	call	0x144	; 0x144 <sensorMapping>
     c82:	21 97       	sbiw	r28, 0x01	; 1
		
		if (mappedValue == 100/* || mappedValue == 110*/)
		{
// 			Stop();
// 			_delay_ms(200);
			for (int temp = 0; temp < 10; temp++)
     c84:	d1 f7       	brne	.-12     	; 0xc7a <main+0x1d2>
     c86:	23 c0       	rjmp	.+70     	; 0xcce <main+0x226>
				sensorValueConversion();
				sensorMapping();
			}
			while (mappedValue == 100)
			{
				Stop();
     c88:	0e 94 15 05 	call	0xa2a	; 0xa2a <Stop>
     c8c:	8f e3       	ldi	r24, 0x3F	; 63
     c8e:	9c e9       	ldi	r25, 0x9C	; 156
     c90:	01 97       	sbiw	r24, 0x01	; 1
     c92:	f1 f7       	brne	.-4      	; 0xc90 <main+0x1e8>
     c94:	00 c0       	rjmp	.+0      	; 0xc96 <main+0x1ee>
     c96:	00 00       	nop
				_delay_ms(10);
				RightSharp();
     c98:	0e 94 2a 05 	call	0xa54	; 0xa54 <RightSharp>
     c9c:	9f ef       	ldi	r25, 0xFF	; 255
     c9e:	23 ec       	ldi	r18, 0xC3	; 195
     ca0:	89 e0       	ldi	r24, 0x09	; 9
     ca2:	91 50       	subi	r25, 0x01	; 1
     ca4:	20 40       	sbci	r18, 0x00	; 0
     ca6:	80 40       	sbci	r24, 0x00	; 0
     ca8:	e1 f7       	brne	.-8      	; 0xca2 <main+0x1fa>
     caa:	00 c0       	rjmp	.+0      	; 0xcac <main+0x204>
     cac:	00 00       	nop
				_delay_ms(200);
				while(mappedValue > 15)
     cae:	80 91 9b 00 	lds	r24, 0x009B
     cb2:	90 91 9c 00 	lds	r25, 0x009C
     cb6:	40 97       	sbiw	r24, 0x10	; 16
     cb8:	54 f0       	brlt	.+20     	; 0xcce <main+0x226>
				{
					sensorValueConversion();
     cba:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
					sensorMapping();
     cbe:	0e 94 a2 00 	call	0x144	; 0x144 <sensorMapping>
			{
				Stop();
				_delay_ms(10);
				RightSharp();
				_delay_ms(200);
				while(mappedValue > 15)
     cc2:	80 91 9b 00 	lds	r24, 0x009B
     cc6:	90 91 9c 00 	lds	r25, 0x009C
     cca:	40 97       	sbiw	r24, 0x10	; 16
     ccc:	b4 f7       	brge	.-20     	; 0xcba <main+0x212>
			for (int temp = 0; temp < 10; temp++)
			{
				sensorValueConversion();
				sensorMapping();
			}
			while (mappedValue == 100)
     cce:	80 91 9b 00 	lds	r24, 0x009B
     cd2:	90 91 9c 00 	lds	r25, 0x009C
     cd6:	84 36       	cpi	r24, 0x64	; 100
     cd8:	91 05       	cpc	r25, r1
     cda:	b1 f2       	breq	.-84     	; 0xc88 <main+0x1e0>
     cdc:	9e c0       	rjmp	.+316    	; 0xe1a <main+0x372>
// 				sensorValueConversion();
// 				sensorMapping();
// 			}
// 		}
		
		if (mappedValue == -100/* || mappedValue == 110*/)
     cde:	80 91 9b 00 	lds	r24, 0x009B
     ce2:	90 91 9c 00 	lds	r25, 0x009C
     ce6:	8c 39       	cpi	r24, 0x9C	; 156
     ce8:	9f 4f       	sbci	r25, 0xFF	; 255
     cea:	a9 f5       	brne	.+106    	; 0xd56 <main+0x2ae>
					sensorMapping();
				}				
			}
		}
		
		if (mappedValue == 100/* || mappedValue == 110*/)
     cec:	cc 2d       	mov	r28, r12
     cee:	de 2d       	mov	r29, r14
		{
			// 			Stop();
			// 			_delay_ms(200);
			for (int temp = 0; temp < 30; temp++)
			{
				sensorValueConversion();
     cf0:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
				sensorMapping();
     cf4:	0e 94 a2 00 	call	0x144	; 0x144 <sensorMapping>
     cf8:	21 97       	sbiw	r28, 0x01	; 1
		
		if (mappedValue == -100/* || mappedValue == 110*/)
		{
			// 			Stop();
			// 			_delay_ms(200);
			for (int temp = 0; temp < 30; temp++)
     cfa:	d1 f7       	brne	.-12     	; 0xcf0 <main+0x248>
     cfc:	25 c0       	rjmp	.+74     	; 0xd48 <main+0x2a0>
				sensorValueConversion();
				sensorMapping();
			}
			while (mappedValue == -100)
			{
				Stop();
     cfe:	0e 94 15 05 	call	0xa2a	; 0xa2a <Stop>
     d02:	8f e3       	ldi	r24, 0x3F	; 63
     d04:	9c e9       	ldi	r25, 0x9C	; 156
     d06:	01 97       	sbiw	r24, 0x01	; 1
     d08:	f1 f7       	brne	.-4      	; 0xd06 <main+0x25e>
     d0a:	00 c0       	rjmp	.+0      	; 0xd0c <main+0x264>
     d0c:	00 00       	nop
				_delay_ms(10);
				LeftSharp();
     d0e:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LeftSharp>
     d12:	9f ef       	ldi	r25, 0xFF	; 255
     d14:	23 ec       	ldi	r18, 0xC3	; 195
     d16:	89 e0       	ldi	r24, 0x09	; 9
     d18:	91 50       	subi	r25, 0x01	; 1
     d1a:	20 40       	sbci	r18, 0x00	; 0
     d1c:	80 40       	sbci	r24, 0x00	; 0
     d1e:	e1 f7       	brne	.-8      	; 0xd18 <main+0x270>
     d20:	00 c0       	rjmp	.+0      	; 0xd22 <main+0x27a>
     d22:	00 00       	nop
				_delay_ms(200);
				while(mappedValue < -15)
     d24:	80 91 9b 00 	lds	r24, 0x009B
     d28:	90 91 9c 00 	lds	r25, 0x009C
     d2c:	81 3f       	cpi	r24, 0xF1	; 241
     d2e:	9f 4f       	sbci	r25, 0xFF	; 255
     d30:	5c f4       	brge	.+22     	; 0xd48 <main+0x2a0>
				{
					sensorValueConversion();
     d32:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
					sensorMapping();
     d36:	0e 94 a2 00 	call	0x144	; 0x144 <sensorMapping>
			{
				Stop();
				_delay_ms(10);
				LeftSharp();
				_delay_ms(200);
				while(mappedValue < -15)
     d3a:	80 91 9b 00 	lds	r24, 0x009B
     d3e:	90 91 9c 00 	lds	r25, 0x009C
     d42:	81 3f       	cpi	r24, 0xF1	; 241
     d44:	9f 4f       	sbci	r25, 0xFF	; 255
     d46:	ac f3       	brlt	.-22     	; 0xd32 <main+0x28a>
			for (int temp = 0; temp < 30; temp++)
			{
				sensorValueConversion();
				sensorMapping();
			}
			while (mappedValue == -100)
     d48:	80 91 9b 00 	lds	r24, 0x009B
     d4c:	90 91 9c 00 	lds	r25, 0x009C
     d50:	8c 39       	cpi	r24, 0x9C	; 156
     d52:	9f 4f       	sbci	r25, 0xFF	; 255
     d54:	a1 f2       	breq	.-88     	; 0xcfe <main+0x256>
				}
			}
		}

				
		if (mappedValue == -100/* || mappedValue == -110*/)
     d56:	80 91 9b 00 	lds	r24, 0x009B
     d5a:	90 91 9c 00 	lds	r25, 0x009C
     d5e:	8c 39       	cpi	r24, 0x9C	; 156
     d60:	9f 4f       	sbci	r25, 0xFF	; 255
     d62:	09 f0       	breq	.+2      	; 0xd66 <main+0x2be>
     d64:	44 c0       	rjmp	.+136    	; 0xdee <main+0x346>
     d66:	3b c0       	rjmp	.+118    	; 0xdde <main+0x336>
// 				sensorValueConversion();
// 				sensorMapping();
// 			}
			while (mappedValue == -100)
			{
				sensorValueConversion();
     d68:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
				sensorMapping();
     d6c:	0e 94 a2 00 	call	0x144	; 0x144 <sensorMapping>
				Forward();
     d70:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <Forward>
				if (sensorValue == 0b11111111)
     d74:	80 91 9d 00 	lds	r24, 0x009D
     d78:	90 91 9e 00 	lds	r25, 0x009E
     d7c:	8f 3f       	cpi	r24, 0xFF	; 255
     d7e:	91 05       	cpc	r25, r1
     d80:	b1 f1       	breq	.+108    	; 0xdee <main+0x346>
				{
					break;
				}
				else if (sensorValue == 0b00000000)
     d82:	80 91 9d 00 	lds	r24, 0x009D
     d86:	90 91 9e 00 	lds	r25, 0x009E
     d8a:	89 2b       	or	r24, r25
     d8c:	41 f5       	brne	.+80     	; 0xdde <main+0x336>
				{
					Stop();
     d8e:	0e 94 15 05 	call	0xa2a	; 0xa2a <Stop>
     d92:	8f ef       	ldi	r24, 0xFF	; 255
     d94:	91 ee       	ldi	r25, 0xE1	; 225
     d96:	24 e0       	ldi	r18, 0x04	; 4
     d98:	81 50       	subi	r24, 0x01	; 1
     d9a:	90 40       	sbci	r25, 0x00	; 0
     d9c:	20 40       	sbci	r18, 0x00	; 0
     d9e:	e1 f7       	brne	.-8      	; 0xd98 <main+0x2f0>
     da0:	00 c0       	rjmp	.+0      	; 0xda2 <main+0x2fa>
     da2:	00 00       	nop
					_delay_ms(100);
					LeftSharp();
     da4:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LeftSharp>
     da8:	8f ef       	ldi	r24, 0xFF	; 255
     daa:	92 e5       	ldi	r25, 0x52	; 82
     dac:	27 e0       	ldi	r18, 0x07	; 7
     dae:	81 50       	subi	r24, 0x01	; 1
     db0:	90 40       	sbci	r25, 0x00	; 0
     db2:	20 40       	sbci	r18, 0x00	; 0
     db4:	e1 f7       	brne	.-8      	; 0xdae <main+0x306>
     db6:	00 c0       	rjmp	.+0      	; 0xdb8 <main+0x310>
     db8:	00 00       	nop
					_delay_ms(150);
					while(mappedValue < -15)
     dba:	80 91 9b 00 	lds	r24, 0x009B
     dbe:	90 91 9c 00 	lds	r25, 0x009C
     dc2:	81 3f       	cpi	r24, 0xF1	; 241
     dc4:	9f 4f       	sbci	r25, 0xFF	; 255
     dc6:	5c f4       	brge	.+22     	; 0xdde <main+0x336>
					{
						sensorValueConversion();
     dc8:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
						sensorMapping();
     dcc:	0e 94 a2 00 	call	0x144	; 0x144 <sensorMapping>
				{
					Stop();
					_delay_ms(100);
					LeftSharp();
					_delay_ms(150);
					while(mappedValue < -15)
     dd0:	80 91 9b 00 	lds	r24, 0x009B
     dd4:	90 91 9c 00 	lds	r25, 0x009C
     dd8:	81 3f       	cpi	r24, 0xF1	; 241
     dda:	9f 4f       	sbci	r25, 0xFF	; 255
     ddc:	ac f3       	brlt	.-22     	; 0xdc8 <main+0x320>
// 			for (int temp = 0; temp < 50; temp++)
// 			{
// 				sensorValueConversion();
// 				sensorMapping();
// 			}
			while (mappedValue == -100)
     dde:	80 91 9b 00 	lds	r24, 0x009B
     de2:	90 91 9c 00 	lds	r25, 0x009C
     de6:	8c 39       	cpi	r24, 0x9C	; 156
     de8:	9f 4f       	sbci	r25, 0xFF	; 255
     dea:	09 f4       	brne	.+2      	; 0xdee <main+0x346>
     dec:	bd cf       	rjmp	.-134    	; 0xd68 <main+0x2c0>
			}
		}


		
		PID_Correction();
     dee:	0e 94 0d 04 	call	0x81a	; 0x81a <PID_Correction>
		enable1(LMspeed);
     df2:	80 91 7e 00 	lds	r24, 0x007E
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	0e 94 25 08 	call	0x104a	; 0x104a <PWM0>
		enable2(RMspeed);
     dfc:	80 91 7d 00 	lds	r24, 0x007D
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 27 08 	call	0x104e	; 0x104e <PWM2>
	}
     e06:	7c ce       	rjmp	.-776    	; 0xb00 <main+0x58>
					sensorMapping();
				}				
			}
		}
		
		if (mappedValue == 100/* || mappedValue == 110*/)
     e08:	80 91 9b 00 	lds	r24, 0x009B
     e0c:	90 91 9c 00 	lds	r25, 0x009C
     e10:	84 36       	cpi	r24, 0x64	; 100
     e12:	91 05       	cpc	r25, r1
     e14:	09 f0       	breq	.+2      	; 0xe18 <main+0x370>
     e16:	63 cf       	rjmp	.-314    	; 0xcde <main+0x236>
     e18:	2e cf       	rjmp	.-420    	; 0xc76 <main+0x1ce>
// 				sensorValueConversion();
// 				sensorMapping();
// 			}
// 		}
		
		if (mappedValue == -100/* || mappedValue == 110*/)
     e1a:	80 91 9b 00 	lds	r24, 0x009B
     e1e:	90 91 9c 00 	lds	r25, 0x009C
     e22:	8c 39       	cpi	r24, 0x9C	; 156
     e24:	9f 4f       	sbci	r25, 0xFF	; 255
     e26:	09 f0       	breq	.+2      	; 0xe2a <main+0x382>
     e28:	96 cf       	rjmp	.-212    	; 0xd56 <main+0x2ae>
     e2a:	60 cf       	rjmp	.-320    	; 0xcec <main+0x244>

00000e2c <__vector_1>:
{
	TIMSK |= (1 << TOIE2) | (1 << TOIE0);				// Enable Timer Overflow Interrupt 0, Timer Overflow Interrupt 2
}

ISR (INT0_vect)
{
     e2c:	1f 92       	push	r1
     e2e:	0f 92       	push	r0
     e30:	0f b6       	in	r0, 0x3f	; 63
     e32:	0f 92       	push	r0
     e34:	11 24       	eor	r1, r1
     e36:	8f 93       	push	r24
     e38:	9f 93       	push	r25
	if (choice1 == 0)
     e3a:	80 91 95 00 	lds	r24, 0x0095
     e3e:	90 91 96 00 	lds	r25, 0x0096
     e42:	89 2b       	or	r24, r25
     e44:	51 f4       	brne	.+20     	; 0xe5a <__vector_1+0x2e>
	{
		TCCR1B |= (1 << CS11);
     e46:	8e b5       	in	r24, 0x2e	; 46
     e48:	82 60       	ori	r24, 0x02	; 2
     e4a:	8e bd       	out	0x2e, r24	; 46
		choice1 = 1;
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	90 93 96 00 	sts	0x0096, r25
     e54:	80 93 95 00 	sts	0x0095, r24
     e58:	15 c0       	rjmp	.+42     	; 0xe84 <__vector_1+0x58>
	}
	else if (choice1 == 1)
     e5a:	80 91 95 00 	lds	r24, 0x0095
     e5e:	90 91 96 00 	lds	r25, 0x0096
     e62:	01 97       	sbiw	r24, 0x01	; 1
     e64:	79 f4       	brne	.+30     	; 0xe84 <__vector_1+0x58>
	{
		TCCR1B = 0;
     e66:	1e bc       	out	0x2e, r1	; 46
		pulse1 = TCNT1 / 2;
     e68:	8c b5       	in	r24, 0x2c	; 44
     e6a:	9d b5       	in	r25, 0x2d	; 45
     e6c:	96 95       	lsr	r25
     e6e:	87 95       	ror	r24
     e70:	90 93 98 00 	sts	0x0098, r25
     e74:	80 93 97 00 	sts	0x0097, r24
		TCNT1 = 0;
     e78:	1d bc       	out	0x2d, r1	; 45
     e7a:	1c bc       	out	0x2c, r1	; 44
		choice1 = 0;
     e7c:	10 92 96 00 	sts	0x0096, r1
     e80:	10 92 95 00 	sts	0x0095, r1
	}
}
     e84:	9f 91       	pop	r25
     e86:	8f 91       	pop	r24
     e88:	0f 90       	pop	r0
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	0f 90       	pop	r0
     e8e:	1f 90       	pop	r1
     e90:	18 95       	reti

00000e92 <__vector_2>:

ISR (INT1_vect)
{
     e92:	1f 92       	push	r1
     e94:	0f 92       	push	r0
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	0f 92       	push	r0
     e9a:	11 24       	eor	r1, r1
     e9c:	2f 93       	push	r18
     e9e:	3f 93       	push	r19
     ea0:	4f 93       	push	r20
     ea2:	5f 93       	push	r21
     ea4:	8f 93       	push	r24
     ea6:	9f 93       	push	r25
	if (choice2 == 0)
     ea8:	80 91 91 00 	lds	r24, 0x0091
     eac:	90 91 92 00 	lds	r25, 0x0092
     eb0:	89 2b       	or	r24, r25
     eb2:	51 f4       	brne	.+20     	; 0xec8 <__vector_2+0x36>
	{
		TCCR0 |= 0b00000011;
     eb4:	83 b7       	in	r24, 0x33	; 51
     eb6:	83 60       	ori	r24, 0x03	; 3
     eb8:	83 bf       	out	0x33, r24	; 51
		choice2 = 1;
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	90 93 92 00 	sts	0x0092, r25
     ec2:	80 93 91 00 	sts	0x0091, r24
     ec6:	25 c0       	rjmp	.+74     	; 0xf12 <__vector_2+0x80>
	}
	else if (choice2 == 1)
     ec8:	80 91 91 00 	lds	r24, 0x0091
     ecc:	90 91 92 00 	lds	r25, 0x0092
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	f9 f4       	brne	.+62     	; 0xf12 <__vector_2+0x80>
	{
		TCCR0 = 0;
     ed4:	13 be       	out	0x33, r1	; 51
		pulse2 = (TCNT0 + (0xFF * TIMER0_INT)) * 4;
     ed6:	22 b7       	in	r18, 0x32	; 50
     ed8:	40 91 8b 00 	lds	r20, 0x008B
     edc:	50 91 8c 00 	lds	r21, 0x008C
     ee0:	3f ef       	ldi	r19, 0xFF	; 255
     ee2:	34 9f       	mul	r19, r20
     ee4:	c0 01       	movw	r24, r0
     ee6:	35 9f       	mul	r19, r21
     ee8:	90 0d       	add	r25, r0
     eea:	11 24       	eor	r1, r1
     eec:	82 0f       	add	r24, r18
     eee:	91 1d       	adc	r25, r1
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	90 93 94 00 	sts	0x0094, r25
     efc:	80 93 93 00 	sts	0x0093, r24
		TIMER0_INT = 0;
     f00:	10 92 8c 00 	sts	0x008C, r1
     f04:	10 92 8b 00 	sts	0x008B, r1
		TCNT0 = 0;
     f08:	12 be       	out	0x32, r1	; 50
		choice2 = 0;
     f0a:	10 92 92 00 	sts	0x0092, r1
     f0e:	10 92 91 00 	sts	0x0091, r1
	}
}
     f12:	9f 91       	pop	r25
     f14:	8f 91       	pop	r24
     f16:	5f 91       	pop	r21
     f18:	4f 91       	pop	r20
     f1a:	3f 91       	pop	r19
     f1c:	2f 91       	pop	r18
     f1e:	0f 90       	pop	r0
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	0f 90       	pop	r0
     f24:	1f 90       	pop	r1
     f26:	18 95       	reti

00000f28 <__vector_3>:

ISR (INT2_vect)
{
     f28:	1f 92       	push	r1
     f2a:	0f 92       	push	r0
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	0f 92       	push	r0
     f30:	11 24       	eor	r1, r1
     f32:	2f 93       	push	r18
     f34:	3f 93       	push	r19
     f36:	4f 93       	push	r20
     f38:	5f 93       	push	r21
     f3a:	8f 93       	push	r24
     f3c:	9f 93       	push	r25
	MCUCSR ^= (1 << ISC2);
     f3e:	94 b7       	in	r25, 0x34	; 52
     f40:	80 e4       	ldi	r24, 0x40	; 64
     f42:	89 27       	eor	r24, r25
     f44:	84 bf       	out	0x34, r24	; 52
	if (choice3 == 0)
     f46:	80 91 8d 00 	lds	r24, 0x008D
     f4a:	90 91 8e 00 	lds	r25, 0x008E
     f4e:	89 2b       	or	r24, r25
     f50:	51 f4       	brne	.+20     	; 0xf66 <__vector_3+0x3e>
	{
		TCCR2 |= 0b00000100;
     f52:	85 b5       	in	r24, 0x25	; 37
     f54:	84 60       	ori	r24, 0x04	; 4
     f56:	85 bd       	out	0x25, r24	; 37
		choice3 = 1;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	90 93 8e 00 	sts	0x008E, r25
     f60:	80 93 8d 00 	sts	0x008D, r24
     f64:	25 c0       	rjmp	.+74     	; 0xfb0 <__vector_3+0x88>
	}
	else if (choice3 == 1)
     f66:	80 91 8d 00 	lds	r24, 0x008D
     f6a:	90 91 8e 00 	lds	r25, 0x008E
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	f9 f4       	brne	.+62     	; 0xfb0 <__vector_3+0x88>
	{
		TCCR2 = 0;
     f72:	15 bc       	out	0x25, r1	; 37
		pulse3 = (TCNT2 + (0xFF * TIMER2_INT)) * 4;
     f74:	24 b5       	in	r18, 0x24	; 36
     f76:	40 91 89 00 	lds	r20, 0x0089
     f7a:	50 91 8a 00 	lds	r21, 0x008A
     f7e:	3f ef       	ldi	r19, 0xFF	; 255
     f80:	34 9f       	mul	r19, r20
     f82:	c0 01       	movw	r24, r0
     f84:	35 9f       	mul	r19, r21
     f86:	90 0d       	add	r25, r0
     f88:	11 24       	eor	r1, r1
     f8a:	82 0f       	add	r24, r18
     f8c:	91 1d       	adc	r25, r1
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	90 93 90 00 	sts	0x0090, r25
     f9a:	80 93 8f 00 	sts	0x008F, r24
		TIMER2_INT = 0;
     f9e:	10 92 8a 00 	sts	0x008A, r1
     fa2:	10 92 89 00 	sts	0x0089, r1
		TCNT2 = 0;
     fa6:	14 bc       	out	0x24, r1	; 36
		choice3 = 0;
     fa8:	10 92 8e 00 	sts	0x008E, r1
     fac:	10 92 8d 00 	sts	0x008D, r1
	}
}
     fb0:	9f 91       	pop	r25
     fb2:	8f 91       	pop	r24
     fb4:	5f 91       	pop	r21
     fb6:	4f 91       	pop	r20
     fb8:	3f 91       	pop	r19
     fba:	2f 91       	pop	r18
     fbc:	0f 90       	pop	r0
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	0f 90       	pop	r0
     fc2:	1f 90       	pop	r1
     fc4:	18 95       	reti

00000fc6 <__vector_5>:

ISR (TIMER2_OVF_vect)
{
     fc6:	1f 92       	push	r1
     fc8:	0f 92       	push	r0
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	0f 92       	push	r0
     fce:	11 24       	eor	r1, r1
     fd0:	8f 93       	push	r24
     fd2:	9f 93       	push	r25
	TIMER2_INT++;
     fd4:	80 91 89 00 	lds	r24, 0x0089
     fd8:	90 91 8a 00 	lds	r25, 0x008A
     fdc:	01 96       	adiw	r24, 0x01	; 1
     fde:	90 93 8a 00 	sts	0x008A, r25
     fe2:	80 93 89 00 	sts	0x0089, r24
}
     fe6:	9f 91       	pop	r25
     fe8:	8f 91       	pop	r24
     fea:	0f 90       	pop	r0
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	0f 90       	pop	r0
     ff0:	1f 90       	pop	r1
     ff2:	18 95       	reti

00000ff4 <__vector_11>:

ISR (TIMER0_OVF_vect)
{
     ff4:	1f 92       	push	r1
     ff6:	0f 92       	push	r0
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	0f 92       	push	r0
     ffc:	11 24       	eor	r1, r1
     ffe:	8f 93       	push	r24
    1000:	9f 93       	push	r25
	TIMER0_INT++;
    1002:	80 91 8b 00 	lds	r24, 0x008B
    1006:	90 91 8c 00 	lds	r25, 0x008C
    100a:	01 96       	adiw	r24, 0x01	; 1
    100c:	90 93 8c 00 	sts	0x008C, r25
    1010:	80 93 8b 00 	sts	0x008B, r24
}
    1014:	9f 91       	pop	r25
    1016:	8f 91       	pop	r24
    1018:	0f 90       	pop	r0
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	0f 90       	pop	r0
    101e:	1f 90       	pop	r1
    1020:	18 95       	reti

00001022 <PWM0_init>:
    1022:	83 b7       	in	r24, 0x33	; 51
    1024:	88 64       	ori	r24, 0x48	; 72
    1026:	83 bf       	out	0x33, r24	; 51
    1028:	83 b7       	in	r24, 0x33	; 51
    102a:	80 62       	ori	r24, 0x20	; 32
    102c:	83 bf       	out	0x33, r24	; 51
    102e:	83 b7       	in	r24, 0x33	; 51
    1030:	81 60       	ori	r24, 0x01	; 1
    1032:	83 bf       	out	0x33, r24	; 51
    1034:	08 95       	ret

00001036 <PWM2_init>:
    1036:	85 b5       	in	r24, 0x25	; 37
    1038:	88 64       	ori	r24, 0x48	; 72
    103a:	85 bd       	out	0x25, r24	; 37
    103c:	85 b5       	in	r24, 0x25	; 37
    103e:	80 62       	ori	r24, 0x20	; 32
    1040:	85 bd       	out	0x25, r24	; 37
    1042:	85 b5       	in	r24, 0x25	; 37
    1044:	81 60       	ori	r24, 0x01	; 1
    1046:	85 bd       	out	0x25, r24	; 37
    1048:	08 95       	ret

0000104a <PWM0>:
    104a:	8c bf       	out	0x3c, r24	; 60
    104c:	08 95       	ret

0000104e <PWM2>:
    104e:	83 bd       	out	0x23, r24	; 35
    1050:	08 95       	ret

00001052 <UART_init>:
    1052:	80 b5       	in	r24, 0x20	; 32
    1054:	8f 7b       	andi	r24, 0xBF	; 191
    1056:	80 bd       	out	0x20, r24	; 32
    1058:	59 98       	cbi	0x0b, 1	; 11
    105a:	10 bc       	out	0x20, r1	; 32
    105c:	87 e6       	ldi	r24, 0x67	; 103
    105e:	89 b9       	out	0x09, r24	; 9
    1060:	8a b1       	in	r24, 0x0a	; 10
    1062:	88 61       	ori	r24, 0x18	; 24
    1064:	8a b9       	out	0x0a, r24	; 10
    1066:	80 b5       	in	r24, 0x20	; 32
    1068:	8e 68       	ori	r24, 0x8E	; 142
    106a:	80 bd       	out	0x20, r24	; 32
    106c:	08 95       	ret

0000106e <__subsf3>:
    106e:	50 58       	subi	r21, 0x80	; 128

00001070 <__addsf3>:
    1070:	bb 27       	eor	r27, r27
    1072:	aa 27       	eor	r26, r26
    1074:	0e 94 4f 08 	call	0x109e	; 0x109e <__addsf3x>
    1078:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <__fp_round>
    107c:	0e 94 49 09 	call	0x1292	; 0x1292 <__fp_pscA>
    1080:	38 f0       	brcs	.+14     	; 0x1090 <__addsf3+0x20>
    1082:	0e 94 50 09 	call	0x12a0	; 0x12a0 <__fp_pscB>
    1086:	20 f0       	brcs	.+8      	; 0x1090 <__addsf3+0x20>
    1088:	39 f4       	brne	.+14     	; 0x1098 <__addsf3+0x28>
    108a:	9f 3f       	cpi	r25, 0xFF	; 255
    108c:	19 f4       	brne	.+6      	; 0x1094 <__addsf3+0x24>
    108e:	26 f4       	brtc	.+8      	; 0x1098 <__addsf3+0x28>
    1090:	0c 94 46 09 	jmp	0x128c	; 0x128c <__fp_nan>
    1094:	0e f4       	brtc	.+2      	; 0x1098 <__addsf3+0x28>
    1096:	e0 95       	com	r30
    1098:	e7 fb       	bst	r30, 7
    109a:	0c 94 40 09 	jmp	0x1280	; 0x1280 <__fp_inf>

0000109e <__addsf3x>:
    109e:	e9 2f       	mov	r30, r25
    10a0:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__fp_split3>
    10a4:	58 f3       	brcs	.-42     	; 0x107c <__addsf3+0xc>
    10a6:	ba 17       	cp	r27, r26
    10a8:	62 07       	cpc	r22, r18
    10aa:	73 07       	cpc	r23, r19
    10ac:	84 07       	cpc	r24, r20
    10ae:	95 07       	cpc	r25, r21
    10b0:	20 f0       	brcs	.+8      	; 0x10ba <__addsf3x+0x1c>
    10b2:	79 f4       	brne	.+30     	; 0x10d2 <__addsf3x+0x34>
    10b4:	a6 f5       	brtc	.+104    	; 0x111e <__addsf3x+0x80>
    10b6:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <__fp_zero>
    10ba:	0e f4       	brtc	.+2      	; 0x10be <__addsf3x+0x20>
    10bc:	e0 95       	com	r30
    10be:	0b 2e       	mov	r0, r27
    10c0:	ba 2f       	mov	r27, r26
    10c2:	a0 2d       	mov	r26, r0
    10c4:	0b 01       	movw	r0, r22
    10c6:	b9 01       	movw	r22, r18
    10c8:	90 01       	movw	r18, r0
    10ca:	0c 01       	movw	r0, r24
    10cc:	ca 01       	movw	r24, r20
    10ce:	a0 01       	movw	r20, r0
    10d0:	11 24       	eor	r1, r1
    10d2:	ff 27       	eor	r31, r31
    10d4:	59 1b       	sub	r21, r25
    10d6:	99 f0       	breq	.+38     	; 0x10fe <__addsf3x+0x60>
    10d8:	59 3f       	cpi	r21, 0xF9	; 249
    10da:	50 f4       	brcc	.+20     	; 0x10f0 <__addsf3x+0x52>
    10dc:	50 3e       	cpi	r21, 0xE0	; 224
    10de:	68 f1       	brcs	.+90     	; 0x113a <__addsf3x+0x9c>
    10e0:	1a 16       	cp	r1, r26
    10e2:	f0 40       	sbci	r31, 0x00	; 0
    10e4:	a2 2f       	mov	r26, r18
    10e6:	23 2f       	mov	r18, r19
    10e8:	34 2f       	mov	r19, r20
    10ea:	44 27       	eor	r20, r20
    10ec:	58 5f       	subi	r21, 0xF8	; 248
    10ee:	f3 cf       	rjmp	.-26     	; 0x10d6 <__addsf3x+0x38>
    10f0:	46 95       	lsr	r20
    10f2:	37 95       	ror	r19
    10f4:	27 95       	ror	r18
    10f6:	a7 95       	ror	r26
    10f8:	f0 40       	sbci	r31, 0x00	; 0
    10fa:	53 95       	inc	r21
    10fc:	c9 f7       	brne	.-14     	; 0x10f0 <__addsf3x+0x52>
    10fe:	7e f4       	brtc	.+30     	; 0x111e <__addsf3x+0x80>
    1100:	1f 16       	cp	r1, r31
    1102:	ba 0b       	sbc	r27, r26
    1104:	62 0b       	sbc	r22, r18
    1106:	73 0b       	sbc	r23, r19
    1108:	84 0b       	sbc	r24, r20
    110a:	ba f0       	brmi	.+46     	; 0x113a <__addsf3x+0x9c>
    110c:	91 50       	subi	r25, 0x01	; 1
    110e:	a1 f0       	breq	.+40     	; 0x1138 <__addsf3x+0x9a>
    1110:	ff 0f       	add	r31, r31
    1112:	bb 1f       	adc	r27, r27
    1114:	66 1f       	adc	r22, r22
    1116:	77 1f       	adc	r23, r23
    1118:	88 1f       	adc	r24, r24
    111a:	c2 f7       	brpl	.-16     	; 0x110c <__addsf3x+0x6e>
    111c:	0e c0       	rjmp	.+28     	; 0x113a <__addsf3x+0x9c>
    111e:	ba 0f       	add	r27, r26
    1120:	62 1f       	adc	r22, r18
    1122:	73 1f       	adc	r23, r19
    1124:	84 1f       	adc	r24, r20
    1126:	48 f4       	brcc	.+18     	; 0x113a <__addsf3x+0x9c>
    1128:	87 95       	ror	r24
    112a:	77 95       	ror	r23
    112c:	67 95       	ror	r22
    112e:	b7 95       	ror	r27
    1130:	f7 95       	ror	r31
    1132:	9e 3f       	cpi	r25, 0xFE	; 254
    1134:	08 f0       	brcs	.+2      	; 0x1138 <__addsf3x+0x9a>
    1136:	b0 cf       	rjmp	.-160    	; 0x1098 <__addsf3+0x28>
    1138:	93 95       	inc	r25
    113a:	88 0f       	add	r24, r24
    113c:	08 f0       	brcs	.+2      	; 0x1140 <__addsf3x+0xa2>
    113e:	99 27       	eor	r25, r25
    1140:	ee 0f       	add	r30, r30
    1142:	97 95       	ror	r25
    1144:	87 95       	ror	r24
    1146:	08 95       	ret

00001148 <__cmpsf2>:
    1148:	0e 94 1c 09 	call	0x1238	; 0x1238 <__fp_cmp>
    114c:	08 f4       	brcc	.+2      	; 0x1150 <__cmpsf2+0x8>
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	08 95       	ret

00001152 <__fixsfsi>:
    1152:	0e 94 b0 08 	call	0x1160	; 0x1160 <__fixunssfsi>
    1156:	68 94       	set
    1158:	b1 11       	cpse	r27, r1
    115a:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <__fp_szero>
    115e:	08 95       	ret

00001160 <__fixunssfsi>:
    1160:	0e 94 70 09 	call	0x12e0	; 0x12e0 <__fp_splitA>
    1164:	88 f0       	brcs	.+34     	; 0x1188 <__fixunssfsi+0x28>
    1166:	9f 57       	subi	r25, 0x7F	; 127
    1168:	98 f0       	brcs	.+38     	; 0x1190 <__fixunssfsi+0x30>
    116a:	b9 2f       	mov	r27, r25
    116c:	99 27       	eor	r25, r25
    116e:	b7 51       	subi	r27, 0x17	; 23
    1170:	b0 f0       	brcs	.+44     	; 0x119e <__fixunssfsi+0x3e>
    1172:	e1 f0       	breq	.+56     	; 0x11ac <__fixunssfsi+0x4c>
    1174:	66 0f       	add	r22, r22
    1176:	77 1f       	adc	r23, r23
    1178:	88 1f       	adc	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	1a f0       	brmi	.+6      	; 0x1184 <__fixunssfsi+0x24>
    117e:	ba 95       	dec	r27
    1180:	c9 f7       	brne	.-14     	; 0x1174 <__fixunssfsi+0x14>
    1182:	14 c0       	rjmp	.+40     	; 0x11ac <__fixunssfsi+0x4c>
    1184:	b1 30       	cpi	r27, 0x01	; 1
    1186:	91 f0       	breq	.+36     	; 0x11ac <__fixunssfsi+0x4c>
    1188:	0e 94 8a 09 	call	0x1314	; 0x1314 <__fp_zero>
    118c:	b1 e0       	ldi	r27, 0x01	; 1
    118e:	08 95       	ret
    1190:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <__fp_zero>
    1194:	67 2f       	mov	r22, r23
    1196:	78 2f       	mov	r23, r24
    1198:	88 27       	eor	r24, r24
    119a:	b8 5f       	subi	r27, 0xF8	; 248
    119c:	39 f0       	breq	.+14     	; 0x11ac <__fixunssfsi+0x4c>
    119e:	b9 3f       	cpi	r27, 0xF9	; 249
    11a0:	cc f3       	brlt	.-14     	; 0x1194 <__fixunssfsi+0x34>
    11a2:	86 95       	lsr	r24
    11a4:	77 95       	ror	r23
    11a6:	67 95       	ror	r22
    11a8:	b3 95       	inc	r27
    11aa:	d9 f7       	brne	.-10     	; 0x11a2 <__fixunssfsi+0x42>
    11ac:	3e f4       	brtc	.+14     	; 0x11bc <__fixunssfsi+0x5c>
    11ae:	90 95       	com	r25
    11b0:	80 95       	com	r24
    11b2:	70 95       	com	r23
    11b4:	61 95       	neg	r22
    11b6:	7f 4f       	sbci	r23, 0xFF	; 255
    11b8:	8f 4f       	sbci	r24, 0xFF	; 255
    11ba:	9f 4f       	sbci	r25, 0xFF	; 255
    11bc:	08 95       	ret

000011be <__floatunsisf>:
    11be:	e8 94       	clt
    11c0:	09 c0       	rjmp	.+18     	; 0x11d4 <__floatsisf+0x12>

000011c2 <__floatsisf>:
    11c2:	97 fb       	bst	r25, 7
    11c4:	3e f4       	brtc	.+14     	; 0x11d4 <__floatsisf+0x12>
    11c6:	90 95       	com	r25
    11c8:	80 95       	com	r24
    11ca:	70 95       	com	r23
    11cc:	61 95       	neg	r22
    11ce:	7f 4f       	sbci	r23, 0xFF	; 255
    11d0:	8f 4f       	sbci	r24, 0xFF	; 255
    11d2:	9f 4f       	sbci	r25, 0xFF	; 255
    11d4:	99 23       	and	r25, r25
    11d6:	a9 f0       	breq	.+42     	; 0x1202 <__floatsisf+0x40>
    11d8:	f9 2f       	mov	r31, r25
    11da:	96 e9       	ldi	r25, 0x96	; 150
    11dc:	bb 27       	eor	r27, r27
    11de:	93 95       	inc	r25
    11e0:	f6 95       	lsr	r31
    11e2:	87 95       	ror	r24
    11e4:	77 95       	ror	r23
    11e6:	67 95       	ror	r22
    11e8:	b7 95       	ror	r27
    11ea:	f1 11       	cpse	r31, r1
    11ec:	f8 cf       	rjmp	.-16     	; 0x11de <__floatsisf+0x1c>
    11ee:	fa f4       	brpl	.+62     	; 0x122e <__floatsisf+0x6c>
    11f0:	bb 0f       	add	r27, r27
    11f2:	11 f4       	brne	.+4      	; 0x11f8 <__floatsisf+0x36>
    11f4:	60 ff       	sbrs	r22, 0
    11f6:	1b c0       	rjmp	.+54     	; 0x122e <__floatsisf+0x6c>
    11f8:	6f 5f       	subi	r22, 0xFF	; 255
    11fa:	7f 4f       	sbci	r23, 0xFF	; 255
    11fc:	8f 4f       	sbci	r24, 0xFF	; 255
    11fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1200:	16 c0       	rjmp	.+44     	; 0x122e <__floatsisf+0x6c>
    1202:	88 23       	and	r24, r24
    1204:	11 f0       	breq	.+4      	; 0x120a <__floatsisf+0x48>
    1206:	96 e9       	ldi	r25, 0x96	; 150
    1208:	11 c0       	rjmp	.+34     	; 0x122c <__floatsisf+0x6a>
    120a:	77 23       	and	r23, r23
    120c:	21 f0       	breq	.+8      	; 0x1216 <__floatsisf+0x54>
    120e:	9e e8       	ldi	r25, 0x8E	; 142
    1210:	87 2f       	mov	r24, r23
    1212:	76 2f       	mov	r23, r22
    1214:	05 c0       	rjmp	.+10     	; 0x1220 <__floatsisf+0x5e>
    1216:	66 23       	and	r22, r22
    1218:	71 f0       	breq	.+28     	; 0x1236 <__floatsisf+0x74>
    121a:	96 e8       	ldi	r25, 0x86	; 134
    121c:	86 2f       	mov	r24, r22
    121e:	70 e0       	ldi	r23, 0x00	; 0
    1220:	60 e0       	ldi	r22, 0x00	; 0
    1222:	2a f0       	brmi	.+10     	; 0x122e <__floatsisf+0x6c>
    1224:	9a 95       	dec	r25
    1226:	66 0f       	add	r22, r22
    1228:	77 1f       	adc	r23, r23
    122a:	88 1f       	adc	r24, r24
    122c:	da f7       	brpl	.-10     	; 0x1224 <__floatsisf+0x62>
    122e:	88 0f       	add	r24, r24
    1230:	96 95       	lsr	r25
    1232:	87 95       	ror	r24
    1234:	97 f9       	bld	r25, 7
    1236:	08 95       	ret

00001238 <__fp_cmp>:
    1238:	99 0f       	add	r25, r25
    123a:	00 08       	sbc	r0, r0
    123c:	55 0f       	add	r21, r21
    123e:	aa 0b       	sbc	r26, r26
    1240:	e0 e8       	ldi	r30, 0x80	; 128
    1242:	fe ef       	ldi	r31, 0xFE	; 254
    1244:	16 16       	cp	r1, r22
    1246:	17 06       	cpc	r1, r23
    1248:	e8 07       	cpc	r30, r24
    124a:	f9 07       	cpc	r31, r25
    124c:	c0 f0       	brcs	.+48     	; 0x127e <__fp_cmp+0x46>
    124e:	12 16       	cp	r1, r18
    1250:	13 06       	cpc	r1, r19
    1252:	e4 07       	cpc	r30, r20
    1254:	f5 07       	cpc	r31, r21
    1256:	98 f0       	brcs	.+38     	; 0x127e <__fp_cmp+0x46>
    1258:	62 1b       	sub	r22, r18
    125a:	73 0b       	sbc	r23, r19
    125c:	84 0b       	sbc	r24, r20
    125e:	95 0b       	sbc	r25, r21
    1260:	39 f4       	brne	.+14     	; 0x1270 <__fp_cmp+0x38>
    1262:	0a 26       	eor	r0, r26
    1264:	61 f0       	breq	.+24     	; 0x127e <__fp_cmp+0x46>
    1266:	23 2b       	or	r18, r19
    1268:	24 2b       	or	r18, r20
    126a:	25 2b       	or	r18, r21
    126c:	21 f4       	brne	.+8      	; 0x1276 <__fp_cmp+0x3e>
    126e:	08 95       	ret
    1270:	0a 26       	eor	r0, r26
    1272:	09 f4       	brne	.+2      	; 0x1276 <__fp_cmp+0x3e>
    1274:	a1 40       	sbci	r26, 0x01	; 1
    1276:	a6 95       	lsr	r26
    1278:	8f ef       	ldi	r24, 0xFF	; 255
    127a:	81 1d       	adc	r24, r1
    127c:	81 1d       	adc	r24, r1
    127e:	08 95       	ret

00001280 <__fp_inf>:
    1280:	97 f9       	bld	r25, 7
    1282:	9f 67       	ori	r25, 0x7F	; 127
    1284:	80 e8       	ldi	r24, 0x80	; 128
    1286:	70 e0       	ldi	r23, 0x00	; 0
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	08 95       	ret

0000128c <__fp_nan>:
    128c:	9f ef       	ldi	r25, 0xFF	; 255
    128e:	80 ec       	ldi	r24, 0xC0	; 192
    1290:	08 95       	ret

00001292 <__fp_pscA>:
    1292:	00 24       	eor	r0, r0
    1294:	0a 94       	dec	r0
    1296:	16 16       	cp	r1, r22
    1298:	17 06       	cpc	r1, r23
    129a:	18 06       	cpc	r1, r24
    129c:	09 06       	cpc	r0, r25
    129e:	08 95       	ret

000012a0 <__fp_pscB>:
    12a0:	00 24       	eor	r0, r0
    12a2:	0a 94       	dec	r0
    12a4:	12 16       	cp	r1, r18
    12a6:	13 06       	cpc	r1, r19
    12a8:	14 06       	cpc	r1, r20
    12aa:	05 06       	cpc	r0, r21
    12ac:	08 95       	ret

000012ae <__fp_round>:
    12ae:	09 2e       	mov	r0, r25
    12b0:	03 94       	inc	r0
    12b2:	00 0c       	add	r0, r0
    12b4:	11 f4       	brne	.+4      	; 0x12ba <__fp_round+0xc>
    12b6:	88 23       	and	r24, r24
    12b8:	52 f0       	brmi	.+20     	; 0x12ce <__fp_round+0x20>
    12ba:	bb 0f       	add	r27, r27
    12bc:	40 f4       	brcc	.+16     	; 0x12ce <__fp_round+0x20>
    12be:	bf 2b       	or	r27, r31
    12c0:	11 f4       	brne	.+4      	; 0x12c6 <__fp_round+0x18>
    12c2:	60 ff       	sbrs	r22, 0
    12c4:	04 c0       	rjmp	.+8      	; 0x12ce <__fp_round+0x20>
    12c6:	6f 5f       	subi	r22, 0xFF	; 255
    12c8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ca:	8f 4f       	sbci	r24, 0xFF	; 255
    12cc:	9f 4f       	sbci	r25, 0xFF	; 255
    12ce:	08 95       	ret

000012d0 <__fp_split3>:
    12d0:	57 fd       	sbrc	r21, 7
    12d2:	90 58       	subi	r25, 0x80	; 128
    12d4:	44 0f       	add	r20, r20
    12d6:	55 1f       	adc	r21, r21
    12d8:	59 f0       	breq	.+22     	; 0x12f0 <__fp_splitA+0x10>
    12da:	5f 3f       	cpi	r21, 0xFF	; 255
    12dc:	71 f0       	breq	.+28     	; 0x12fa <__fp_splitA+0x1a>
    12de:	47 95       	ror	r20

000012e0 <__fp_splitA>:
    12e0:	88 0f       	add	r24, r24
    12e2:	97 fb       	bst	r25, 7
    12e4:	99 1f       	adc	r25, r25
    12e6:	61 f0       	breq	.+24     	; 0x1300 <__fp_splitA+0x20>
    12e8:	9f 3f       	cpi	r25, 0xFF	; 255
    12ea:	79 f0       	breq	.+30     	; 0x130a <__fp_splitA+0x2a>
    12ec:	87 95       	ror	r24
    12ee:	08 95       	ret
    12f0:	12 16       	cp	r1, r18
    12f2:	13 06       	cpc	r1, r19
    12f4:	14 06       	cpc	r1, r20
    12f6:	55 1f       	adc	r21, r21
    12f8:	f2 cf       	rjmp	.-28     	; 0x12de <__fp_split3+0xe>
    12fa:	46 95       	lsr	r20
    12fc:	f1 df       	rcall	.-30     	; 0x12e0 <__fp_splitA>
    12fe:	08 c0       	rjmp	.+16     	; 0x1310 <__fp_splitA+0x30>
    1300:	16 16       	cp	r1, r22
    1302:	17 06       	cpc	r1, r23
    1304:	18 06       	cpc	r1, r24
    1306:	99 1f       	adc	r25, r25
    1308:	f1 cf       	rjmp	.-30     	; 0x12ec <__fp_splitA+0xc>
    130a:	86 95       	lsr	r24
    130c:	71 05       	cpc	r23, r1
    130e:	61 05       	cpc	r22, r1
    1310:	08 94       	sec
    1312:	08 95       	ret

00001314 <__fp_zero>:
    1314:	e8 94       	clt

00001316 <__fp_szero>:
    1316:	bb 27       	eor	r27, r27
    1318:	66 27       	eor	r22, r22
    131a:	77 27       	eor	r23, r23
    131c:	cb 01       	movw	r24, r22
    131e:	97 f9       	bld	r25, 7
    1320:	08 95       	ret

00001322 <__mulsf3>:
    1322:	0e 94 a4 09 	call	0x1348	; 0x1348 <__mulsf3x>
    1326:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <__fp_round>
    132a:	0e 94 49 09 	call	0x1292	; 0x1292 <__fp_pscA>
    132e:	38 f0       	brcs	.+14     	; 0x133e <__mulsf3+0x1c>
    1330:	0e 94 50 09 	call	0x12a0	; 0x12a0 <__fp_pscB>
    1334:	20 f0       	brcs	.+8      	; 0x133e <__mulsf3+0x1c>
    1336:	95 23       	and	r25, r21
    1338:	11 f0       	breq	.+4      	; 0x133e <__mulsf3+0x1c>
    133a:	0c 94 40 09 	jmp	0x1280	; 0x1280 <__fp_inf>
    133e:	0c 94 46 09 	jmp	0x128c	; 0x128c <__fp_nan>
    1342:	11 24       	eor	r1, r1
    1344:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <__fp_szero>

00001348 <__mulsf3x>:
    1348:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__fp_split3>
    134c:	70 f3       	brcs	.-36     	; 0x132a <__mulsf3+0x8>

0000134e <__mulsf3_pse>:
    134e:	95 9f       	mul	r25, r21
    1350:	c1 f3       	breq	.-16     	; 0x1342 <__mulsf3+0x20>
    1352:	95 0f       	add	r25, r21
    1354:	50 e0       	ldi	r21, 0x00	; 0
    1356:	55 1f       	adc	r21, r21
    1358:	62 9f       	mul	r22, r18
    135a:	f0 01       	movw	r30, r0
    135c:	72 9f       	mul	r23, r18
    135e:	bb 27       	eor	r27, r27
    1360:	f0 0d       	add	r31, r0
    1362:	b1 1d       	adc	r27, r1
    1364:	63 9f       	mul	r22, r19
    1366:	aa 27       	eor	r26, r26
    1368:	f0 0d       	add	r31, r0
    136a:	b1 1d       	adc	r27, r1
    136c:	aa 1f       	adc	r26, r26
    136e:	64 9f       	mul	r22, r20
    1370:	66 27       	eor	r22, r22
    1372:	b0 0d       	add	r27, r0
    1374:	a1 1d       	adc	r26, r1
    1376:	66 1f       	adc	r22, r22
    1378:	82 9f       	mul	r24, r18
    137a:	22 27       	eor	r18, r18
    137c:	b0 0d       	add	r27, r0
    137e:	a1 1d       	adc	r26, r1
    1380:	62 1f       	adc	r22, r18
    1382:	73 9f       	mul	r23, r19
    1384:	b0 0d       	add	r27, r0
    1386:	a1 1d       	adc	r26, r1
    1388:	62 1f       	adc	r22, r18
    138a:	83 9f       	mul	r24, r19
    138c:	a0 0d       	add	r26, r0
    138e:	61 1d       	adc	r22, r1
    1390:	22 1f       	adc	r18, r18
    1392:	74 9f       	mul	r23, r20
    1394:	33 27       	eor	r19, r19
    1396:	a0 0d       	add	r26, r0
    1398:	61 1d       	adc	r22, r1
    139a:	23 1f       	adc	r18, r19
    139c:	84 9f       	mul	r24, r20
    139e:	60 0d       	add	r22, r0
    13a0:	21 1d       	adc	r18, r1
    13a2:	82 2f       	mov	r24, r18
    13a4:	76 2f       	mov	r23, r22
    13a6:	6a 2f       	mov	r22, r26
    13a8:	11 24       	eor	r1, r1
    13aa:	9f 57       	subi	r25, 0x7F	; 127
    13ac:	50 40       	sbci	r21, 0x00	; 0
    13ae:	9a f0       	brmi	.+38     	; 0x13d6 <__mulsf3_pse+0x88>
    13b0:	f1 f0       	breq	.+60     	; 0x13ee <__mulsf3_pse+0xa0>
    13b2:	88 23       	and	r24, r24
    13b4:	4a f0       	brmi	.+18     	; 0x13c8 <__mulsf3_pse+0x7a>
    13b6:	ee 0f       	add	r30, r30
    13b8:	ff 1f       	adc	r31, r31
    13ba:	bb 1f       	adc	r27, r27
    13bc:	66 1f       	adc	r22, r22
    13be:	77 1f       	adc	r23, r23
    13c0:	88 1f       	adc	r24, r24
    13c2:	91 50       	subi	r25, 0x01	; 1
    13c4:	50 40       	sbci	r21, 0x00	; 0
    13c6:	a9 f7       	brne	.-22     	; 0x13b2 <__mulsf3_pse+0x64>
    13c8:	9e 3f       	cpi	r25, 0xFE	; 254
    13ca:	51 05       	cpc	r21, r1
    13cc:	80 f0       	brcs	.+32     	; 0x13ee <__mulsf3_pse+0xa0>
    13ce:	0c 94 40 09 	jmp	0x1280	; 0x1280 <__fp_inf>
    13d2:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <__fp_szero>
    13d6:	5f 3f       	cpi	r21, 0xFF	; 255
    13d8:	e4 f3       	brlt	.-8      	; 0x13d2 <__mulsf3_pse+0x84>
    13da:	98 3e       	cpi	r25, 0xE8	; 232
    13dc:	d4 f3       	brlt	.-12     	; 0x13d2 <__mulsf3_pse+0x84>
    13de:	86 95       	lsr	r24
    13e0:	77 95       	ror	r23
    13e2:	67 95       	ror	r22
    13e4:	b7 95       	ror	r27
    13e6:	f7 95       	ror	r31
    13e8:	e7 95       	ror	r30
    13ea:	9f 5f       	subi	r25, 0xFF	; 255
    13ec:	c1 f7       	brne	.-16     	; 0x13de <__mulsf3_pse+0x90>
    13ee:	fe 2b       	or	r31, r30
    13f0:	88 0f       	add	r24, r24
    13f2:	91 1d       	adc	r25, r1
    13f4:	96 95       	lsr	r25
    13f6:	87 95       	ror	r24
    13f8:	97 f9       	bld	r25, 7
    13fa:	08 95       	ret

000013fc <_exit>:
    13fc:	f8 94       	cli

000013fe <__stop_program>:
    13fe:	ff cf       	rjmp	.-2      	; 0x13fe <__stop_program>
