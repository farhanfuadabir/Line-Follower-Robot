
LFR_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000013ac  00001440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  00800078  00800078  00001458  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001488  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012f3  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000056d  00000000  00000000  0000294f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000097a  00000000  00000000  00002ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d4  00000000  00000000  00003838  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000548  00000000  00000000  00003c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000092c  00000000  00000000  00004154  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00004a80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <__vector_1>
       8:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <__vector_2>
       c:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 39       	cpi	r26, 0x9F	; 159
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5f 05 	call	0xabe	; 0xabe <main>
      8a:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <adc_init>:
      92:	3e 9a       	sbi	0x07, 6	; 7
      94:	37 9a       	sbi	0x06, 7	; 6
      96:	86 b1       	in	r24, 0x06	; 6
      98:	87 60       	ori	r24, 0x07	; 7
      9a:	86 b9       	out	0x06, r24	; 6
      9c:	08 95       	ret

0000009e <adcRead>:
      9e:	97 b1       	in	r25, 0x07	; 7
      a0:	90 7e       	andi	r25, 0xE0	; 224
      a2:	97 b9       	out	0x07, r25	; 7
      a4:	97 b1       	in	r25, 0x07	; 7
      a6:	89 2b       	or	r24, r25
      a8:	87 b9       	out	0x07, r24	; 7
      aa:	36 9a       	sbi	0x06, 6	; 6
      ac:	36 99       	sbic	0x06, 6	; 6
      ae:	fe cf       	rjmp	.-4      	; 0xac <adcRead+0xe>
      b0:	84 b1       	in	r24, 0x04	; 4
      b2:	95 b1       	in	r25, 0x05	; 5
      b4:	08 95       	ret

000000b6 <sensorValueConversion>:
	trig2_PORT &= ~(1 << trig2_PIN);
	trig3_PORT &= ~(1 << trig3_PIN);
		
	distance1 = .0353 * pulse1 / 2;
	distance2 = .0353 * pulse2 / 2;
	distance3 = .0353 * pulse3 / 2;
      b6:	bf 92       	push	r11
      b8:	cf 92       	push	r12
      ba:	df 92       	push	r13
      bc:	ef 92       	push	r14
      be:	ff 92       	push	r15
      c0:	0f 93       	push	r16
      c2:	1f 93       	push	r17
		enable2(RMspeed);
	}
}

void sensorValueConversion(void)
{
      c4:	cf 93       	push	r28
      c6:	df 93       	push	r29
	int digitalValue = 0;
	sensorValue = 0;
      c8:	10 92 9e 00 	sts	0x009E, r1
      cc:	10 92 9d 00 	sts	0x009D, r1
      d0:	08 e7       	ldi	r16, 0x78	; 120
      d2:	10 e0       	ldi	r17, 0x00	; 0
      d4:	c0 e0       	ldi	r28, 0x00	; 0
      d6:	d0 e0       	ldi	r29, 0x00	; 0
      d8:	0f 2e       	mov	r0, r31
      da:	f7 e0       	ldi	r31, 0x07	; 7
      dc:	df 2e       	mov	r13, r31
      de:	f0 2d       	mov	r31, r0
	signed int sensorNumber = 0;
	
	for (sensorNumber = 7; sensorNumber >= 0; sensorNumber--)
	{
		int temp = adcRead(sensorNumber);
		if (temp > compareValue[sensorNumber]) digitalValue = 0;
      e0:	ee 24       	eor	r14, r14
      e2:	e3 94       	inc	r14
      e4:	f1 2c       	mov	r15, r1
      e6:	b1 2c       	mov	r11, r1
      e8:	c1 2c       	mov	r12, r1
	sensorValue = 0;
	signed int sensorNumber = 0;
	
	for (sensorNumber = 7; sensorNumber >= 0; sensorNumber--)
	{
		int temp = adcRead(sensorNumber);
      ea:	8d 2d       	mov	r24, r13
      ec:	8c 1b       	sub	r24, r28
      ee:	0e 94 4f 00 	call	0x9e	; 0x9e <adcRead>
		if (temp > compareValue[sensorNumber]) digitalValue = 0;
		else digitalValue = 1;
		sensorValue |= (digitalValue << (7 - sensorNumber));
      f2:	40 91 9d 00 	lds	r20, 0x009D
      f6:	50 91 9e 00 	lds	r21, 0x009E
	signed int sensorNumber = 0;
	
	for (sensorNumber = 7; sensorNumber >= 0; sensorNumber--)
	{
		int temp = adcRead(sensorNumber);
		if (temp > compareValue[sensorNumber]) digitalValue = 0;
      fa:	2e 2d       	mov	r18, r14
      fc:	3f 2d       	mov	r19, r15
      fe:	f8 01       	movw	r30, r16
     100:	72 91       	ld	r23, -Z
     102:	62 91       	ld	r22, -Z
     104:	8f 01       	movw	r16, r30
     106:	68 17       	cp	r22, r24
     108:	79 07       	cpc	r23, r25
     10a:	10 f4       	brcc	.+4      	; 0x110 <sensorValueConversion+0x5a>
     10c:	2b 2d       	mov	r18, r11
     10e:	3c 2d       	mov	r19, r12
		else digitalValue = 1;
		sensorValue |= (digitalValue << (7 - sensorNumber));
     110:	0c 2e       	mov	r0, r28
     112:	02 c0       	rjmp	.+4      	; 0x118 <sensorValueConversion+0x62>
     114:	22 0f       	add	r18, r18
     116:	33 1f       	adc	r19, r19
     118:	0a 94       	dec	r0
     11a:	e2 f7       	brpl	.-8      	; 0x114 <sensorValueConversion+0x5e>
     11c:	24 2b       	or	r18, r20
     11e:	35 2b       	or	r19, r21
     120:	30 93 9e 00 	sts	0x009E, r19
     124:	20 93 9d 00 	sts	0x009D, r18
     128:	21 96       	adiw	r28, 0x01	; 1
{
	int digitalValue = 0;
	sensorValue = 0;
	signed int sensorNumber = 0;
	
	for (sensorNumber = 7; sensorNumber >= 0; sensorNumber--)
     12a:	c8 30       	cpi	r28, 0x08	; 8
     12c:	d1 05       	cpc	r29, r1
     12e:	e9 f6       	brne	.-70     	; 0xea <sensorValueConversion+0x34>
// 		Serial_sendInt(temp, DEC);
// 		Serial_sendString("\t");
	}
// 	Serial_sendInt(sensorValue, BIN);
// 	Serial_sendString("\n");
}
     130:	df 91       	pop	r29
     132:	cf 91       	pop	r28
     134:	1f 91       	pop	r17
     136:	0f 91       	pop	r16
     138:	ff 90       	pop	r15
     13a:	ef 90       	pop	r14
     13c:	df 90       	pop	r13
     13e:	cf 90       	pop	r12
     140:	bf 90       	pop	r11
     142:	08 95       	ret

00000144 <sensorMapping>:



void sensorMapping(void)
{
	prev_mappedValue = mappedValue;
     144:	80 91 9b 00 	lds	r24, 0x009B
     148:	90 91 9c 00 	lds	r25, 0x009C
     14c:	90 93 9a 00 	sts	0x009A, r25
     150:	80 93 99 00 	sts	0x0099, r24
	if (sensorValue == 0b00000000) mappedValue = prev_mappedValue;
     154:	80 91 9d 00 	lds	r24, 0x009D
     158:	90 91 9e 00 	lds	r25, 0x009E
     15c:	89 2b       	or	r24, r25
     15e:	49 f4       	brne	.+18     	; 0x172 <sensorMapping+0x2e>
     160:	80 91 99 00 	lds	r24, 0x0099
     164:	90 91 9a 00 	lds	r25, 0x009A
     168:	90 93 9c 00 	sts	0x009C, r25
     16c:	80 93 9b 00 	sts	0x009B, r24
     170:	08 95       	ret
	else if (sensorValue == 0b11111111) mappedValue = 0;
     172:	80 91 9d 00 	lds	r24, 0x009D
     176:	90 91 9e 00 	lds	r25, 0x009E
     17a:	8f 3f       	cpi	r24, 0xFF	; 255
     17c:	91 05       	cpc	r25, r1
     17e:	29 f4       	brne	.+10     	; 0x18a <sensorMapping+0x46>
     180:	10 92 9c 00 	sts	0x009C, r1
     184:	10 92 9b 00 	sts	0x009B, r1
     188:	08 95       	ret
	
	else if ((sensorValue == 0b00011001) || (sensorValue == 0b00001001) || (sensorValue == 0b00010001) || (sensorValue == 0b00110001) || (sensorValue == 0b01110001) || (sensorValue == 0b01100001) || (sensorValue == 0b01100011)) mappedValue = prev_mappedValue;
     18a:	80 91 9d 00 	lds	r24, 0x009D
     18e:	90 91 9e 00 	lds	r25, 0x009E
     192:	49 97       	sbiw	r24, 0x19	; 25
     194:	39 f1       	breq	.+78     	; 0x1e4 <sensorMapping+0xa0>
     196:	80 91 9d 00 	lds	r24, 0x009D
     19a:	90 91 9e 00 	lds	r25, 0x009E
     19e:	09 97       	sbiw	r24, 0x09	; 9
     1a0:	09 f1       	breq	.+66     	; 0x1e4 <sensorMapping+0xa0>
     1a2:	80 91 9d 00 	lds	r24, 0x009D
     1a6:	90 91 9e 00 	lds	r25, 0x009E
     1aa:	41 97       	sbiw	r24, 0x11	; 17
     1ac:	d9 f0       	breq	.+54     	; 0x1e4 <sensorMapping+0xa0>
     1ae:	80 91 9d 00 	lds	r24, 0x009D
     1b2:	90 91 9e 00 	lds	r25, 0x009E
     1b6:	c1 97       	sbiw	r24, 0x31	; 49
     1b8:	a9 f0       	breq	.+42     	; 0x1e4 <sensorMapping+0xa0>
     1ba:	80 91 9d 00 	lds	r24, 0x009D
     1be:	90 91 9e 00 	lds	r25, 0x009E
     1c2:	81 37       	cpi	r24, 0x71	; 113
     1c4:	91 05       	cpc	r25, r1
     1c6:	71 f0       	breq	.+28     	; 0x1e4 <sensorMapping+0xa0>
     1c8:	80 91 9d 00 	lds	r24, 0x009D
     1cc:	90 91 9e 00 	lds	r25, 0x009E
     1d0:	81 36       	cpi	r24, 0x61	; 97
     1d2:	91 05       	cpc	r25, r1
     1d4:	39 f0       	breq	.+14     	; 0x1e4 <sensorMapping+0xa0>
     1d6:	80 91 9d 00 	lds	r24, 0x009D
     1da:	90 91 9e 00 	lds	r25, 0x009E
     1de:	83 36       	cpi	r24, 0x63	; 99
     1e0:	91 05       	cpc	r25, r1
     1e2:	49 f4       	brne	.+18     	; 0x1f6 <sensorMapping+0xb2>
     1e4:	80 91 99 00 	lds	r24, 0x0099
     1e8:	90 91 9a 00 	lds	r25, 0x009A
     1ec:	90 93 9c 00 	sts	0x009C, r25
     1f0:	80 93 9b 00 	sts	0x009B, r24
     1f4:	08 95       	ret
	else if ((sensorValue == 0b00001011) || (sensorValue == 0b00010011) || (sensorValue == 0b00011011) || (sensorValue == 0b00001010) || (sensorValue == 0b00010010) || (sensorValue == 0b01110111) || (sensorValue == 0b01110011) || (sensorValue == 0b00110111) || (sensorValue == 0b00011101) || (sensorValue == 0b01100111) || (sensorValue == 0b00001101) || (sensorValue == 0b00111001) || (sensorValue == 0b00110011)) mappedValue = prev_mappedValue;
     1f6:	80 91 9d 00 	lds	r24, 0x009D
     1fa:	90 91 9e 00 	lds	r25, 0x009E
     1fe:	0b 97       	sbiw	r24, 0x0b	; 11
     200:	09 f4       	brne	.+2      	; 0x204 <sensorMapping+0xc0>
     202:	4d c0       	rjmp	.+154    	; 0x29e <sensorMapping+0x15a>
     204:	80 91 9d 00 	lds	r24, 0x009D
     208:	90 91 9e 00 	lds	r25, 0x009E
     20c:	43 97       	sbiw	r24, 0x13	; 19
     20e:	09 f4       	brne	.+2      	; 0x212 <sensorMapping+0xce>
     210:	46 c0       	rjmp	.+140    	; 0x29e <sensorMapping+0x15a>
     212:	80 91 9d 00 	lds	r24, 0x009D
     216:	90 91 9e 00 	lds	r25, 0x009E
     21a:	4b 97       	sbiw	r24, 0x1b	; 27
     21c:	09 f4       	brne	.+2      	; 0x220 <sensorMapping+0xdc>
     21e:	3f c0       	rjmp	.+126    	; 0x29e <sensorMapping+0x15a>
     220:	80 91 9d 00 	lds	r24, 0x009D
     224:	90 91 9e 00 	lds	r25, 0x009E
     228:	0a 97       	sbiw	r24, 0x0a	; 10
     22a:	c9 f1       	breq	.+114    	; 0x29e <sensorMapping+0x15a>
     22c:	80 91 9d 00 	lds	r24, 0x009D
     230:	90 91 9e 00 	lds	r25, 0x009E
     234:	42 97       	sbiw	r24, 0x12	; 18
     236:	99 f1       	breq	.+102    	; 0x29e <sensorMapping+0x15a>
     238:	80 91 9d 00 	lds	r24, 0x009D
     23c:	90 91 9e 00 	lds	r25, 0x009E
     240:	87 37       	cpi	r24, 0x77	; 119
     242:	91 05       	cpc	r25, r1
     244:	61 f1       	breq	.+88     	; 0x29e <sensorMapping+0x15a>
     246:	80 91 9d 00 	lds	r24, 0x009D
     24a:	90 91 9e 00 	lds	r25, 0x009E
     24e:	83 37       	cpi	r24, 0x73	; 115
     250:	91 05       	cpc	r25, r1
     252:	29 f1       	breq	.+74     	; 0x29e <sensorMapping+0x15a>
     254:	80 91 9d 00 	lds	r24, 0x009D
     258:	90 91 9e 00 	lds	r25, 0x009E
     25c:	c7 97       	sbiw	r24, 0x37	; 55
     25e:	f9 f0       	breq	.+62     	; 0x29e <sensorMapping+0x15a>
     260:	80 91 9d 00 	lds	r24, 0x009D
     264:	90 91 9e 00 	lds	r25, 0x009E
     268:	4d 97       	sbiw	r24, 0x1d	; 29
     26a:	c9 f0       	breq	.+50     	; 0x29e <sensorMapping+0x15a>
     26c:	80 91 9d 00 	lds	r24, 0x009D
     270:	90 91 9e 00 	lds	r25, 0x009E
     274:	87 36       	cpi	r24, 0x67	; 103
     276:	91 05       	cpc	r25, r1
     278:	91 f0       	breq	.+36     	; 0x29e <sensorMapping+0x15a>
     27a:	80 91 9d 00 	lds	r24, 0x009D
     27e:	90 91 9e 00 	lds	r25, 0x009E
     282:	0d 97       	sbiw	r24, 0x0d	; 13
     284:	61 f0       	breq	.+24     	; 0x29e <sensorMapping+0x15a>
     286:	80 91 9d 00 	lds	r24, 0x009D
     28a:	90 91 9e 00 	lds	r25, 0x009E
     28e:	c9 97       	sbiw	r24, 0x39	; 57
     290:	31 f0       	breq	.+12     	; 0x29e <sensorMapping+0x15a>
     292:	80 91 9d 00 	lds	r24, 0x009D
     296:	90 91 9e 00 	lds	r25, 0x009E
     29a:	c3 97       	sbiw	r24, 0x33	; 51
     29c:	49 f4       	brne	.+18     	; 0x2b0 <sensorMapping+0x16c>
     29e:	80 91 99 00 	lds	r24, 0x0099
     2a2:	90 91 9a 00 	lds	r25, 0x009A
     2a6:	90 93 9c 00 	sts	0x009C, r25
     2aa:	80 93 9b 00 	sts	0x009B, r24
     2ae:	08 95       	ret
	else if ((sensorValue == 0b00000111) || (sensorValue == 0b00001111) || (sensorValue == 0b00011111 || sensorValue == 0b00111111 || sensorValue == 0b01111111)) mappedValue = 100;
     2b0:	80 91 9d 00 	lds	r24, 0x009D
     2b4:	90 91 9e 00 	lds	r25, 0x009E
     2b8:	07 97       	sbiw	r24, 0x07	; 7
     2ba:	c9 f0       	breq	.+50     	; 0x2ee <sensorMapping+0x1aa>
     2bc:	80 91 9d 00 	lds	r24, 0x009D
     2c0:	90 91 9e 00 	lds	r25, 0x009E
     2c4:	0f 97       	sbiw	r24, 0x0f	; 15
     2c6:	99 f0       	breq	.+38     	; 0x2ee <sensorMapping+0x1aa>
     2c8:	80 91 9d 00 	lds	r24, 0x009D
     2cc:	90 91 9e 00 	lds	r25, 0x009E
     2d0:	4f 97       	sbiw	r24, 0x1f	; 31
     2d2:	69 f0       	breq	.+26     	; 0x2ee <sensorMapping+0x1aa>
     2d4:	80 91 9d 00 	lds	r24, 0x009D
     2d8:	90 91 9e 00 	lds	r25, 0x009E
     2dc:	cf 97       	sbiw	r24, 0x3f	; 63
     2de:	39 f0       	breq	.+14     	; 0x2ee <sensorMapping+0x1aa>
     2e0:	80 91 9d 00 	lds	r24, 0x009D
     2e4:	90 91 9e 00 	lds	r25, 0x009E
     2e8:	8f 37       	cpi	r24, 0x7F	; 127
     2ea:	91 05       	cpc	r25, r1
     2ec:	39 f4       	brne	.+14     	; 0x2fc <sensorMapping+0x1b8>
     2ee:	84 e6       	ldi	r24, 0x64	; 100
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	90 93 9c 00 	sts	0x009C, r25
     2f6:	80 93 9b 00 	sts	0x009B, r24
     2fa:	08 95       	ret
	else if (sensorValue == 0b00000001) mappedValue = 70;
     2fc:	80 91 9d 00 	lds	r24, 0x009D
     300:	90 91 9e 00 	lds	r25, 0x009E
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	39 f4       	brne	.+14     	; 0x316 <sensorMapping+0x1d2>
     308:	86 e4       	ldi	r24, 0x46	; 70
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	90 93 9c 00 	sts	0x009C, r25
     310:	80 93 9b 00 	sts	0x009B, r24
     314:	08 95       	ret
	else if (sensorValue == 0b00000011) mappedValue = 60;
     316:	80 91 9d 00 	lds	r24, 0x009D
     31a:	90 91 9e 00 	lds	r25, 0x009E
     31e:	03 97       	sbiw	r24, 0x03	; 3
     320:	39 f4       	brne	.+14     	; 0x330 <sensorMapping+0x1ec>
     322:	8c e3       	ldi	r24, 0x3C	; 60
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	90 93 9c 00 	sts	0x009C, r25
     32a:	80 93 9b 00 	sts	0x009B, r24
     32e:	08 95       	ret
	else if (sensorValue == 0b00000010 ||/* sensorValue == 0b00000111 ||*/ sensorValue == 0b11111101) mappedValue = 30;
     330:	80 91 9d 00 	lds	r24, 0x009D
     334:	90 91 9e 00 	lds	r25, 0x009E
     338:	02 97       	sbiw	r24, 0x02	; 2
     33a:	39 f0       	breq	.+14     	; 0x34a <sensorMapping+0x206>
     33c:	80 91 9d 00 	lds	r24, 0x009D
     340:	90 91 9e 00 	lds	r25, 0x009E
     344:	8d 3f       	cpi	r24, 0xFD	; 253
     346:	91 05       	cpc	r25, r1
     348:	39 f4       	brne	.+14     	; 0x358 <sensorMapping+0x214>
     34a:	8e e1       	ldi	r24, 0x1E	; 30
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	90 93 9c 00 	sts	0x009C, r25
     352:	80 93 9b 00 	sts	0x009B, r24
     356:	08 95       	ret
	else if (sensorValue == 0b00000110 || sensorValue == 0b11111001) mappedValue = 20;
     358:	80 91 9d 00 	lds	r24, 0x009D
     35c:	90 91 9e 00 	lds	r25, 0x009E
     360:	06 97       	sbiw	r24, 0x06	; 6
     362:	39 f0       	breq	.+14     	; 0x372 <sensorMapping+0x22e>
     364:	80 91 9d 00 	lds	r24, 0x009D
     368:	90 91 9e 00 	lds	r25, 0x009E
     36c:	89 3f       	cpi	r24, 0xF9	; 249
     36e:	91 05       	cpc	r25, r1
     370:	39 f4       	brne	.+14     	; 0x380 <sensorMapping+0x23c>
     372:	84 e1       	ldi	r24, 0x14	; 20
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	90 93 9c 00 	sts	0x009C, r25
     37a:	80 93 9b 00 	sts	0x009B, r24
     37e:	08 95       	ret
	else if (sensorValue == 0b00000100 || sensorValue == 0b00001110) mappedValue = 15;
     380:	80 91 9d 00 	lds	r24, 0x009D
     384:	90 91 9e 00 	lds	r25, 0x009E
     388:	04 97       	sbiw	r24, 0x04	; 4
     38a:	31 f0       	breq	.+12     	; 0x398 <sensorMapping+0x254>
     38c:	80 91 9d 00 	lds	r24, 0x009D
     390:	90 91 9e 00 	lds	r25, 0x009E
     394:	0e 97       	sbiw	r24, 0x0e	; 14
     396:	39 f4       	brne	.+14     	; 0x3a6 <sensorMapping+0x262>
     398:	8f e0       	ldi	r24, 0x0F	; 15
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	90 93 9c 00 	sts	0x009C, r25
     3a0:	80 93 9b 00 	sts	0x009B, r24
     3a4:	08 95       	ret
	else if (sensorValue == 0b11111011)
     3a6:	80 91 9d 00 	lds	r24, 0x009D
     3aa:	90 91 9e 00 	lds	r25, 0x009E
     3ae:	8b 3f       	cpi	r24, 0xFB	; 251
     3b0:	91 05       	cpc	r25, r1
     3b2:	39 f4       	brne	.+14     	; 0x3c2 <sensorMapping+0x27e>
	{
		mappedValue = 15;
     3b4:	8f e0       	ldi	r24, 0x0F	; 15
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	90 93 9c 00 	sts	0x009C, r25
     3bc:	80 93 9b 00 	sts	0x009B, r24
     3c0:	08 95       	ret
// 		inverseLevel++;
	}
	else if (sensorValue == 0b00001100) mappedValue = 10;
     3c2:	80 91 9d 00 	lds	r24, 0x009D
     3c6:	90 91 9e 00 	lds	r25, 0x009E
     3ca:	0c 97       	sbiw	r24, 0x0c	; 12
     3cc:	39 f4       	brne	.+14     	; 0x3dc <sensorMapping+0x298>
     3ce:	8a e0       	ldi	r24, 0x0A	; 10
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	90 93 9c 00 	sts	0x009C, r25
     3d6:	80 93 9b 00 	sts	0x009B, r24
     3da:	08 95       	ret
	else if (sensorValue == 0b11110011)
     3dc:	80 91 9d 00 	lds	r24, 0x009D
     3e0:	90 91 9e 00 	lds	r25, 0x009E
     3e4:	83 3f       	cpi	r24, 0xF3	; 243
     3e6:	91 05       	cpc	r25, r1
     3e8:	39 f4       	brne	.+14     	; 0x3f8 <sensorMapping+0x2b4>
	{
		mappedValue = 10;
     3ea:	8a e0       	ldi	r24, 0x0A	; 10
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	90 93 9c 00 	sts	0x009C, r25
     3f2:	80 93 9b 00 	sts	0x009B, r24
     3f6:	08 95       	ret
// 		inverseLevel++;
	}
	else if (sensorValue == 0b00001000 || sensorValue == 0b00011100) mappedValue = 5;
     3f8:	80 91 9d 00 	lds	r24, 0x009D
     3fc:	90 91 9e 00 	lds	r25, 0x009E
     400:	08 97       	sbiw	r24, 0x08	; 8
     402:	31 f0       	breq	.+12     	; 0x410 <sensorMapping+0x2cc>
     404:	80 91 9d 00 	lds	r24, 0x009D
     408:	90 91 9e 00 	lds	r25, 0x009E
     40c:	4c 97       	sbiw	r24, 0x1c	; 28
     40e:	39 f4       	brne	.+14     	; 0x41e <sensorMapping+0x2da>
     410:	85 e0       	ldi	r24, 0x05	; 5
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	90 93 9c 00 	sts	0x009C, r25
     418:	80 93 9b 00 	sts	0x009B, r24
     41c:	08 95       	ret
	else if (sensorValue == 0b11110111)
     41e:	80 91 9d 00 	lds	r24, 0x009D
     422:	90 91 9e 00 	lds	r25, 0x009E
     426:	87 3f       	cpi	r24, 0xF7	; 247
     428:	91 05       	cpc	r25, r1
     42a:	39 f4       	brne	.+14     	; 0x43a <sensorMapping+0x2f6>
	{
		mappedValue = 5;
     42c:	85 e0       	ldi	r24, 0x05	; 5
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	90 93 9c 00 	sts	0x009C, r25
     434:	80 93 9b 00 	sts	0x009B, r24
     438:	08 95       	ret
//		inverseLevel++;
	}
	else if (sensorValue == 0b00011000 /*|| sensorValue == 0b11101110 || sensorValue == 0b01110111 || sensorValue == 0b01100110 || sensorValue == 0b10011001 || sensorValue == 0b00110111 || sensorValue == 0b11101100*/) mappedValue = 0;
     43a:	80 91 9d 00 	lds	r24, 0x009D
     43e:	90 91 9e 00 	lds	r25, 0x009E
     442:	48 97       	sbiw	r24, 0x18	; 24
     444:	29 f4       	brne	.+10     	; 0x450 <sensorMapping+0x30c>
     446:	10 92 9c 00 	sts	0x009C, r1
     44a:	10 92 9b 00 	sts	0x009B, r1
     44e:	08 95       	ret
	else if (sensorValue == 0b11100111)
     450:	80 91 9d 00 	lds	r24, 0x009D
     454:	90 91 9e 00 	lds	r25, 0x009E
     458:	87 3e       	cpi	r24, 0xE7	; 231
     45a:	91 05       	cpc	r25, r1
     45c:	29 f4       	brne	.+10     	; 0x468 <sensorMapping+0x324>
	{
		mappedValue = 0;
     45e:	10 92 9c 00 	sts	0x009C, r1
     462:	10 92 9b 00 	sts	0x009B, r1
     466:	08 95       	ret
//		inverseLevel++;
	}
	else if (sensorValue == 0b11101110 || sensorValue == 0b01110111 || sensorValue == 0b01100110 || sensorValue == 0b10011001 || sensorValue == 0b01111110 || sensorValue == 0b00111100 || sensorValue == 0b01111100 || sensorValue == 0b00111110 || sensorValue == 0b01110111 || sensorValue == 0b11101110)  mappedValue = .5;
     468:	80 91 9d 00 	lds	r24, 0x009D
     46c:	90 91 9e 00 	lds	r25, 0x009E
     470:	8e 3e       	cpi	r24, 0xEE	; 238
     472:	91 05       	cpc	r25, r1
     474:	e9 f1       	breq	.+122    	; 0x4f0 <sensorMapping+0x3ac>
     476:	80 91 9d 00 	lds	r24, 0x009D
     47a:	90 91 9e 00 	lds	r25, 0x009E
     47e:	87 37       	cpi	r24, 0x77	; 119
     480:	91 05       	cpc	r25, r1
     482:	b1 f1       	breq	.+108    	; 0x4f0 <sensorMapping+0x3ac>
     484:	80 91 9d 00 	lds	r24, 0x009D
     488:	90 91 9e 00 	lds	r25, 0x009E
     48c:	86 36       	cpi	r24, 0x66	; 102
     48e:	91 05       	cpc	r25, r1
     490:	79 f1       	breq	.+94     	; 0x4f0 <sensorMapping+0x3ac>
     492:	80 91 9d 00 	lds	r24, 0x009D
     496:	90 91 9e 00 	lds	r25, 0x009E
     49a:	89 39       	cpi	r24, 0x99	; 153
     49c:	91 05       	cpc	r25, r1
     49e:	41 f1       	breq	.+80     	; 0x4f0 <sensorMapping+0x3ac>
     4a0:	80 91 9d 00 	lds	r24, 0x009D
     4a4:	90 91 9e 00 	lds	r25, 0x009E
     4a8:	8e 37       	cpi	r24, 0x7E	; 126
     4aa:	91 05       	cpc	r25, r1
     4ac:	09 f1       	breq	.+66     	; 0x4f0 <sensorMapping+0x3ac>
     4ae:	80 91 9d 00 	lds	r24, 0x009D
     4b2:	90 91 9e 00 	lds	r25, 0x009E
     4b6:	cc 97       	sbiw	r24, 0x3c	; 60
     4b8:	d9 f0       	breq	.+54     	; 0x4f0 <sensorMapping+0x3ac>
     4ba:	80 91 9d 00 	lds	r24, 0x009D
     4be:	90 91 9e 00 	lds	r25, 0x009E
     4c2:	8c 37       	cpi	r24, 0x7C	; 124
     4c4:	91 05       	cpc	r25, r1
     4c6:	a1 f0       	breq	.+40     	; 0x4f0 <sensorMapping+0x3ac>
     4c8:	80 91 9d 00 	lds	r24, 0x009D
     4cc:	90 91 9e 00 	lds	r25, 0x009E
     4d0:	ce 97       	sbiw	r24, 0x3e	; 62
     4d2:	71 f0       	breq	.+28     	; 0x4f0 <sensorMapping+0x3ac>
     4d4:	80 91 9d 00 	lds	r24, 0x009D
     4d8:	90 91 9e 00 	lds	r25, 0x009E
     4dc:	87 37       	cpi	r24, 0x77	; 119
     4de:	91 05       	cpc	r25, r1
     4e0:	39 f0       	breq	.+14     	; 0x4f0 <sensorMapping+0x3ac>
     4e2:	80 91 9d 00 	lds	r24, 0x009D
     4e6:	90 91 9e 00 	lds	r25, 0x009E
     4ea:	8e 3e       	cpi	r24, 0xEE	; 238
     4ec:	91 05       	cpc	r25, r1
     4ee:	29 f4       	brne	.+10     	; 0x4fa <sensorMapping+0x3b6>
     4f0:	10 92 9c 00 	sts	0x009C, r1
     4f4:	10 92 9b 00 	sts	0x009B, r1
     4f8:	08 95       	ret
	else if (sensorValue == 0b00010000 || sensorValue == 0b00111000) mappedValue = -5;
     4fa:	80 91 9d 00 	lds	r24, 0x009D
     4fe:	90 91 9e 00 	lds	r25, 0x009E
     502:	40 97       	sbiw	r24, 0x10	; 16
     504:	31 f0       	breq	.+12     	; 0x512 <sensorMapping+0x3ce>
     506:	80 91 9d 00 	lds	r24, 0x009D
     50a:	90 91 9e 00 	lds	r25, 0x009E
     50e:	c8 97       	sbiw	r24, 0x38	; 56
     510:	39 f4       	brne	.+14     	; 0x520 <sensorMapping+0x3dc>
     512:	8b ef       	ldi	r24, 0xFB	; 251
     514:	9f ef       	ldi	r25, 0xFF	; 255
     516:	90 93 9c 00 	sts	0x009C, r25
     51a:	80 93 9b 00 	sts	0x009B, r24
     51e:	08 95       	ret
	else if (sensorValue == 0b11101111)
     520:	80 91 9d 00 	lds	r24, 0x009D
     524:	90 91 9e 00 	lds	r25, 0x009E
     528:	8f 3e       	cpi	r24, 0xEF	; 239
     52a:	91 05       	cpc	r25, r1
     52c:	39 f4       	brne	.+14     	; 0x53c <sensorMapping+0x3f8>
	{
		mappedValue = -5;
     52e:	8b ef       	ldi	r24, 0xFB	; 251
     530:	9f ef       	ldi	r25, 0xFF	; 255
     532:	90 93 9c 00 	sts	0x009C, r25
     536:	80 93 9b 00 	sts	0x009B, r24
     53a:	08 95       	ret
//		inverseLevel++;
	}
	else if (sensorValue == 0b00110000) mappedValue = -10;
     53c:	80 91 9d 00 	lds	r24, 0x009D
     540:	90 91 9e 00 	lds	r25, 0x009E
     544:	c0 97       	sbiw	r24, 0x30	; 48
     546:	39 f4       	brne	.+14     	; 0x556 <sensorMapping+0x412>
     548:	86 ef       	ldi	r24, 0xF6	; 246
     54a:	9f ef       	ldi	r25, 0xFF	; 255
     54c:	90 93 9c 00 	sts	0x009C, r25
     550:	80 93 9b 00 	sts	0x009B, r24
     554:	08 95       	ret
	else if (sensorValue == 0b11001111)
     556:	80 91 9d 00 	lds	r24, 0x009D
     55a:	90 91 9e 00 	lds	r25, 0x009E
     55e:	8f 3c       	cpi	r24, 0xCF	; 207
     560:	91 05       	cpc	r25, r1
     562:	39 f4       	brne	.+14     	; 0x572 <sensorMapping+0x42e>
	{
		mappedValue = -10;
     564:	86 ef       	ldi	r24, 0xF6	; 246
     566:	9f ef       	ldi	r25, 0xFF	; 255
     568:	90 93 9c 00 	sts	0x009C, r25
     56c:	80 93 9b 00 	sts	0x009B, r24
     570:	08 95       	ret
//		inverseLevel++;
	}
	else if (sensorValue == 0b00100000 || sensorValue == 0b01110000) mappedValue = -15;
     572:	80 91 9d 00 	lds	r24, 0x009D
     576:	90 91 9e 00 	lds	r25, 0x009E
     57a:	80 97       	sbiw	r24, 0x20	; 32
     57c:	39 f0       	breq	.+14     	; 0x58c <sensorMapping+0x448>
     57e:	80 91 9d 00 	lds	r24, 0x009D
     582:	90 91 9e 00 	lds	r25, 0x009E
     586:	80 37       	cpi	r24, 0x70	; 112
     588:	91 05       	cpc	r25, r1
     58a:	39 f4       	brne	.+14     	; 0x59a <sensorMapping+0x456>
     58c:	81 ef       	ldi	r24, 0xF1	; 241
     58e:	9f ef       	ldi	r25, 0xFF	; 255
     590:	90 93 9c 00 	sts	0x009C, r25
     594:	80 93 9b 00 	sts	0x009B, r24
     598:	08 95       	ret
	else if (sensorValue == 0b11011111)
     59a:	80 91 9d 00 	lds	r24, 0x009D
     59e:	90 91 9e 00 	lds	r25, 0x009E
     5a2:	8f 3d       	cpi	r24, 0xDF	; 223
     5a4:	91 05       	cpc	r25, r1
     5a6:	39 f4       	brne	.+14     	; 0x5b6 <sensorMapping+0x472>
	{
		mappedValue = -15;
     5a8:	81 ef       	ldi	r24, 0xF1	; 241
     5aa:	9f ef       	ldi	r25, 0xFF	; 255
     5ac:	90 93 9c 00 	sts	0x009C, r25
     5b0:	80 93 9b 00 	sts	0x009B, r24
     5b4:	08 95       	ret
//		inverseLevel++;
	}
	else if (sensorValue == 0b01100000 || sensorValue == 0b10011111) mappedValue = -20;
     5b6:	80 91 9d 00 	lds	r24, 0x009D
     5ba:	90 91 9e 00 	lds	r25, 0x009E
     5be:	80 36       	cpi	r24, 0x60	; 96
     5c0:	91 05       	cpc	r25, r1
     5c2:	39 f0       	breq	.+14     	; 0x5d2 <sensorMapping+0x48e>
     5c4:	80 91 9d 00 	lds	r24, 0x009D
     5c8:	90 91 9e 00 	lds	r25, 0x009E
     5cc:	8f 39       	cpi	r24, 0x9F	; 159
     5ce:	91 05       	cpc	r25, r1
     5d0:	39 f4       	brne	.+14     	; 0x5e0 <sensorMapping+0x49c>
     5d2:	8c ee       	ldi	r24, 0xEC	; 236
     5d4:	9f ef       	ldi	r25, 0xFF	; 255
     5d6:	90 93 9c 00 	sts	0x009C, r25
     5da:	80 93 9b 00 	sts	0x009B, r24
     5de:	08 95       	ret
	else if (sensorValue == 0b01000000 || /*sensorValue == 0b11100000 ||*/ sensorValue == 0b10111111) mappedValue = -30;
     5e0:	80 91 9d 00 	lds	r24, 0x009D
     5e4:	90 91 9e 00 	lds	r25, 0x009E
     5e8:	80 34       	cpi	r24, 0x40	; 64
     5ea:	91 05       	cpc	r25, r1
     5ec:	39 f0       	breq	.+14     	; 0x5fc <sensorMapping+0x4b8>
     5ee:	80 91 9d 00 	lds	r24, 0x009D
     5f2:	90 91 9e 00 	lds	r25, 0x009E
     5f6:	8f 3b       	cpi	r24, 0xBF	; 191
     5f8:	91 05       	cpc	r25, r1
     5fa:	39 f4       	brne	.+14     	; 0x60a <sensorMapping+0x4c6>
     5fc:	82 ee       	ldi	r24, 0xE2	; 226
     5fe:	9f ef       	ldi	r25, 0xFF	; 255
     600:	90 93 9c 00 	sts	0x009C, r25
     604:	80 93 9b 00 	sts	0x009B, r24
     608:	08 95       	ret
	else if (sensorValue == 0b11000000) mappedValue = -60;
     60a:	80 91 9d 00 	lds	r24, 0x009D
     60e:	90 91 9e 00 	lds	r25, 0x009E
     612:	80 3c       	cpi	r24, 0xC0	; 192
     614:	91 05       	cpc	r25, r1
     616:	39 f4       	brne	.+14     	; 0x626 <sensorMapping+0x4e2>
     618:	84 ec       	ldi	r24, 0xC4	; 196
     61a:	9f ef       	ldi	r25, 0xFF	; 255
     61c:	90 93 9c 00 	sts	0x009C, r25
     620:	80 93 9b 00 	sts	0x009B, r24
     624:	08 95       	ret
	else if (sensorValue == 0b10000000) mappedValue = -70;
     626:	80 91 9d 00 	lds	r24, 0x009D
     62a:	90 91 9e 00 	lds	r25, 0x009E
     62e:	80 38       	cpi	r24, 0x80	; 128
     630:	91 05       	cpc	r25, r1
     632:	39 f4       	brne	.+14     	; 0x642 <sensorMapping+0x4fe>
     634:	8a eb       	ldi	r24, 0xBA	; 186
     636:	9f ef       	ldi	r25, 0xFF	; 255
     638:	90 93 9c 00 	sts	0x009C, r25
     63c:	80 93 9b 00 	sts	0x009B, r24
     640:	08 95       	ret
	else if ((sensorValue == 0b11100000) || (sensorValue == 0b11110000) || (sensorValue == 0b11111000 || sensorValue == 0b11111100 || sensorValue == 0b11111110)) mappedValue = -100;
     642:	80 91 9d 00 	lds	r24, 0x009D
     646:	90 91 9e 00 	lds	r25, 0x009E
     64a:	80 3e       	cpi	r24, 0xE0	; 224
     64c:	91 05       	cpc	r25, r1
     64e:	e1 f0       	breq	.+56     	; 0x688 <sensorMapping+0x544>
     650:	80 91 9d 00 	lds	r24, 0x009D
     654:	90 91 9e 00 	lds	r25, 0x009E
     658:	80 3f       	cpi	r24, 0xF0	; 240
     65a:	91 05       	cpc	r25, r1
     65c:	a9 f0       	breq	.+42     	; 0x688 <sensorMapping+0x544>
     65e:	80 91 9d 00 	lds	r24, 0x009D
     662:	90 91 9e 00 	lds	r25, 0x009E
     666:	88 3f       	cpi	r24, 0xF8	; 248
     668:	91 05       	cpc	r25, r1
     66a:	71 f0       	breq	.+28     	; 0x688 <sensorMapping+0x544>
     66c:	80 91 9d 00 	lds	r24, 0x009D
     670:	90 91 9e 00 	lds	r25, 0x009E
     674:	8c 3f       	cpi	r24, 0xFC	; 252
     676:	91 05       	cpc	r25, r1
     678:	39 f0       	breq	.+14     	; 0x688 <sensorMapping+0x544>
     67a:	80 91 9d 00 	lds	r24, 0x009D
     67e:	90 91 9e 00 	lds	r25, 0x009E
     682:	8e 3f       	cpi	r24, 0xFE	; 254
     684:	91 05       	cpc	r25, r1
     686:	39 f4       	brne	.+14     	; 0x696 <sensorMapping+0x552>
     688:	8c e9       	ldi	r24, 0x9C	; 156
     68a:	9f ef       	ldi	r25, 0xFF	; 255
     68c:	90 93 9c 00 	sts	0x009C, r25
     690:	80 93 9b 00 	sts	0x009B, r24
     694:	08 95       	ret
	else if ((sensorValue == 0b11011000) || (sensorValue == 0b11010000) || (sensorValue == 0b11001000) || (sensorValue == 0b01010000) || (sensorValue == 0b01001000) || (sensorValue == 0b11101110) || (sensorValue == 0b11001110) || (sensorValue == 0b11101100) /*eita|| (sensorValue == 0b10111000)*/ || (sensorValue == 0b11100110) || (sensorValue == 0b10110000) || (sensorValue == 0b10011100) || (sensorValue == 0b11001100)) mappedValue = prev_mappedValue/*-120*/;
     696:	80 91 9d 00 	lds	r24, 0x009D
     69a:	90 91 9e 00 	lds	r25, 0x009E
     69e:	88 3d       	cpi	r24, 0xD8	; 216
     6a0:	91 05       	cpc	r25, r1
     6a2:	09 f4       	brne	.+2      	; 0x6a6 <sensorMapping+0x562>
     6a4:	4f c0       	rjmp	.+158    	; 0x744 <sensorMapping+0x600>
     6a6:	80 91 9d 00 	lds	r24, 0x009D
     6aa:	90 91 9e 00 	lds	r25, 0x009E
     6ae:	80 3d       	cpi	r24, 0xD0	; 208
     6b0:	91 05       	cpc	r25, r1
     6b2:	09 f4       	brne	.+2      	; 0x6b6 <sensorMapping+0x572>
     6b4:	47 c0       	rjmp	.+142    	; 0x744 <sensorMapping+0x600>
     6b6:	80 91 9d 00 	lds	r24, 0x009D
     6ba:	90 91 9e 00 	lds	r25, 0x009E
     6be:	88 3c       	cpi	r24, 0xC8	; 200
     6c0:	91 05       	cpc	r25, r1
     6c2:	09 f4       	brne	.+2      	; 0x6c6 <sensorMapping+0x582>
     6c4:	3f c0       	rjmp	.+126    	; 0x744 <sensorMapping+0x600>
     6c6:	80 91 9d 00 	lds	r24, 0x009D
     6ca:	90 91 9e 00 	lds	r25, 0x009E
     6ce:	80 35       	cpi	r24, 0x50	; 80
     6d0:	91 05       	cpc	r25, r1
     6d2:	c1 f1       	breq	.+112    	; 0x744 <sensorMapping+0x600>
     6d4:	80 91 9d 00 	lds	r24, 0x009D
     6d8:	90 91 9e 00 	lds	r25, 0x009E
     6dc:	88 34       	cpi	r24, 0x48	; 72
     6de:	91 05       	cpc	r25, r1
     6e0:	89 f1       	breq	.+98     	; 0x744 <sensorMapping+0x600>
     6e2:	80 91 9d 00 	lds	r24, 0x009D
     6e6:	90 91 9e 00 	lds	r25, 0x009E
     6ea:	8e 3e       	cpi	r24, 0xEE	; 238
     6ec:	91 05       	cpc	r25, r1
     6ee:	51 f1       	breq	.+84     	; 0x744 <sensorMapping+0x600>
     6f0:	80 91 9d 00 	lds	r24, 0x009D
     6f4:	90 91 9e 00 	lds	r25, 0x009E
     6f8:	8e 3c       	cpi	r24, 0xCE	; 206
     6fa:	91 05       	cpc	r25, r1
     6fc:	19 f1       	breq	.+70     	; 0x744 <sensorMapping+0x600>
     6fe:	80 91 9d 00 	lds	r24, 0x009D
     702:	90 91 9e 00 	lds	r25, 0x009E
     706:	8c 3e       	cpi	r24, 0xEC	; 236
     708:	91 05       	cpc	r25, r1
     70a:	e1 f0       	breq	.+56     	; 0x744 <sensorMapping+0x600>
     70c:	80 91 9d 00 	lds	r24, 0x009D
     710:	90 91 9e 00 	lds	r25, 0x009E
     714:	86 3e       	cpi	r24, 0xE6	; 230
     716:	91 05       	cpc	r25, r1
     718:	a9 f0       	breq	.+42     	; 0x744 <sensorMapping+0x600>
     71a:	80 91 9d 00 	lds	r24, 0x009D
     71e:	90 91 9e 00 	lds	r25, 0x009E
     722:	80 3b       	cpi	r24, 0xB0	; 176
     724:	91 05       	cpc	r25, r1
     726:	71 f0       	breq	.+28     	; 0x744 <sensorMapping+0x600>
     728:	80 91 9d 00 	lds	r24, 0x009D
     72c:	90 91 9e 00 	lds	r25, 0x009E
     730:	8c 39       	cpi	r24, 0x9C	; 156
     732:	91 05       	cpc	r25, r1
     734:	39 f0       	breq	.+14     	; 0x744 <sensorMapping+0x600>
     736:	80 91 9d 00 	lds	r24, 0x009D
     73a:	90 91 9e 00 	lds	r25, 0x009E
     73e:	8c 3c       	cpi	r24, 0xCC	; 204
     740:	91 05       	cpc	r25, r1
     742:	49 f4       	brne	.+18     	; 0x756 <sensorMapping+0x612>
     744:	80 91 99 00 	lds	r24, 0x0099
     748:	90 91 9a 00 	lds	r25, 0x009A
     74c:	90 93 9c 00 	sts	0x009C, r25
     750:	80 93 9b 00 	sts	0x009B, r24
     754:	08 95       	ret
	else if ((sensorValue == 0b10011000) || (sensorValue == 0b10010000) || (sensorValue == 0b10001000) || (sensorValue == 0b10001100) || (sensorValue == 0b10001110) || (sensorValue == 0b10000110) || (sensorValue == 0b11000110)) mappedValue = prev_mappedValue/*-120*/;
     756:	80 91 9d 00 	lds	r24, 0x009D
     75a:	90 91 9e 00 	lds	r25, 0x009E
     75e:	88 39       	cpi	r24, 0x98	; 152
     760:	91 05       	cpc	r25, r1
     762:	51 f1       	breq	.+84     	; 0x7b8 <sensorMapping+0x674>
     764:	80 91 9d 00 	lds	r24, 0x009D
     768:	90 91 9e 00 	lds	r25, 0x009E
     76c:	80 39       	cpi	r24, 0x90	; 144
     76e:	91 05       	cpc	r25, r1
     770:	19 f1       	breq	.+70     	; 0x7b8 <sensorMapping+0x674>
     772:	80 91 9d 00 	lds	r24, 0x009D
     776:	90 91 9e 00 	lds	r25, 0x009E
     77a:	88 38       	cpi	r24, 0x88	; 136
     77c:	91 05       	cpc	r25, r1
     77e:	e1 f0       	breq	.+56     	; 0x7b8 <sensorMapping+0x674>
     780:	80 91 9d 00 	lds	r24, 0x009D
     784:	90 91 9e 00 	lds	r25, 0x009E
     788:	8c 38       	cpi	r24, 0x8C	; 140
     78a:	91 05       	cpc	r25, r1
     78c:	a9 f0       	breq	.+42     	; 0x7b8 <sensorMapping+0x674>
     78e:	80 91 9d 00 	lds	r24, 0x009D
     792:	90 91 9e 00 	lds	r25, 0x009E
     796:	8e 38       	cpi	r24, 0x8E	; 142
     798:	91 05       	cpc	r25, r1
     79a:	71 f0       	breq	.+28     	; 0x7b8 <sensorMapping+0x674>
     79c:	80 91 9d 00 	lds	r24, 0x009D
     7a0:	90 91 9e 00 	lds	r25, 0x009E
     7a4:	86 38       	cpi	r24, 0x86	; 134
     7a6:	91 05       	cpc	r25, r1
     7a8:	39 f0       	breq	.+14     	; 0x7b8 <sensorMapping+0x674>
     7aa:	80 91 9d 00 	lds	r24, 0x009D
     7ae:	90 91 9e 00 	lds	r25, 0x009E
     7b2:	86 3c       	cpi	r24, 0xC6	; 198
     7b4:	91 05       	cpc	r25, r1
     7b6:	41 f4       	brne	.+16     	; 0x7c8 <sensorMapping+0x684>
     7b8:	80 91 99 00 	lds	r24, 0x0099
     7bc:	90 91 9a 00 	lds	r25, 0x009A
     7c0:	90 93 9c 00 	sts	0x009C, r25
     7c4:	80 93 9b 00 	sts	0x009B, r24
     7c8:	08 95       	ret

000007ca <setRotationForward>:
	motor2b_PORT &= ~(1 << motor2b_PIN);
}

void setRotationForward(void)
{
	enable1(0);
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	0e 94 fb 07 	call	0xff6	; 0xff6 <PWM0>
	enable2(0);
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0e 94 fd 07 	call	0xffa	; 0xffa <PWM2>
	
	motor1a_PORT |= (1 << motor1a_PIN);
     7da:	af 9a       	sbi	0x15, 7	; 21
	motor1b_PORT &= ~(1 << motor1b_PIN);
     7dc:	ae 98       	cbi	0x15, 6	; 21
	motor2a_PORT |= (1 << motor2a_PIN);
     7de:	ad 9a       	sbi	0x15, 5	; 21
	motor2b_PORT &= ~(1 << motor2b_PIN);
     7e0:	ac 98       	cbi	0x15, 4	; 21
     7e2:	08 95       	ret

000007e4 <setRotationLeftSharp>:
}

void setRotationLeftSharp(void)
{
	enable1(0);
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	0e 94 fb 07 	call	0xff6	; 0xff6 <PWM0>
	enable2(0);
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	0e 94 fd 07 	call	0xffa	; 0xffa <PWM2>
	
	motor1a_PORT &= ~(1 << motor1a_PIN);
     7f4:	af 98       	cbi	0x15, 7	; 21
	motor1b_PORT |= (1 << motor1b_PIN);
     7f6:	ae 9a       	sbi	0x15, 6	; 21
	motor2a_PORT |= (1 << motor2a_PIN);
     7f8:	ad 9a       	sbi	0x15, 5	; 21
	motor2b_PORT &= ~(1 << motor2b_PIN);
     7fa:	ac 98       	cbi	0x15, 4	; 21
     7fc:	08 95       	ret

000007fe <setRotationRightSharp>:
}

void setRotationRightSharp(void)
{
	enable1(0);
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 fb 07 	call	0xff6	; 0xff6 <PWM0>
	enable2(0);
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	0e 94 fd 07 	call	0xffa	; 0xffa <PWM2>
	
	motor1a_PORT |= (1 << motor1a_PIN);
     80e:	af 9a       	sbi	0x15, 7	; 21
	motor1b_PORT &= ~(1 << motor1b_PIN);
     810:	ae 98       	cbi	0x15, 6	; 21
	motor2a_PORT &= ~(1 << motor2a_PIN);
     812:	ad 98       	cbi	0x15, 5	; 21
	motor2b_PORT |= (1 << motor2b_PIN);
     814:	ac 9a       	sbi	0x15, 4	; 21
     816:	08 95       	ret

00000818 <PID_Correction>:
// 	Serial_sendString("\n");
}


void PID_Correction(void) //my algo
{
     818:	8f 92       	push	r8
     81a:	9f 92       	push	r9
     81c:	af 92       	push	r10
     81e:	bf 92       	push	r11
     820:	cf 92       	push	r12
     822:	df 92       	push	r13
     824:	ef 92       	push	r14
     826:	ff 92       	push	r15
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
	error = targetValue - mappedValue;
     830:	c0 91 9b 00 	lds	r28, 0x009B
     834:	d0 91 9c 00 	lds	r29, 0x009C
     838:	c1 95       	neg	r28
     83a:	c0 93 88 00 	sts	0x0088, r28
	sum_error = (sum_error + error) / 2;
     83e:	0c 2f       	mov	r16, r28
     840:	0c 2e       	mov	r0, r28
     842:	00 0c       	add	r0, r0
     844:	11 0b       	sbc	r17, r17
     846:	60 91 85 00 	lds	r22, 0x0085
     84a:	70 91 86 00 	lds	r23, 0x0086
     84e:	60 0f       	add	r22, r16
     850:	71 1f       	adc	r23, r17
     852:	77 23       	and	r23, r23
     854:	14 f4       	brge	.+4      	; 0x85a <PID_Correction+0x42>
     856:	6f 5f       	subi	r22, 0xFF	; 255
     858:	7f 4f       	sbci	r23, 0xFF	; 255
     85a:	7b 01       	movw	r14, r22
     85c:	f5 94       	asr	r15
     85e:	e7 94       	ror	r14
     860:	f0 92 86 00 	sts	0x0086, r15
     864:	e0 92 85 00 	sts	0x0085, r14
	
	correction = ((Kp * error) + (Ki * sum_error) + (Kd * (error - prev_error)));
     868:	6c 2f       	mov	r22, r28
     86a:	0c 2e       	mov	r0, r28
     86c:	00 0c       	add	r0, r0
     86e:	77 0b       	sbc	r23, r23
     870:	88 0b       	sbc	r24, r24
     872:	99 0b       	sbc	r25, r25
     874:	0e 94 b7 08 	call	0x116e	; 0x116e <__floatsisf>
     878:	20 91 64 00 	lds	r18, 0x0064
     87c:	30 91 65 00 	lds	r19, 0x0065
     880:	40 91 66 00 	lds	r20, 0x0066
     884:	50 91 67 00 	lds	r21, 0x0067
     888:	0e 94 67 09 	call	0x12ce	; 0x12ce <__mulsf3>
     88c:	4b 01       	movw	r8, r22
     88e:	5c 01       	movw	r10, r24
     890:	b7 01       	movw	r22, r14
     892:	ff 0c       	add	r15, r15
     894:	88 0b       	sbc	r24, r24
     896:	99 0b       	sbc	r25, r25
     898:	0e 94 b7 08 	call	0x116e	; 0x116e <__floatsisf>
     89c:	20 91 78 00 	lds	r18, 0x0078
     8a0:	30 91 79 00 	lds	r19, 0x0079
     8a4:	40 91 7a 00 	lds	r20, 0x007A
     8a8:	50 91 7b 00 	lds	r21, 0x007B
     8ac:	0e 94 67 09 	call	0x12ce	; 0x12ce <__mulsf3>
     8b0:	9b 01       	movw	r18, r22
     8b2:	ac 01       	movw	r20, r24
     8b4:	c5 01       	movw	r24, r10
     8b6:	b4 01       	movw	r22, r8
     8b8:	0e 94 0e 08 	call	0x101c	; 0x101c <__addsf3>
     8bc:	6b 01       	movw	r12, r22
     8be:	7c 01       	movw	r14, r24
     8c0:	80 91 87 00 	lds	r24, 0x0087
     8c4:	98 01       	movw	r18, r16
     8c6:	28 1b       	sub	r18, r24
     8c8:	31 09       	sbc	r19, r1
     8ca:	87 fd       	sbrc	r24, 7
     8cc:	33 95       	inc	r19
     8ce:	b9 01       	movw	r22, r18
     8d0:	33 0f       	add	r19, r19
     8d2:	88 0b       	sbc	r24, r24
     8d4:	99 0b       	sbc	r25, r25
     8d6:	0e 94 b7 08 	call	0x116e	; 0x116e <__floatsisf>
     8da:	20 91 60 00 	lds	r18, 0x0060
     8de:	30 91 61 00 	lds	r19, 0x0061
     8e2:	40 91 62 00 	lds	r20, 0x0062
     8e6:	50 91 63 00 	lds	r21, 0x0063
     8ea:	0e 94 67 09 	call	0x12ce	; 0x12ce <__mulsf3>
     8ee:	9b 01       	movw	r18, r22
     8f0:	ac 01       	movw	r20, r24
     8f2:	c7 01       	movw	r24, r14
     8f4:	b6 01       	movw	r22, r12
     8f6:	0e 94 0e 08 	call	0x101c	; 0x101c <__addsf3>
     8fa:	60 93 81 00 	sts	0x0081, r22
     8fe:	70 93 82 00 	sts	0x0082, r23
     902:	80 93 83 00 	sts	0x0083, r24
     906:	90 93 84 00 	sts	0x0084, r25

	prev_error = error;
     90a:	c0 93 87 00 	sts	0x0087, r28
	motorResponse = (int)correction;
     90e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__fixsfsi>
     912:	70 93 80 00 	sts	0x0080, r23
     916:	60 93 7f 00 	sts	0x007F, r22
	
	if(motorResponse > maxSpeed)
     91a:	6d 3d       	cpi	r22, 0xDD	; 221
     91c:	71 05       	cpc	r23, r1
     91e:	cc f0       	brlt	.+50     	; 0x952 <__stack+0xf3>
	{
		reverseSpeed = motorResponse - maxSpeed;
     920:	6c 5d       	subi	r22, 0xDC	; 220
		if (reverseSpeed > maxSpeed) reverseSpeed = maxSpeed;
     922:	6d 3d       	cpi	r22, 0xDD	; 221
     924:	18 f4       	brcc	.+6      	; 0x92c <__stack+0xcd>
	prev_error = error;
	motorResponse = (int)correction;
	
	if(motorResponse > maxSpeed)
	{
		reverseSpeed = motorResponse - maxSpeed;
     926:	60 93 7c 00 	sts	0x007C, r22
     92a:	03 c0       	rjmp	.+6      	; 0x932 <__stack+0xd3>
		if (reverseSpeed > maxSpeed) reverseSpeed = maxSpeed;
     92c:	8c ed       	ldi	r24, 0xDC	; 220
     92e:	80 93 7c 00 	sts	0x007C, r24
		motorResponse = maxSpeed;
     932:	8c ed       	ldi	r24, 0xDC	; 220
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	90 93 80 00 	sts	0x0080, r25
     93a:	80 93 7f 00 	sts	0x007F, r24
		
		setRotationLeftSharp();
     93e:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <setRotationLeftSharp>
		
		LMspeed = reverseSpeed;
     942:	80 91 7c 00 	lds	r24, 0x007C
     946:	80 93 7e 00 	sts	0x007E, r24
		RMspeed = maxSpeed;
     94a:	8c ed       	ldi	r24, 0xDC	; 220
     94c:	80 93 7d 00 	sts	0x007D, r24
     950:	40 c0       	rjmp	.+128    	; 0x9d2 <__stack+0x173>
	}
	
	else if(motorResponse < -maxSpeed)
     952:	64 32       	cpi	r22, 0x24	; 36
     954:	4f ef       	ldi	r20, 0xFF	; 255
     956:	74 07       	cpc	r23, r20
     958:	dc f4       	brge	.+54     	; 0x990 <__stack+0x131>
	{
		reverseSpeed = -motorResponse - maxSpeed;
     95a:	24 e2       	ldi	r18, 0x24	; 36
     95c:	82 2f       	mov	r24, r18
     95e:	86 1b       	sub	r24, r22
		if (reverseSpeed > maxSpeed) reverseSpeed = maxSpeed;
     960:	8d 3d       	cpi	r24, 0xDD	; 221
     962:	18 f4       	brcc	.+6      	; 0x96a <__stack+0x10b>
		RMspeed = maxSpeed;
	}
	
	else if(motorResponse < -maxSpeed)
	{
		reverseSpeed = -motorResponse - maxSpeed;
     964:	80 93 7c 00 	sts	0x007C, r24
     968:	03 c0       	rjmp	.+6      	; 0x970 <__stack+0x111>
		if (reverseSpeed > maxSpeed) reverseSpeed = maxSpeed;
     96a:	8c ed       	ldi	r24, 0xDC	; 220
     96c:	80 93 7c 00 	sts	0x007C, r24
		motorResponse = -maxSpeed;
     970:	84 e2       	ldi	r24, 0x24	; 36
     972:	9f ef       	ldi	r25, 0xFF	; 255
     974:	90 93 80 00 	sts	0x0080, r25
     978:	80 93 7f 00 	sts	0x007F, r24
		
		setRotationRightSharp();
     97c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <setRotationRightSharp>
		
		LMspeed = maxSpeed;
     980:	8c ed       	ldi	r24, 0xDC	; 220
     982:	80 93 7e 00 	sts	0x007E, r24
		RMspeed = reverseSpeed;
     986:	80 91 7c 00 	lds	r24, 0x007C
     98a:	80 93 7d 00 	sts	0x007D, r24
     98e:	21 c0       	rjmp	.+66     	; 0x9d2 <__stack+0x173>
	}
	
	else if(motorResponse < 0 && motorResponse > -maxSpeed)
     990:	9b 01       	movw	r18, r22
     992:	25 52       	subi	r18, 0x25	; 37
     994:	3f 4f       	sbci	r19, 0xFF	; 255
     996:	2b 3d       	cpi	r18, 0xDB	; 219
     998:	31 05       	cpc	r19, r1
     99a:	58 f4       	brcc	.+22     	; 0x9b2 <__stack+0x153>
	{
		setRotationForward();
     99c:	0e 94 e5 03 	call	0x7ca	; 0x7ca <setRotationForward>
		
		LMspeed = maxSpeed;
     9a0:	8c ed       	ldi	r24, 0xDC	; 220
     9a2:	80 93 7e 00 	sts	0x007E, r24
		RMspeed = maxSpeed + motorResponse;
     9a6:	80 91 7f 00 	lds	r24, 0x007F
     9aa:	84 52       	subi	r24, 0x24	; 36
     9ac:	80 93 7d 00 	sts	0x007D, r24
     9b0:	10 c0       	rjmp	.+32     	; 0x9d2 <__stack+0x173>
	}
	else if(motorResponse > 0 && motorResponse < maxSpeed)
     9b2:	61 50       	subi	r22, 0x01	; 1
     9b4:	71 09       	sbc	r23, r1
     9b6:	6b 3d       	cpi	r22, 0xDB	; 219
     9b8:	71 05       	cpc	r23, r1
     9ba:	58 f4       	brcc	.+22     	; 0x9d2 <__stack+0x173>
	{
		setRotationForward();
     9bc:	0e 94 e5 03 	call	0x7ca	; 0x7ca <setRotationForward>
		
		LMspeed = maxSpeed - motorResponse;
     9c0:	8c ed       	ldi	r24, 0xDC	; 220
     9c2:	90 91 7f 00 	lds	r25, 0x007F
     9c6:	28 2f       	mov	r18, r24
     9c8:	29 1b       	sub	r18, r25
     9ca:	20 93 7e 00 	sts	0x007E, r18
		RMspeed = maxSpeed;
     9ce:	80 93 7d 00 	sts	0x007D, r24
	}
}
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	1f 91       	pop	r17
     9d8:	0f 91       	pop	r16
     9da:	ff 90       	pop	r15
     9dc:	ef 90       	pop	r14
     9de:	df 90       	pop	r13
     9e0:	cf 90       	pop	r12
     9e2:	bf 90       	pop	r11
     9e4:	af 90       	pop	r10
     9e6:	9f 90       	pop	r9
     9e8:	8f 90       	pop	r8
     9ea:	08 95       	ret

000009ec <Forward>:
	motor2b_PORT |= (1 << motor2b_PIN);
}

void Forward(void)
{
	enable1(0);
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	0e 94 fb 07 	call	0xff6	; 0xff6 <PWM0>
	enable2(0);
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 fd 07 	call	0xffa	; 0xffa <PWM2>
	
	motor1a_PORT |= (1 << motor1a_PIN);
     9fc:	af 9a       	sbi	0x15, 7	; 21
	motor1b_PORT &= ~(1 << motor1b_PIN);
     9fe:	ae 98       	cbi	0x15, 6	; 21
	motor2a_PORT |= (1 << motor2a_PIN);
     a00:	ad 9a       	sbi	0x15, 5	; 21
	motor2b_PORT &= ~(1 << motor2b_PIN);
     a02:	ac 98       	cbi	0x15, 4	; 21

	enable1(maxSpeed);
     a04:	8c ed       	ldi	r24, 0xDC	; 220
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	0e 94 fb 07 	call	0xff6	; 0xff6 <PWM0>
	enable2(maxSpeed);
     a0c:	8c ed       	ldi	r24, 0xDC	; 220
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	0e 94 fd 07 	call	0xffa	; 0xffa <PWM2>
     a14:	08 95       	ret

00000a16 <Backward>:
}

void Backward(void)
{
	enable1(0);
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 fb 07 	call	0xff6	; 0xff6 <PWM0>
	enable2(0);
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	0e 94 fd 07 	call	0xffa	; 0xffa <PWM2>
	
	motor1a_PORT &= ~(1 << motor1a_PIN);
     a26:	af 98       	cbi	0x15, 7	; 21
	motor1b_PORT |= (1 << motor1b_PIN);
     a28:	ae 9a       	sbi	0x15, 6	; 21
	motor2a_PORT &= ~(1 << motor2a_PIN);
     a2a:	ad 98       	cbi	0x15, 5	; 21
	motor2b_PORT |= (1 << motor2b_PIN);
     a2c:	ac 9a       	sbi	0x15, 4	; 21

	enable1(maxSpeed);
     a2e:	8c ed       	ldi	r24, 0xDC	; 220
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	0e 94 fb 07 	call	0xff6	; 0xff6 <PWM0>
	enable2(maxSpeed);
     a36:	8c ed       	ldi	r24, 0xDC	; 220
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	0e 94 fd 07 	call	0xffa	; 0xffa <PWM2>
     a3e:	08 95       	ret

00000a40 <Stop>:
	}
}

void Stop(void)
{
	Backward();
     a40:	0e 94 0b 05 	call	0xa16	; 0xa16 <Backward>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a44:	8f e8       	ldi	r24, 0x8F	; 143
     a46:	91 e0       	ldi	r25, 0x01	; 1
     a48:	01 97       	sbiw	r24, 0x01	; 1
     a4a:	f1 f7       	brne	.-4      	; 0xa48 <Stop+0x8>
     a4c:	00 c0       	rjmp	.+0      	; 0xa4e <Stop+0xe>
     a4e:	00 00       	nop
	_delay_us(100);
	enable1(0);
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	0e 94 fb 07 	call	0xff6	; 0xff6 <PWM0>
	enable2(0);
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	0e 94 fd 07 	call	0xffa	; 0xffa <PWM2>
	
	motor1a_PORT &= ~(1 << motor1a_PIN);
     a60:	af 98       	cbi	0x15, 7	; 21
	motor1b_PORT &= ~(1 << motor1b_PIN);
     a62:	ae 98       	cbi	0x15, 6	; 21
	motor2a_PORT &= ~(1 << motor2a_PIN);
     a64:	ad 98       	cbi	0x15, 5	; 21
	motor2b_PORT &= ~(1 << motor2b_PIN);
     a66:	ac 98       	cbi	0x15, 4	; 21
     a68:	08 95       	ret

00000a6a <RightSharp>:
	enable2(maxSpeed);
}

void RightSharp(void)
{
	enable1(0);
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 fb 07 	call	0xff6	; 0xff6 <PWM0>
	enable2(0);
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	0e 94 fd 07 	call	0xffa	; 0xffa <PWM2>
	
	motor1a_PORT |= (1 << motor1a_PIN);
     a7a:	af 9a       	sbi	0x15, 7	; 21
	motor1b_PORT &= ~(1 << motor1b_PIN);
     a7c:	ae 98       	cbi	0x15, 6	; 21
	motor2a_PORT &= ~(1 << motor2a_PIN);
     a7e:	ad 98       	cbi	0x15, 5	; 21
	motor2b_PORT |= (1 << motor2b_PIN);
     a80:	ac 9a       	sbi	0x15, 4	; 21

	enable1(maxSpeed - 20);
     a82:	88 ec       	ldi	r24, 0xC8	; 200
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	0e 94 fb 07 	call	0xff6	; 0xff6 <PWM0>
	enable2(maxSpeed - 20);
     a8a:	88 ec       	ldi	r24, 0xC8	; 200
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	0e 94 fd 07 	call	0xffa	; 0xffa <PWM2>
     a92:	08 95       	ret

00000a94 <LeftSharp>:
}

void LeftSharp(void)
{
	enable1(0);
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	0e 94 fb 07 	call	0xff6	; 0xff6 <PWM0>
	enable2(0);
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	0e 94 fd 07 	call	0xffa	; 0xffa <PWM2>
	
	motor1a_PORT &= ~(1 << motor1a_PIN);
     aa4:	af 98       	cbi	0x15, 7	; 21
	motor1b_PORT |= (1 << motor1b_PIN);
     aa6:	ae 9a       	sbi	0x15, 6	; 21
	motor2a_PORT |= (1 << motor2a_PIN);
     aa8:	ad 9a       	sbi	0x15, 5	; 21
	motor2b_PORT &= ~(1 << motor2b_PIN);
     aaa:	ac 98       	cbi	0x15, 4	; 21

	enable1(maxSpeed - 20);
     aac:	88 ec       	ldi	r24, 0xC8	; 200
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	0e 94 fb 07 	call	0xff6	; 0xff6 <PWM0>
	enable2(maxSpeed - 20);
     ab4:	88 ec       	ldi	r24, 0xC8	; 200
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	0e 94 fd 07 	call	0xffa	; 0xffa <PWM2>
     abc:	08 95       	ret

00000abe <main>:

int main(void)
{
	// Input-Output settings
	
	trig1_DDR |= (1 << trig1_PIN);
     abe:	8c 9a       	sbi	0x11, 4	; 17
	trig2_DDR |= (1 << trig2_PIN);
     ac0:	8d 9a       	sbi	0x11, 5	; 17
	trig3_DDR |= (1 << trig3_PIN);
     ac2:	b9 9a       	sbi	0x17, 1	; 23
	echo1_DDR &= ~(1 << echo1_PIN);
     ac4:	8b 98       	cbi	0x11, 3	; 17
	echo2_DDR &= ~(1 << echo2_PIN);
     ac6:	8a 98       	cbi	0x11, 2	; 17
	echo3_DDR &= ~(1 << echo3_PIN);
     ac8:	ba 98       	cbi	0x17, 2	; 23
	motor1a_DDR |= (1 << motor1a_PIN);
     aca:	a7 9a       	sbi	0x14, 7	; 20
	motor1b_DDR |= (1 << motor1b_PIN);
     acc:	a6 9a       	sbi	0x14, 6	; 20
	motor2a_DDR |= (1 << motor2a_PIN);
     ace:	a5 9a       	sbi	0x14, 5	; 20
	motor2b_DDR |= (1 << motor2b_PIN);
     ad0:	a4 9a       	sbi	0x14, 4	; 20
	enable1_DDR |= (1 << enable1_PIN);
     ad2:	8f 9a       	sbi	0x11, 7	; 17
	enable2_DDR |= (1 << enable2_PIN);
     ad4:	bb 9a       	sbi	0x17, 3	; 23
	
//	uint8_t finishLevelCount = 0;
	
	// Initializations	
	
	adc_init();
     ad6:	0e 94 49 00 	call	0x92	; 0x92 <adc_init>
	UART_init();
     ada:	0e 94 ff 07 	call	0xffe	; 0xffe <UART_init>
	PWM0_init();
     ade:	0e 94 e7 07 	call	0xfce	; 0xfce <PWM0_init>
	PWM2_init();
     ae2:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <PWM2_init>
	setRotationForward();	
     ae6:	0e 94 e5 03 	call	0x7ca	; 0x7ca <setRotationForward>
	Forward();
     aea:	0e 94 f6 04 	call	0x9ec	; 0x9ec <Forward>
	enable1(maxSpeed);
     aee:	8c ed       	ldi	r24, 0xDC	; 220
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	0e 94 fb 07 	call	0xff6	; 0xff6 <PWM0>
	enable2(maxSpeed);
     af6:	8c ed       	ldi	r24, 0xDC	; 220
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	0e 94 fd 07 	call	0xffa	; 0xffa <PWM2>
     afe:	68 94       	set
     b00:	ee 24       	eor	r14, r14
     b02:	e2 f8       	bld	r14, 2
     b04:	f1 2c       	mov	r15, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b06:	06 e0       	ldi	r16, 0x06	; 6
     b08:	10 e0       	ldi	r17, 0x00	; 0
// 	_delay_ms(5000);
// 	
    while (1) 
    {
		
			sensorValueConversion();
     b0a:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
			sensorMapping();
     b0e:	0e 94 a2 00 	call	0x144	; 0x144 <sensorMapping>
		if (mappedValue == 100 || mappedValue == -100)
     b12:	80 91 9b 00 	lds	r24, 0x009B
     b16:	90 91 9c 00 	lds	r25, 0x009C
     b1a:	84 36       	cpi	r24, 0x64	; 100
     b1c:	91 05       	cpc	r25, r1
     b1e:	51 f0       	breq	.+20     	; 0xb34 <main+0x76>
     b20:	80 91 9b 00 	lds	r24, 0x009B
     b24:	90 91 9c 00 	lds	r25, 0x009C
     b28:	8c 39       	cpi	r24, 0x9C	; 156
     b2a:	9f 4f       	sbci	r25, 0xFF	; 255
     b2c:	c9 f4       	brne	.+50     	; 0xb60 <main+0xa2>
     b2e:	ce 2d       	mov	r28, r14
     b30:	df 2d       	mov	r29, r15
     b32:	02 c0       	rjmp	.+4      	; 0xb38 <main+0x7a>
     b34:	ce 2d       	mov	r28, r14
     b36:	df 2d       	mov	r29, r15
		{
			for (int temp_loop = 0; temp_loop < 4; temp_loop++)
			{
				sensorValueConversion();
     b38:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
				sensorMapping();
     b3c:	0e 94 a2 00 	call	0x144	; 0x144 <sensorMapping>
				if (mappedValue != 100 && mappedValue != -100)
     b40:	80 91 9b 00 	lds	r24, 0x009B
     b44:	90 91 9c 00 	lds	r25, 0x009C
     b48:	84 36       	cpi	r24, 0x64	; 100
     b4a:	91 05       	cpc	r25, r1
     b4c:	39 f0       	breq	.+14     	; 0xb5c <main+0x9e>
     b4e:	80 91 9b 00 	lds	r24, 0x009B
     b52:	90 91 9c 00 	lds	r25, 0x009C
     b56:	8c 39       	cpi	r24, 0x9C	; 156
     b58:	9f 4f       	sbci	r25, 0xFF	; 255
     b5a:	11 f4       	brne	.+4      	; 0xb60 <main+0xa2>
     b5c:	21 97       	sbiw	r28, 0x01	; 1
		
			sensorValueConversion();
			sensorMapping();
		if (mappedValue == 100 || mappedValue == -100)
		{
			for (int temp_loop = 0; temp_loop < 4; temp_loop++)
     b5e:	61 f7       	brne	.-40     	; 0xb38 <main+0x7a>
// 			enable2(RMspeed);
// 			if (sensorValue == 0b11111111) _delay_ms(100);
// 
// 		}
// 		
		if (mappedValue == .5)
     b60:	60 91 9b 00 	lds	r22, 0x009B
     b64:	70 91 9c 00 	lds	r23, 0x009C
     b68:	07 2e       	mov	r0, r23
     b6a:	00 0c       	add	r0, r0
     b6c:	88 0b       	sbc	r24, r24
     b6e:	99 0b       	sbc	r25, r25
     b70:	0e 94 b7 08 	call	0x116e	; 0x116e <__floatsisf>
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	40 e0       	ldi	r20, 0x00	; 0
     b7a:	5f e3       	ldi	r21, 0x3F	; 63
     b7c:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <__cmpsf2>
     b80:	81 11       	cpse	r24, r1
     b82:	02 c0       	rjmp	.+4      	; 0xb88 <main+0xca>
		{
			Forward();
     b84:	0e 94 f6 04 	call	0x9ec	; 0x9ec <Forward>
// 			_delay_ms(5000);
		}

		if (sensorValue == 0b00110111 || sensorValue == 0b11101100)
     b88:	80 91 9d 00 	lds	r24, 0x009D
     b8c:	90 91 9e 00 	lds	r25, 0x009E
     b90:	c7 97       	sbiw	r24, 0x37	; 55
     b92:	39 f0       	breq	.+14     	; 0xba2 <main+0xe4>
     b94:	80 91 9d 00 	lds	r24, 0x009D
     b98:	90 91 9e 00 	lds	r25, 0x009E
     b9c:	8c 3e       	cpi	r24, 0xEC	; 236
     b9e:	91 05       	cpc	r25, r1
     ba0:	31 f4       	brne	.+12     	; 0xbae <main+0xf0>
		{
			Forward();
     ba2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <Forward>
			sensorValueConversion();
     ba6:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
			sensorMapping();
     baa:	0e 94 a2 00 	call	0x144	; 0x144 <sensorMapping>
		}

		if (mappedValue == 112)
     bae:	80 91 9b 00 	lds	r24, 0x009B
     bb2:	90 91 9c 00 	lds	r25, 0x009C
     bb6:	80 37       	cpi	r24, 0x70	; 112
     bb8:	91 05       	cpc	r25, r1
     bba:	59 f4       	brne	.+22     	; 0xbd2 <main+0x114>
		{
			Forward();
     bbc:	0e 94 f6 04 	call	0x9ec	; 0x9ec <Forward>
     bc0:	8f ef       	ldi	r24, 0xFF	; 255
     bc2:	91 ee       	ldi	r25, 0xE1	; 225
     bc4:	24 e0       	ldi	r18, 0x04	; 4
     bc6:	81 50       	subi	r24, 0x01	; 1
     bc8:	90 40       	sbci	r25, 0x00	; 0
     bca:	20 40       	sbci	r18, 0x00	; 0
     bcc:	e1 f7       	brne	.-8      	; 0xbc6 <main+0x108>
     bce:	00 c0       	rjmp	.+0      	; 0xbd0 <main+0x112>
     bd0:	00 00       	nop
			_delay_ms(100);
		}
		
		if (mappedValue == 120/* || mappedValue == 110*/)
     bd2:	80 91 9b 00 	lds	r24, 0x009B
     bd6:	90 91 9c 00 	lds	r25, 0x009C
     bda:	88 37       	cpi	r24, 0x78	; 120
     bdc:	91 05       	cpc	r25, r1
     bde:	09 f0       	breq	.+2      	; 0xbe2 <main+0x124>
     be0:	41 c0       	rjmp	.+130    	; 0xc64 <main+0x1a6>
		{
			Stop();
     be2:	0e 94 20 05 	call	0xa40	; 0xa40 <Stop>
     be6:	8f ef       	ldi	r24, 0xFF	; 255
     be8:	90 e7       	ldi	r25, 0x70	; 112
     bea:	22 e0       	ldi	r18, 0x02	; 2
     bec:	81 50       	subi	r24, 0x01	; 1
     bee:	90 40       	sbci	r25, 0x00	; 0
     bf0:	20 40       	sbci	r18, 0x00	; 0
     bf2:	e1 f7       	brne	.-8      	; 0xbec <main+0x12e>
     bf4:	00 c0       	rjmp	.+0      	; 0xbf6 <main+0x138>
     bf6:	00 00       	nop
     bf8:	c0 2f       	mov	r28, r16
     bfa:	d1 2f       	mov	r29, r17
			_delay_ms(50);
			for (int temp = 0; temp < 6; temp++)
			{
				sensorValueConversion();
     bfc:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
				sensorMapping();
     c00:	0e 94 a2 00 	call	0x144	; 0x144 <sensorMapping>
     c04:	21 97       	sbiw	r28, 0x01	; 1
		
		if (mappedValue == 120/* || mappedValue == 110*/)
		{
			Stop();
			_delay_ms(50);
			for (int temp = 0; temp < 6; temp++)
     c06:	d1 f7       	brne	.-12     	; 0xbfc <main+0x13e>
     c08:	26 c0       	rjmp	.+76     	; 0xc56 <main+0x198>
				sensorValueConversion();
				sensorMapping();
			}
			while (mappedValue == 120)
			{
				Stop();
     c0a:	0e 94 20 05 	call	0xa40	; 0xa40 <Stop>
     c0e:	2f ef       	ldi	r18, 0xFF	; 255
     c10:	81 ee       	ldi	r24, 0xE1	; 225
     c12:	94 e0       	ldi	r25, 0x04	; 4
     c14:	21 50       	subi	r18, 0x01	; 1
     c16:	80 40       	sbci	r24, 0x00	; 0
     c18:	90 40       	sbci	r25, 0x00	; 0
     c1a:	e1 f7       	brne	.-8      	; 0xc14 <main+0x156>
     c1c:	00 c0       	rjmp	.+0      	; 0xc1e <main+0x160>
     c1e:	00 00       	nop
				_delay_ms(100);
				RightSharp();
     c20:	0e 94 35 05 	call	0xa6a	; 0xa6a <RightSharp>
     c24:	2f ef       	ldi	r18, 0xFF	; 255
     c26:	84 e3       	ldi	r24, 0x34	; 52
     c28:	9c e0       	ldi	r25, 0x0C	; 12
     c2a:	21 50       	subi	r18, 0x01	; 1
     c2c:	80 40       	sbci	r24, 0x00	; 0
     c2e:	90 40       	sbci	r25, 0x00	; 0
     c30:	e1 f7       	brne	.-8      	; 0xc2a <main+0x16c>
     c32:	00 c0       	rjmp	.+0      	; 0xc34 <main+0x176>
     c34:	00 00       	nop
				_delay_ms(250);
				while(mappedValue > 15)
     c36:	80 91 9b 00 	lds	r24, 0x009B
     c3a:	90 91 9c 00 	lds	r25, 0x009C
     c3e:	40 97       	sbiw	r24, 0x10	; 16
     c40:	54 f0       	brlt	.+20     	; 0xc56 <main+0x198>
				{
					sensorValueConversion();
     c42:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
					sensorMapping();
     c46:	0e 94 a2 00 	call	0x144	; 0x144 <sensorMapping>
			{
				Stop();
				_delay_ms(100);
				RightSharp();
				_delay_ms(250);
				while(mappedValue > 15)
     c4a:	80 91 9b 00 	lds	r24, 0x009B
     c4e:	90 91 9c 00 	lds	r25, 0x009C
     c52:	40 97       	sbiw	r24, 0x10	; 16
     c54:	b4 f7       	brge	.-20     	; 0xc42 <main+0x184>
			for (int temp = 0; temp < 6; temp++)
			{
				sensorValueConversion();
				sensorMapping();
			}
			while (mappedValue == 120)
     c56:	80 91 9b 00 	lds	r24, 0x009B
     c5a:	90 91 9c 00 	lds	r25, 0x009C
     c5e:	88 37       	cpi	r24, 0x78	; 120
     c60:	91 05       	cpc	r25, r1
     c62:	99 f2       	breq	.-90     	; 0xc0a <main+0x14c>
					sensorMapping();
				}
			}
		}
		
		if (mappedValue == -120/* || mappedValue == -110*/)
     c64:	80 91 9b 00 	lds	r24, 0x009B
     c68:	90 91 9c 00 	lds	r25, 0x009C
     c6c:	88 38       	cpi	r24, 0x88	; 136
     c6e:	9f 4f       	sbci	r25, 0xFF	; 255
     c70:	09 f0       	breq	.+2      	; 0xc74 <main+0x1b6>
     c72:	3f c0       	rjmp	.+126    	; 0xcf2 <main+0x234>
		{
			Stop();
     c74:	0e 94 20 05 	call	0xa40	; 0xa40 <Stop>
     c78:	8f ef       	ldi	r24, 0xFF	; 255
     c7a:	90 e7       	ldi	r25, 0x70	; 112
     c7c:	22 e0       	ldi	r18, 0x02	; 2
     c7e:	81 50       	subi	r24, 0x01	; 1
     c80:	90 40       	sbci	r25, 0x00	; 0
     c82:	20 40       	sbci	r18, 0x00	; 0
     c84:	e1 f7       	brne	.-8      	; 0xc7e <main+0x1c0>
     c86:	00 c0       	rjmp	.+0      	; 0xc88 <main+0x1ca>
     c88:	00 00       	nop
			_delay_ms(50);
			for (int temp = 0; temp < 1; temp++)
			{
				sensorValueConversion();
     c8a:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
				sensorMapping();
     c8e:	0e 94 a2 00 	call	0x144	; 0x144 <sensorMapping>
     c92:	28 c0       	rjmp	.+80     	; 0xce4 <main+0x226>
			}
			while (mappedValue == -120)
			{	
				Stop();
     c94:	0e 94 20 05 	call	0xa40	; 0xa40 <Stop>
     c98:	8f ef       	ldi	r24, 0xFF	; 255
     c9a:	91 ee       	ldi	r25, 0xE1	; 225
     c9c:	24 e0       	ldi	r18, 0x04	; 4
     c9e:	81 50       	subi	r24, 0x01	; 1
     ca0:	90 40       	sbci	r25, 0x00	; 0
     ca2:	20 40       	sbci	r18, 0x00	; 0
     ca4:	e1 f7       	brne	.-8      	; 0xc9e <main+0x1e0>
     ca6:	00 c0       	rjmp	.+0      	; 0xca8 <main+0x1ea>
     ca8:	00 00       	nop
 				_delay_ms(100);
				LeftSharp();
     caa:	0e 94 4a 05 	call	0xa94	; 0xa94 <LeftSharp>
     cae:	8f ef       	ldi	r24, 0xFF	; 255
     cb0:	94 e3       	ldi	r25, 0x34	; 52
     cb2:	2c e0       	ldi	r18, 0x0C	; 12
     cb4:	81 50       	subi	r24, 0x01	; 1
     cb6:	90 40       	sbci	r25, 0x00	; 0
     cb8:	20 40       	sbci	r18, 0x00	; 0
     cba:	e1 f7       	brne	.-8      	; 0xcb4 <main+0x1f6>
     cbc:	00 c0       	rjmp	.+0      	; 0xcbe <main+0x200>
     cbe:	00 00       	nop
				_delay_ms(250);
				while(mappedValue < -15)
     cc0:	80 91 9b 00 	lds	r24, 0x009B
     cc4:	90 91 9c 00 	lds	r25, 0x009C
     cc8:	81 3f       	cpi	r24, 0xF1	; 241
     cca:	9f 4f       	sbci	r25, 0xFF	; 255
     ccc:	5c f4       	brge	.+22     	; 0xce4 <main+0x226>
				{
					sensorValueConversion();
     cce:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
					sensorMapping();
     cd2:	0e 94 a2 00 	call	0x144	; 0x144 <sensorMapping>
			{	
				Stop();
 				_delay_ms(100);
				LeftSharp();
				_delay_ms(250);
				while(mappedValue < -15)
     cd6:	80 91 9b 00 	lds	r24, 0x009B
     cda:	90 91 9c 00 	lds	r25, 0x009C
     cde:	81 3f       	cpi	r24, 0xF1	; 241
     ce0:	9f 4f       	sbci	r25, 0xFF	; 255
     ce2:	ac f3       	brlt	.-22     	; 0xcce <main+0x210>
			for (int temp = 0; temp < 1; temp++)
			{
				sensorValueConversion();
				sensorMapping();
			}
			while (mappedValue == -120)
     ce4:	80 91 9b 00 	lds	r24, 0x009B
     ce8:	90 91 9c 00 	lds	r25, 0x009C
     cec:	88 38       	cpi	r24, 0x88	; 136
     cee:	9f 4f       	sbci	r25, 0xFF	; 255
     cf0:	89 f2       	breq	.-94     	; 0xc94 <main+0x1d6>
					sensorMapping();
				}				
			}
		}
		
		if (mappedValue == 100/* || mappedValue == 110*/)
     cf2:	80 91 9b 00 	lds	r24, 0x009B
     cf6:	90 91 9c 00 	lds	r25, 0x009C
     cfa:	84 36       	cpi	r24, 0x64	; 100
     cfc:	91 05       	cpc	r25, r1
     cfe:	59 f5       	brne	.+86     	; 0xd56 <main+0x298>
     d00:	23 c0       	rjmp	.+70     	; 0xd48 <main+0x28a>
// 				sensorValueConversion();
// 				sensorMapping();
// 			}
			while (mappedValue == 100)
			{
				Stop();
     d02:	0e 94 20 05 	call	0xa40	; 0xa40 <Stop>
     d06:	8f e3       	ldi	r24, 0x3F	; 63
     d08:	9c e9       	ldi	r25, 0x9C	; 156
     d0a:	01 97       	sbiw	r24, 0x01	; 1
     d0c:	f1 f7       	brne	.-4      	; 0xd0a <main+0x24c>
     d0e:	00 c0       	rjmp	.+0      	; 0xd10 <main+0x252>
     d10:	00 00       	nop
				_delay_ms(10);
				RightSharp();
     d12:	0e 94 35 05 	call	0xa6a	; 0xa6a <RightSharp>
     d16:	9f ef       	ldi	r25, 0xFF	; 255
     d18:	23 ec       	ldi	r18, 0xC3	; 195
     d1a:	89 e0       	ldi	r24, 0x09	; 9
     d1c:	91 50       	subi	r25, 0x01	; 1
     d1e:	20 40       	sbci	r18, 0x00	; 0
     d20:	80 40       	sbci	r24, 0x00	; 0
     d22:	e1 f7       	brne	.-8      	; 0xd1c <main+0x25e>
     d24:	00 c0       	rjmp	.+0      	; 0xd26 <main+0x268>
     d26:	00 00       	nop
				_delay_ms(200);
				while(mappedValue > 15)
     d28:	80 91 9b 00 	lds	r24, 0x009B
     d2c:	90 91 9c 00 	lds	r25, 0x009C
     d30:	40 97       	sbiw	r24, 0x10	; 16
     d32:	54 f0       	brlt	.+20     	; 0xd48 <main+0x28a>
				{
					sensorValueConversion();
     d34:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
					sensorMapping();
     d38:	0e 94 a2 00 	call	0x144	; 0x144 <sensorMapping>
			{
				Stop();
				_delay_ms(10);
				RightSharp();
				_delay_ms(200);
				while(mappedValue > 15)
     d3c:	80 91 9b 00 	lds	r24, 0x009B
     d40:	90 91 9c 00 	lds	r25, 0x009C
     d44:	40 97       	sbiw	r24, 0x10	; 16
     d46:	b4 f7       	brge	.-20     	; 0xd34 <main+0x276>
// 			for (int temp = 0; temp < 10; temp++)
// 			{
// 				sensorValueConversion();
// 				sensorMapping();
// 			}
			while (mappedValue == 100)
     d48:	80 91 9b 00 	lds	r24, 0x009B
     d4c:	90 91 9c 00 	lds	r25, 0x009C
     d50:	84 36       	cpi	r24, 0x64	; 100
     d52:	91 05       	cpc	r25, r1
     d54:	b1 f2       	breq	.-84     	; 0xd02 <main+0x244>
					sensorMapping();
				}
			}
		}
		
		if (mappedValue == -100/* || mappedValue == 110*/)
     d56:	80 91 9b 00 	lds	r24, 0x009B
     d5a:	90 91 9c 00 	lds	r25, 0x009C
     d5e:	8c 39       	cpi	r24, 0x9C	; 156
     d60:	9f 4f       	sbci	r25, 0xFF	; 255
     d62:	69 f5       	brne	.+90     	; 0xdbe <main+0x300>
     d64:	25 c0       	rjmp	.+74     	; 0xdb0 <main+0x2f2>
// 				sensorValueConversion();
// 				sensorMapping();
// 			}
			while (mappedValue == -100)
			{
				Stop();
     d66:	0e 94 20 05 	call	0xa40	; 0xa40 <Stop>
     d6a:	8f e3       	ldi	r24, 0x3F	; 63
     d6c:	9c e9       	ldi	r25, 0x9C	; 156
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	f1 f7       	brne	.-4      	; 0xd6e <main+0x2b0>
     d72:	00 c0       	rjmp	.+0      	; 0xd74 <main+0x2b6>
     d74:	00 00       	nop
				_delay_ms(10);
				LeftSharp();
     d76:	0e 94 4a 05 	call	0xa94	; 0xa94 <LeftSharp>
     d7a:	9f ef       	ldi	r25, 0xFF	; 255
     d7c:	23 ec       	ldi	r18, 0xC3	; 195
     d7e:	89 e0       	ldi	r24, 0x09	; 9
     d80:	91 50       	subi	r25, 0x01	; 1
     d82:	20 40       	sbci	r18, 0x00	; 0
     d84:	80 40       	sbci	r24, 0x00	; 0
     d86:	e1 f7       	brne	.-8      	; 0xd80 <main+0x2c2>
     d88:	00 c0       	rjmp	.+0      	; 0xd8a <main+0x2cc>
     d8a:	00 00       	nop
				_delay_ms(200);
				while(mappedValue < -15)
     d8c:	80 91 9b 00 	lds	r24, 0x009B
     d90:	90 91 9c 00 	lds	r25, 0x009C
     d94:	81 3f       	cpi	r24, 0xF1	; 241
     d96:	9f 4f       	sbci	r25, 0xFF	; 255
     d98:	5c f4       	brge	.+22     	; 0xdb0 <main+0x2f2>
				{
					sensorValueConversion();
     d9a:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
					sensorMapping();
     d9e:	0e 94 a2 00 	call	0x144	; 0x144 <sensorMapping>
			{
				Stop();
				_delay_ms(10);
				LeftSharp();
				_delay_ms(200);
				while(mappedValue < -15)
     da2:	80 91 9b 00 	lds	r24, 0x009B
     da6:	90 91 9c 00 	lds	r25, 0x009C
     daa:	81 3f       	cpi	r24, 0xF1	; 241
     dac:	9f 4f       	sbci	r25, 0xFF	; 255
     dae:	ac f3       	brlt	.-22     	; 0xd9a <main+0x2dc>
// 			for (int temp = 0; temp < 10; temp++)
// 			{
// 				sensorValueConversion();
// 				sensorMapping();
// 			}
			while (mappedValue == -100)
     db0:	80 91 9b 00 	lds	r24, 0x009B
     db4:	90 91 9c 00 	lds	r25, 0x009C
     db8:	8c 39       	cpi	r24, 0x9C	; 156
     dba:	9f 4f       	sbci	r25, 0xFF	; 255
     dbc:	a1 f2       	breq	.-88     	; 0xd66 <main+0x2a8>
// 			}
// 		}


		
		PID_Correction();
     dbe:	0e 94 0c 04 	call	0x818	; 0x818 <PID_Correction>
		enable1(LMspeed);
     dc2:	80 91 7e 00 	lds	r24, 0x007E
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	0e 94 fb 07 	call	0xff6	; 0xff6 <PWM0>
		enable2(RMspeed);
     dcc:	80 91 7d 00 	lds	r24, 0x007D
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	0e 94 fd 07 	call	0xffa	; 0xffa <PWM2>
	}
     dd6:	99 ce       	rjmp	.-718    	; 0xb0a <main+0x4c>

00000dd8 <__vector_1>:
{
	TIMSK |= (1 << TOIE2) | (1 << TOIE0);				// Enable Timer Overflow Interrupt 0, Timer Overflow Interrupt 2
}

ISR (INT0_vect)
{
     dd8:	1f 92       	push	r1
     dda:	0f 92       	push	r0
     ddc:	0f b6       	in	r0, 0x3f	; 63
     dde:	0f 92       	push	r0
     de0:	11 24       	eor	r1, r1
     de2:	8f 93       	push	r24
     de4:	9f 93       	push	r25
	if (choice1 == 0)
     de6:	80 91 95 00 	lds	r24, 0x0095
     dea:	90 91 96 00 	lds	r25, 0x0096
     dee:	89 2b       	or	r24, r25
     df0:	51 f4       	brne	.+20     	; 0xe06 <__vector_1+0x2e>
	{
		TCCR1B |= (1 << CS11);
     df2:	8e b5       	in	r24, 0x2e	; 46
     df4:	82 60       	ori	r24, 0x02	; 2
     df6:	8e bd       	out	0x2e, r24	; 46
		choice1 = 1;
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	90 93 96 00 	sts	0x0096, r25
     e00:	80 93 95 00 	sts	0x0095, r24
     e04:	15 c0       	rjmp	.+42     	; 0xe30 <__vector_1+0x58>
	}
	else if (choice1 == 1)
     e06:	80 91 95 00 	lds	r24, 0x0095
     e0a:	90 91 96 00 	lds	r25, 0x0096
     e0e:	01 97       	sbiw	r24, 0x01	; 1
     e10:	79 f4       	brne	.+30     	; 0xe30 <__vector_1+0x58>
	{
		TCCR1B = 0;
     e12:	1e bc       	out	0x2e, r1	; 46
		pulse1 = TCNT1 / 2;
     e14:	8c b5       	in	r24, 0x2c	; 44
     e16:	9d b5       	in	r25, 0x2d	; 45
     e18:	96 95       	lsr	r25
     e1a:	87 95       	ror	r24
     e1c:	90 93 98 00 	sts	0x0098, r25
     e20:	80 93 97 00 	sts	0x0097, r24
		TCNT1 = 0;
     e24:	1d bc       	out	0x2d, r1	; 45
     e26:	1c bc       	out	0x2c, r1	; 44
		choice1 = 0;
     e28:	10 92 96 00 	sts	0x0096, r1
     e2c:	10 92 95 00 	sts	0x0095, r1
	}
}
     e30:	9f 91       	pop	r25
     e32:	8f 91       	pop	r24
     e34:	0f 90       	pop	r0
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	0f 90       	pop	r0
     e3a:	1f 90       	pop	r1
     e3c:	18 95       	reti

00000e3e <__vector_2>:

ISR (INT1_vect)
{
     e3e:	1f 92       	push	r1
     e40:	0f 92       	push	r0
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	0f 92       	push	r0
     e46:	11 24       	eor	r1, r1
     e48:	2f 93       	push	r18
     e4a:	3f 93       	push	r19
     e4c:	4f 93       	push	r20
     e4e:	5f 93       	push	r21
     e50:	8f 93       	push	r24
     e52:	9f 93       	push	r25
	if (choice2 == 0)
     e54:	80 91 91 00 	lds	r24, 0x0091
     e58:	90 91 92 00 	lds	r25, 0x0092
     e5c:	89 2b       	or	r24, r25
     e5e:	51 f4       	brne	.+20     	; 0xe74 <__vector_2+0x36>
	{
		TCCR0 |= 0b00000011;
     e60:	83 b7       	in	r24, 0x33	; 51
     e62:	83 60       	ori	r24, 0x03	; 3
     e64:	83 bf       	out	0x33, r24	; 51
		choice2 = 1;
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	90 93 92 00 	sts	0x0092, r25
     e6e:	80 93 91 00 	sts	0x0091, r24
     e72:	25 c0       	rjmp	.+74     	; 0xebe <__vector_2+0x80>
	}
	else if (choice2 == 1)
     e74:	80 91 91 00 	lds	r24, 0x0091
     e78:	90 91 92 00 	lds	r25, 0x0092
     e7c:	01 97       	sbiw	r24, 0x01	; 1
     e7e:	f9 f4       	brne	.+62     	; 0xebe <__vector_2+0x80>
	{
		TCCR0 = 0;
     e80:	13 be       	out	0x33, r1	; 51
		pulse2 = (TCNT0 + (0xFF * TIMER0_INT)) * 4;
     e82:	22 b7       	in	r18, 0x32	; 50
     e84:	40 91 8b 00 	lds	r20, 0x008B
     e88:	50 91 8c 00 	lds	r21, 0x008C
     e8c:	3f ef       	ldi	r19, 0xFF	; 255
     e8e:	34 9f       	mul	r19, r20
     e90:	c0 01       	movw	r24, r0
     e92:	35 9f       	mul	r19, r21
     e94:	90 0d       	add	r25, r0
     e96:	11 24       	eor	r1, r1
     e98:	82 0f       	add	r24, r18
     e9a:	91 1d       	adc	r25, r1
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	90 93 94 00 	sts	0x0094, r25
     ea8:	80 93 93 00 	sts	0x0093, r24
		TIMER0_INT = 0;
     eac:	10 92 8c 00 	sts	0x008C, r1
     eb0:	10 92 8b 00 	sts	0x008B, r1
		TCNT0 = 0;
     eb4:	12 be       	out	0x32, r1	; 50
		choice2 = 0;
     eb6:	10 92 92 00 	sts	0x0092, r1
     eba:	10 92 91 00 	sts	0x0091, r1
	}
}
     ebe:	9f 91       	pop	r25
     ec0:	8f 91       	pop	r24
     ec2:	5f 91       	pop	r21
     ec4:	4f 91       	pop	r20
     ec6:	3f 91       	pop	r19
     ec8:	2f 91       	pop	r18
     eca:	0f 90       	pop	r0
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	0f 90       	pop	r0
     ed0:	1f 90       	pop	r1
     ed2:	18 95       	reti

00000ed4 <__vector_3>:

ISR (INT2_vect)
{
     ed4:	1f 92       	push	r1
     ed6:	0f 92       	push	r0
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	0f 92       	push	r0
     edc:	11 24       	eor	r1, r1
     ede:	2f 93       	push	r18
     ee0:	3f 93       	push	r19
     ee2:	4f 93       	push	r20
     ee4:	5f 93       	push	r21
     ee6:	8f 93       	push	r24
     ee8:	9f 93       	push	r25
	MCUCSR ^= (1 << ISC2);
     eea:	94 b7       	in	r25, 0x34	; 52
     eec:	80 e4       	ldi	r24, 0x40	; 64
     eee:	89 27       	eor	r24, r25
     ef0:	84 bf       	out	0x34, r24	; 52
	if (choice3 == 0)
     ef2:	80 91 8d 00 	lds	r24, 0x008D
     ef6:	90 91 8e 00 	lds	r25, 0x008E
     efa:	89 2b       	or	r24, r25
     efc:	51 f4       	brne	.+20     	; 0xf12 <__vector_3+0x3e>
	{
		TCCR2 |= 0b00000100;
     efe:	85 b5       	in	r24, 0x25	; 37
     f00:	84 60       	ori	r24, 0x04	; 4
     f02:	85 bd       	out	0x25, r24	; 37
		choice3 = 1;
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	90 93 8e 00 	sts	0x008E, r25
     f0c:	80 93 8d 00 	sts	0x008D, r24
     f10:	25 c0       	rjmp	.+74     	; 0xf5c <__vector_3+0x88>
	}
	else if (choice3 == 1)
     f12:	80 91 8d 00 	lds	r24, 0x008D
     f16:	90 91 8e 00 	lds	r25, 0x008E
     f1a:	01 97       	sbiw	r24, 0x01	; 1
     f1c:	f9 f4       	brne	.+62     	; 0xf5c <__vector_3+0x88>
	{
		TCCR2 = 0;
     f1e:	15 bc       	out	0x25, r1	; 37
		pulse3 = (TCNT2 + (0xFF * TIMER2_INT)) * 4;
     f20:	24 b5       	in	r18, 0x24	; 36
     f22:	40 91 89 00 	lds	r20, 0x0089
     f26:	50 91 8a 00 	lds	r21, 0x008A
     f2a:	3f ef       	ldi	r19, 0xFF	; 255
     f2c:	34 9f       	mul	r19, r20
     f2e:	c0 01       	movw	r24, r0
     f30:	35 9f       	mul	r19, r21
     f32:	90 0d       	add	r25, r0
     f34:	11 24       	eor	r1, r1
     f36:	82 0f       	add	r24, r18
     f38:	91 1d       	adc	r25, r1
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	90 93 90 00 	sts	0x0090, r25
     f46:	80 93 8f 00 	sts	0x008F, r24
		TIMER2_INT = 0;
     f4a:	10 92 8a 00 	sts	0x008A, r1
     f4e:	10 92 89 00 	sts	0x0089, r1
		TCNT2 = 0;
     f52:	14 bc       	out	0x24, r1	; 36
		choice3 = 0;
     f54:	10 92 8e 00 	sts	0x008E, r1
     f58:	10 92 8d 00 	sts	0x008D, r1
	}
}
     f5c:	9f 91       	pop	r25
     f5e:	8f 91       	pop	r24
     f60:	5f 91       	pop	r21
     f62:	4f 91       	pop	r20
     f64:	3f 91       	pop	r19
     f66:	2f 91       	pop	r18
     f68:	0f 90       	pop	r0
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	0f 90       	pop	r0
     f6e:	1f 90       	pop	r1
     f70:	18 95       	reti

00000f72 <__vector_5>:

ISR (TIMER2_OVF_vect)
{
     f72:	1f 92       	push	r1
     f74:	0f 92       	push	r0
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	0f 92       	push	r0
     f7a:	11 24       	eor	r1, r1
     f7c:	8f 93       	push	r24
     f7e:	9f 93       	push	r25
	TIMER2_INT++;
     f80:	80 91 89 00 	lds	r24, 0x0089
     f84:	90 91 8a 00 	lds	r25, 0x008A
     f88:	01 96       	adiw	r24, 0x01	; 1
     f8a:	90 93 8a 00 	sts	0x008A, r25
     f8e:	80 93 89 00 	sts	0x0089, r24
}
     f92:	9f 91       	pop	r25
     f94:	8f 91       	pop	r24
     f96:	0f 90       	pop	r0
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	0f 90       	pop	r0
     f9c:	1f 90       	pop	r1
     f9e:	18 95       	reti

00000fa0 <__vector_11>:

ISR (TIMER0_OVF_vect)
{
     fa0:	1f 92       	push	r1
     fa2:	0f 92       	push	r0
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	0f 92       	push	r0
     fa8:	11 24       	eor	r1, r1
     faa:	8f 93       	push	r24
     fac:	9f 93       	push	r25
	TIMER0_INT++;
     fae:	80 91 8b 00 	lds	r24, 0x008B
     fb2:	90 91 8c 00 	lds	r25, 0x008C
     fb6:	01 96       	adiw	r24, 0x01	; 1
     fb8:	90 93 8c 00 	sts	0x008C, r25
     fbc:	80 93 8b 00 	sts	0x008B, r24
}
     fc0:	9f 91       	pop	r25
     fc2:	8f 91       	pop	r24
     fc4:	0f 90       	pop	r0
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	0f 90       	pop	r0
     fca:	1f 90       	pop	r1
     fcc:	18 95       	reti

00000fce <PWM0_init>:
     fce:	83 b7       	in	r24, 0x33	; 51
     fd0:	88 64       	ori	r24, 0x48	; 72
     fd2:	83 bf       	out	0x33, r24	; 51
     fd4:	83 b7       	in	r24, 0x33	; 51
     fd6:	80 62       	ori	r24, 0x20	; 32
     fd8:	83 bf       	out	0x33, r24	; 51
     fda:	83 b7       	in	r24, 0x33	; 51
     fdc:	81 60       	ori	r24, 0x01	; 1
     fde:	83 bf       	out	0x33, r24	; 51
     fe0:	08 95       	ret

00000fe2 <PWM2_init>:
     fe2:	85 b5       	in	r24, 0x25	; 37
     fe4:	88 64       	ori	r24, 0x48	; 72
     fe6:	85 bd       	out	0x25, r24	; 37
     fe8:	85 b5       	in	r24, 0x25	; 37
     fea:	80 62       	ori	r24, 0x20	; 32
     fec:	85 bd       	out	0x25, r24	; 37
     fee:	85 b5       	in	r24, 0x25	; 37
     ff0:	81 60       	ori	r24, 0x01	; 1
     ff2:	85 bd       	out	0x25, r24	; 37
     ff4:	08 95       	ret

00000ff6 <PWM0>:
     ff6:	8c bf       	out	0x3c, r24	; 60
     ff8:	08 95       	ret

00000ffa <PWM2>:
     ffa:	83 bd       	out	0x23, r24	; 35
     ffc:	08 95       	ret

00000ffe <UART_init>:
     ffe:	80 b5       	in	r24, 0x20	; 32
    1000:	8f 7b       	andi	r24, 0xBF	; 191
    1002:	80 bd       	out	0x20, r24	; 32
    1004:	59 98       	cbi	0x0b, 1	; 11
    1006:	10 bc       	out	0x20, r1	; 32
    1008:	87 e6       	ldi	r24, 0x67	; 103
    100a:	89 b9       	out	0x09, r24	; 9
    100c:	8a b1       	in	r24, 0x0a	; 10
    100e:	88 61       	ori	r24, 0x18	; 24
    1010:	8a b9       	out	0x0a, r24	; 10
    1012:	80 b5       	in	r24, 0x20	; 32
    1014:	8e 68       	ori	r24, 0x8E	; 142
    1016:	80 bd       	out	0x20, r24	; 32
    1018:	08 95       	ret

0000101a <__subsf3>:
    101a:	50 58       	subi	r21, 0x80	; 128

0000101c <__addsf3>:
    101c:	bb 27       	eor	r27, r27
    101e:	aa 27       	eor	r26, r26
    1020:	0e 94 25 08 	call	0x104a	; 0x104a <__addsf3x>
    1024:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__fp_round>
    1028:	0e 94 1f 09 	call	0x123e	; 0x123e <__fp_pscA>
    102c:	38 f0       	brcs	.+14     	; 0x103c <__addsf3+0x20>
    102e:	0e 94 26 09 	call	0x124c	; 0x124c <__fp_pscB>
    1032:	20 f0       	brcs	.+8      	; 0x103c <__addsf3+0x20>
    1034:	39 f4       	brne	.+14     	; 0x1044 <__addsf3+0x28>
    1036:	9f 3f       	cpi	r25, 0xFF	; 255
    1038:	19 f4       	brne	.+6      	; 0x1040 <__addsf3+0x24>
    103a:	26 f4       	brtc	.+8      	; 0x1044 <__addsf3+0x28>
    103c:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__fp_nan>
    1040:	0e f4       	brtc	.+2      	; 0x1044 <__addsf3+0x28>
    1042:	e0 95       	com	r30
    1044:	e7 fb       	bst	r30, 7
    1046:	0c 94 16 09 	jmp	0x122c	; 0x122c <__fp_inf>

0000104a <__addsf3x>:
    104a:	e9 2f       	mov	r30, r25
    104c:	0e 94 3e 09 	call	0x127c	; 0x127c <__fp_split3>
    1050:	58 f3       	brcs	.-42     	; 0x1028 <__addsf3+0xc>
    1052:	ba 17       	cp	r27, r26
    1054:	62 07       	cpc	r22, r18
    1056:	73 07       	cpc	r23, r19
    1058:	84 07       	cpc	r24, r20
    105a:	95 07       	cpc	r25, r21
    105c:	20 f0       	brcs	.+8      	; 0x1066 <__addsf3x+0x1c>
    105e:	79 f4       	brne	.+30     	; 0x107e <__addsf3x+0x34>
    1060:	a6 f5       	brtc	.+104    	; 0x10ca <__addsf3x+0x80>
    1062:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__fp_zero>
    1066:	0e f4       	brtc	.+2      	; 0x106a <__addsf3x+0x20>
    1068:	e0 95       	com	r30
    106a:	0b 2e       	mov	r0, r27
    106c:	ba 2f       	mov	r27, r26
    106e:	a0 2d       	mov	r26, r0
    1070:	0b 01       	movw	r0, r22
    1072:	b9 01       	movw	r22, r18
    1074:	90 01       	movw	r18, r0
    1076:	0c 01       	movw	r0, r24
    1078:	ca 01       	movw	r24, r20
    107a:	a0 01       	movw	r20, r0
    107c:	11 24       	eor	r1, r1
    107e:	ff 27       	eor	r31, r31
    1080:	59 1b       	sub	r21, r25
    1082:	99 f0       	breq	.+38     	; 0x10aa <__addsf3x+0x60>
    1084:	59 3f       	cpi	r21, 0xF9	; 249
    1086:	50 f4       	brcc	.+20     	; 0x109c <__addsf3x+0x52>
    1088:	50 3e       	cpi	r21, 0xE0	; 224
    108a:	68 f1       	brcs	.+90     	; 0x10e6 <__addsf3x+0x9c>
    108c:	1a 16       	cp	r1, r26
    108e:	f0 40       	sbci	r31, 0x00	; 0
    1090:	a2 2f       	mov	r26, r18
    1092:	23 2f       	mov	r18, r19
    1094:	34 2f       	mov	r19, r20
    1096:	44 27       	eor	r20, r20
    1098:	58 5f       	subi	r21, 0xF8	; 248
    109a:	f3 cf       	rjmp	.-26     	; 0x1082 <__addsf3x+0x38>
    109c:	46 95       	lsr	r20
    109e:	37 95       	ror	r19
    10a0:	27 95       	ror	r18
    10a2:	a7 95       	ror	r26
    10a4:	f0 40       	sbci	r31, 0x00	; 0
    10a6:	53 95       	inc	r21
    10a8:	c9 f7       	brne	.-14     	; 0x109c <__addsf3x+0x52>
    10aa:	7e f4       	brtc	.+30     	; 0x10ca <__addsf3x+0x80>
    10ac:	1f 16       	cp	r1, r31
    10ae:	ba 0b       	sbc	r27, r26
    10b0:	62 0b       	sbc	r22, r18
    10b2:	73 0b       	sbc	r23, r19
    10b4:	84 0b       	sbc	r24, r20
    10b6:	ba f0       	brmi	.+46     	; 0x10e6 <__addsf3x+0x9c>
    10b8:	91 50       	subi	r25, 0x01	; 1
    10ba:	a1 f0       	breq	.+40     	; 0x10e4 <__addsf3x+0x9a>
    10bc:	ff 0f       	add	r31, r31
    10be:	bb 1f       	adc	r27, r27
    10c0:	66 1f       	adc	r22, r22
    10c2:	77 1f       	adc	r23, r23
    10c4:	88 1f       	adc	r24, r24
    10c6:	c2 f7       	brpl	.-16     	; 0x10b8 <__addsf3x+0x6e>
    10c8:	0e c0       	rjmp	.+28     	; 0x10e6 <__addsf3x+0x9c>
    10ca:	ba 0f       	add	r27, r26
    10cc:	62 1f       	adc	r22, r18
    10ce:	73 1f       	adc	r23, r19
    10d0:	84 1f       	adc	r24, r20
    10d2:	48 f4       	brcc	.+18     	; 0x10e6 <__addsf3x+0x9c>
    10d4:	87 95       	ror	r24
    10d6:	77 95       	ror	r23
    10d8:	67 95       	ror	r22
    10da:	b7 95       	ror	r27
    10dc:	f7 95       	ror	r31
    10de:	9e 3f       	cpi	r25, 0xFE	; 254
    10e0:	08 f0       	brcs	.+2      	; 0x10e4 <__addsf3x+0x9a>
    10e2:	b0 cf       	rjmp	.-160    	; 0x1044 <__addsf3+0x28>
    10e4:	93 95       	inc	r25
    10e6:	88 0f       	add	r24, r24
    10e8:	08 f0       	brcs	.+2      	; 0x10ec <__addsf3x+0xa2>
    10ea:	99 27       	eor	r25, r25
    10ec:	ee 0f       	add	r30, r30
    10ee:	97 95       	ror	r25
    10f0:	87 95       	ror	r24
    10f2:	08 95       	ret

000010f4 <__cmpsf2>:
    10f4:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__fp_cmp>
    10f8:	08 f4       	brcc	.+2      	; 0x10fc <__cmpsf2+0x8>
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	08 95       	ret

000010fe <__fixsfsi>:
    10fe:	0e 94 86 08 	call	0x110c	; 0x110c <__fixunssfsi>
    1102:	68 94       	set
    1104:	b1 11       	cpse	r27, r1
    1106:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__fp_szero>
    110a:	08 95       	ret

0000110c <__fixunssfsi>:
    110c:	0e 94 46 09 	call	0x128c	; 0x128c <__fp_splitA>
    1110:	88 f0       	brcs	.+34     	; 0x1134 <__fixunssfsi+0x28>
    1112:	9f 57       	subi	r25, 0x7F	; 127
    1114:	98 f0       	brcs	.+38     	; 0x113c <__fixunssfsi+0x30>
    1116:	b9 2f       	mov	r27, r25
    1118:	99 27       	eor	r25, r25
    111a:	b7 51       	subi	r27, 0x17	; 23
    111c:	b0 f0       	brcs	.+44     	; 0x114a <__fixunssfsi+0x3e>
    111e:	e1 f0       	breq	.+56     	; 0x1158 <__fixunssfsi+0x4c>
    1120:	66 0f       	add	r22, r22
    1122:	77 1f       	adc	r23, r23
    1124:	88 1f       	adc	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	1a f0       	brmi	.+6      	; 0x1130 <__fixunssfsi+0x24>
    112a:	ba 95       	dec	r27
    112c:	c9 f7       	brne	.-14     	; 0x1120 <__fixunssfsi+0x14>
    112e:	14 c0       	rjmp	.+40     	; 0x1158 <__fixunssfsi+0x4c>
    1130:	b1 30       	cpi	r27, 0x01	; 1
    1132:	91 f0       	breq	.+36     	; 0x1158 <__fixunssfsi+0x4c>
    1134:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__fp_zero>
    1138:	b1 e0       	ldi	r27, 0x01	; 1
    113a:	08 95       	ret
    113c:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__fp_zero>
    1140:	67 2f       	mov	r22, r23
    1142:	78 2f       	mov	r23, r24
    1144:	88 27       	eor	r24, r24
    1146:	b8 5f       	subi	r27, 0xF8	; 248
    1148:	39 f0       	breq	.+14     	; 0x1158 <__fixunssfsi+0x4c>
    114a:	b9 3f       	cpi	r27, 0xF9	; 249
    114c:	cc f3       	brlt	.-14     	; 0x1140 <__fixunssfsi+0x34>
    114e:	86 95       	lsr	r24
    1150:	77 95       	ror	r23
    1152:	67 95       	ror	r22
    1154:	b3 95       	inc	r27
    1156:	d9 f7       	brne	.-10     	; 0x114e <__fixunssfsi+0x42>
    1158:	3e f4       	brtc	.+14     	; 0x1168 <__fixunssfsi+0x5c>
    115a:	90 95       	com	r25
    115c:	80 95       	com	r24
    115e:	70 95       	com	r23
    1160:	61 95       	neg	r22
    1162:	7f 4f       	sbci	r23, 0xFF	; 255
    1164:	8f 4f       	sbci	r24, 0xFF	; 255
    1166:	9f 4f       	sbci	r25, 0xFF	; 255
    1168:	08 95       	ret

0000116a <__floatunsisf>:
    116a:	e8 94       	clt
    116c:	09 c0       	rjmp	.+18     	; 0x1180 <__floatsisf+0x12>

0000116e <__floatsisf>:
    116e:	97 fb       	bst	r25, 7
    1170:	3e f4       	brtc	.+14     	; 0x1180 <__floatsisf+0x12>
    1172:	90 95       	com	r25
    1174:	80 95       	com	r24
    1176:	70 95       	com	r23
    1178:	61 95       	neg	r22
    117a:	7f 4f       	sbci	r23, 0xFF	; 255
    117c:	8f 4f       	sbci	r24, 0xFF	; 255
    117e:	9f 4f       	sbci	r25, 0xFF	; 255
    1180:	99 23       	and	r25, r25
    1182:	a9 f0       	breq	.+42     	; 0x11ae <__floatsisf+0x40>
    1184:	f9 2f       	mov	r31, r25
    1186:	96 e9       	ldi	r25, 0x96	; 150
    1188:	bb 27       	eor	r27, r27
    118a:	93 95       	inc	r25
    118c:	f6 95       	lsr	r31
    118e:	87 95       	ror	r24
    1190:	77 95       	ror	r23
    1192:	67 95       	ror	r22
    1194:	b7 95       	ror	r27
    1196:	f1 11       	cpse	r31, r1
    1198:	f8 cf       	rjmp	.-16     	; 0x118a <__floatsisf+0x1c>
    119a:	fa f4       	brpl	.+62     	; 0x11da <__floatsisf+0x6c>
    119c:	bb 0f       	add	r27, r27
    119e:	11 f4       	brne	.+4      	; 0x11a4 <__floatsisf+0x36>
    11a0:	60 ff       	sbrs	r22, 0
    11a2:	1b c0       	rjmp	.+54     	; 0x11da <__floatsisf+0x6c>
    11a4:	6f 5f       	subi	r22, 0xFF	; 255
    11a6:	7f 4f       	sbci	r23, 0xFF	; 255
    11a8:	8f 4f       	sbci	r24, 0xFF	; 255
    11aa:	9f 4f       	sbci	r25, 0xFF	; 255
    11ac:	16 c0       	rjmp	.+44     	; 0x11da <__floatsisf+0x6c>
    11ae:	88 23       	and	r24, r24
    11b0:	11 f0       	breq	.+4      	; 0x11b6 <__floatsisf+0x48>
    11b2:	96 e9       	ldi	r25, 0x96	; 150
    11b4:	11 c0       	rjmp	.+34     	; 0x11d8 <__floatsisf+0x6a>
    11b6:	77 23       	and	r23, r23
    11b8:	21 f0       	breq	.+8      	; 0x11c2 <__floatsisf+0x54>
    11ba:	9e e8       	ldi	r25, 0x8E	; 142
    11bc:	87 2f       	mov	r24, r23
    11be:	76 2f       	mov	r23, r22
    11c0:	05 c0       	rjmp	.+10     	; 0x11cc <__floatsisf+0x5e>
    11c2:	66 23       	and	r22, r22
    11c4:	71 f0       	breq	.+28     	; 0x11e2 <__floatsisf+0x74>
    11c6:	96 e8       	ldi	r25, 0x86	; 134
    11c8:	86 2f       	mov	r24, r22
    11ca:	70 e0       	ldi	r23, 0x00	; 0
    11cc:	60 e0       	ldi	r22, 0x00	; 0
    11ce:	2a f0       	brmi	.+10     	; 0x11da <__floatsisf+0x6c>
    11d0:	9a 95       	dec	r25
    11d2:	66 0f       	add	r22, r22
    11d4:	77 1f       	adc	r23, r23
    11d6:	88 1f       	adc	r24, r24
    11d8:	da f7       	brpl	.-10     	; 0x11d0 <__floatsisf+0x62>
    11da:	88 0f       	add	r24, r24
    11dc:	96 95       	lsr	r25
    11de:	87 95       	ror	r24
    11e0:	97 f9       	bld	r25, 7
    11e2:	08 95       	ret

000011e4 <__fp_cmp>:
    11e4:	99 0f       	add	r25, r25
    11e6:	00 08       	sbc	r0, r0
    11e8:	55 0f       	add	r21, r21
    11ea:	aa 0b       	sbc	r26, r26
    11ec:	e0 e8       	ldi	r30, 0x80	; 128
    11ee:	fe ef       	ldi	r31, 0xFE	; 254
    11f0:	16 16       	cp	r1, r22
    11f2:	17 06       	cpc	r1, r23
    11f4:	e8 07       	cpc	r30, r24
    11f6:	f9 07       	cpc	r31, r25
    11f8:	c0 f0       	brcs	.+48     	; 0x122a <__fp_cmp+0x46>
    11fa:	12 16       	cp	r1, r18
    11fc:	13 06       	cpc	r1, r19
    11fe:	e4 07       	cpc	r30, r20
    1200:	f5 07       	cpc	r31, r21
    1202:	98 f0       	brcs	.+38     	; 0x122a <__fp_cmp+0x46>
    1204:	62 1b       	sub	r22, r18
    1206:	73 0b       	sbc	r23, r19
    1208:	84 0b       	sbc	r24, r20
    120a:	95 0b       	sbc	r25, r21
    120c:	39 f4       	brne	.+14     	; 0x121c <__fp_cmp+0x38>
    120e:	0a 26       	eor	r0, r26
    1210:	61 f0       	breq	.+24     	; 0x122a <__fp_cmp+0x46>
    1212:	23 2b       	or	r18, r19
    1214:	24 2b       	or	r18, r20
    1216:	25 2b       	or	r18, r21
    1218:	21 f4       	brne	.+8      	; 0x1222 <__fp_cmp+0x3e>
    121a:	08 95       	ret
    121c:	0a 26       	eor	r0, r26
    121e:	09 f4       	brne	.+2      	; 0x1222 <__fp_cmp+0x3e>
    1220:	a1 40       	sbci	r26, 0x01	; 1
    1222:	a6 95       	lsr	r26
    1224:	8f ef       	ldi	r24, 0xFF	; 255
    1226:	81 1d       	adc	r24, r1
    1228:	81 1d       	adc	r24, r1
    122a:	08 95       	ret

0000122c <__fp_inf>:
    122c:	97 f9       	bld	r25, 7
    122e:	9f 67       	ori	r25, 0x7F	; 127
    1230:	80 e8       	ldi	r24, 0x80	; 128
    1232:	70 e0       	ldi	r23, 0x00	; 0
    1234:	60 e0       	ldi	r22, 0x00	; 0
    1236:	08 95       	ret

00001238 <__fp_nan>:
    1238:	9f ef       	ldi	r25, 0xFF	; 255
    123a:	80 ec       	ldi	r24, 0xC0	; 192
    123c:	08 95       	ret

0000123e <__fp_pscA>:
    123e:	00 24       	eor	r0, r0
    1240:	0a 94       	dec	r0
    1242:	16 16       	cp	r1, r22
    1244:	17 06       	cpc	r1, r23
    1246:	18 06       	cpc	r1, r24
    1248:	09 06       	cpc	r0, r25
    124a:	08 95       	ret

0000124c <__fp_pscB>:
    124c:	00 24       	eor	r0, r0
    124e:	0a 94       	dec	r0
    1250:	12 16       	cp	r1, r18
    1252:	13 06       	cpc	r1, r19
    1254:	14 06       	cpc	r1, r20
    1256:	05 06       	cpc	r0, r21
    1258:	08 95       	ret

0000125a <__fp_round>:
    125a:	09 2e       	mov	r0, r25
    125c:	03 94       	inc	r0
    125e:	00 0c       	add	r0, r0
    1260:	11 f4       	brne	.+4      	; 0x1266 <__fp_round+0xc>
    1262:	88 23       	and	r24, r24
    1264:	52 f0       	brmi	.+20     	; 0x127a <__fp_round+0x20>
    1266:	bb 0f       	add	r27, r27
    1268:	40 f4       	brcc	.+16     	; 0x127a <__fp_round+0x20>
    126a:	bf 2b       	or	r27, r31
    126c:	11 f4       	brne	.+4      	; 0x1272 <__fp_round+0x18>
    126e:	60 ff       	sbrs	r22, 0
    1270:	04 c0       	rjmp	.+8      	; 0x127a <__fp_round+0x20>
    1272:	6f 5f       	subi	r22, 0xFF	; 255
    1274:	7f 4f       	sbci	r23, 0xFF	; 255
    1276:	8f 4f       	sbci	r24, 0xFF	; 255
    1278:	9f 4f       	sbci	r25, 0xFF	; 255
    127a:	08 95       	ret

0000127c <__fp_split3>:
    127c:	57 fd       	sbrc	r21, 7
    127e:	90 58       	subi	r25, 0x80	; 128
    1280:	44 0f       	add	r20, r20
    1282:	55 1f       	adc	r21, r21
    1284:	59 f0       	breq	.+22     	; 0x129c <__fp_splitA+0x10>
    1286:	5f 3f       	cpi	r21, 0xFF	; 255
    1288:	71 f0       	breq	.+28     	; 0x12a6 <__fp_splitA+0x1a>
    128a:	47 95       	ror	r20

0000128c <__fp_splitA>:
    128c:	88 0f       	add	r24, r24
    128e:	97 fb       	bst	r25, 7
    1290:	99 1f       	adc	r25, r25
    1292:	61 f0       	breq	.+24     	; 0x12ac <__fp_splitA+0x20>
    1294:	9f 3f       	cpi	r25, 0xFF	; 255
    1296:	79 f0       	breq	.+30     	; 0x12b6 <__fp_splitA+0x2a>
    1298:	87 95       	ror	r24
    129a:	08 95       	ret
    129c:	12 16       	cp	r1, r18
    129e:	13 06       	cpc	r1, r19
    12a0:	14 06       	cpc	r1, r20
    12a2:	55 1f       	adc	r21, r21
    12a4:	f2 cf       	rjmp	.-28     	; 0x128a <__fp_split3+0xe>
    12a6:	46 95       	lsr	r20
    12a8:	f1 df       	rcall	.-30     	; 0x128c <__fp_splitA>
    12aa:	08 c0       	rjmp	.+16     	; 0x12bc <__fp_splitA+0x30>
    12ac:	16 16       	cp	r1, r22
    12ae:	17 06       	cpc	r1, r23
    12b0:	18 06       	cpc	r1, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	f1 cf       	rjmp	.-30     	; 0x1298 <__fp_splitA+0xc>
    12b6:	86 95       	lsr	r24
    12b8:	71 05       	cpc	r23, r1
    12ba:	61 05       	cpc	r22, r1
    12bc:	08 94       	sec
    12be:	08 95       	ret

000012c0 <__fp_zero>:
    12c0:	e8 94       	clt

000012c2 <__fp_szero>:
    12c2:	bb 27       	eor	r27, r27
    12c4:	66 27       	eor	r22, r22
    12c6:	77 27       	eor	r23, r23
    12c8:	cb 01       	movw	r24, r22
    12ca:	97 f9       	bld	r25, 7
    12cc:	08 95       	ret

000012ce <__mulsf3>:
    12ce:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <__mulsf3x>
    12d2:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__fp_round>
    12d6:	0e 94 1f 09 	call	0x123e	; 0x123e <__fp_pscA>
    12da:	38 f0       	brcs	.+14     	; 0x12ea <__mulsf3+0x1c>
    12dc:	0e 94 26 09 	call	0x124c	; 0x124c <__fp_pscB>
    12e0:	20 f0       	brcs	.+8      	; 0x12ea <__mulsf3+0x1c>
    12e2:	95 23       	and	r25, r21
    12e4:	11 f0       	breq	.+4      	; 0x12ea <__mulsf3+0x1c>
    12e6:	0c 94 16 09 	jmp	0x122c	; 0x122c <__fp_inf>
    12ea:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__fp_nan>
    12ee:	11 24       	eor	r1, r1
    12f0:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__fp_szero>

000012f4 <__mulsf3x>:
    12f4:	0e 94 3e 09 	call	0x127c	; 0x127c <__fp_split3>
    12f8:	70 f3       	brcs	.-36     	; 0x12d6 <__mulsf3+0x8>

000012fa <__mulsf3_pse>:
    12fa:	95 9f       	mul	r25, r21
    12fc:	c1 f3       	breq	.-16     	; 0x12ee <__mulsf3+0x20>
    12fe:	95 0f       	add	r25, r21
    1300:	50 e0       	ldi	r21, 0x00	; 0
    1302:	55 1f       	adc	r21, r21
    1304:	62 9f       	mul	r22, r18
    1306:	f0 01       	movw	r30, r0
    1308:	72 9f       	mul	r23, r18
    130a:	bb 27       	eor	r27, r27
    130c:	f0 0d       	add	r31, r0
    130e:	b1 1d       	adc	r27, r1
    1310:	63 9f       	mul	r22, r19
    1312:	aa 27       	eor	r26, r26
    1314:	f0 0d       	add	r31, r0
    1316:	b1 1d       	adc	r27, r1
    1318:	aa 1f       	adc	r26, r26
    131a:	64 9f       	mul	r22, r20
    131c:	66 27       	eor	r22, r22
    131e:	b0 0d       	add	r27, r0
    1320:	a1 1d       	adc	r26, r1
    1322:	66 1f       	adc	r22, r22
    1324:	82 9f       	mul	r24, r18
    1326:	22 27       	eor	r18, r18
    1328:	b0 0d       	add	r27, r0
    132a:	a1 1d       	adc	r26, r1
    132c:	62 1f       	adc	r22, r18
    132e:	73 9f       	mul	r23, r19
    1330:	b0 0d       	add	r27, r0
    1332:	a1 1d       	adc	r26, r1
    1334:	62 1f       	adc	r22, r18
    1336:	83 9f       	mul	r24, r19
    1338:	a0 0d       	add	r26, r0
    133a:	61 1d       	adc	r22, r1
    133c:	22 1f       	adc	r18, r18
    133e:	74 9f       	mul	r23, r20
    1340:	33 27       	eor	r19, r19
    1342:	a0 0d       	add	r26, r0
    1344:	61 1d       	adc	r22, r1
    1346:	23 1f       	adc	r18, r19
    1348:	84 9f       	mul	r24, r20
    134a:	60 0d       	add	r22, r0
    134c:	21 1d       	adc	r18, r1
    134e:	82 2f       	mov	r24, r18
    1350:	76 2f       	mov	r23, r22
    1352:	6a 2f       	mov	r22, r26
    1354:	11 24       	eor	r1, r1
    1356:	9f 57       	subi	r25, 0x7F	; 127
    1358:	50 40       	sbci	r21, 0x00	; 0
    135a:	9a f0       	brmi	.+38     	; 0x1382 <__mulsf3_pse+0x88>
    135c:	f1 f0       	breq	.+60     	; 0x139a <__mulsf3_pse+0xa0>
    135e:	88 23       	and	r24, r24
    1360:	4a f0       	brmi	.+18     	; 0x1374 <__mulsf3_pse+0x7a>
    1362:	ee 0f       	add	r30, r30
    1364:	ff 1f       	adc	r31, r31
    1366:	bb 1f       	adc	r27, r27
    1368:	66 1f       	adc	r22, r22
    136a:	77 1f       	adc	r23, r23
    136c:	88 1f       	adc	r24, r24
    136e:	91 50       	subi	r25, 0x01	; 1
    1370:	50 40       	sbci	r21, 0x00	; 0
    1372:	a9 f7       	brne	.-22     	; 0x135e <__mulsf3_pse+0x64>
    1374:	9e 3f       	cpi	r25, 0xFE	; 254
    1376:	51 05       	cpc	r21, r1
    1378:	80 f0       	brcs	.+32     	; 0x139a <__mulsf3_pse+0xa0>
    137a:	0c 94 16 09 	jmp	0x122c	; 0x122c <__fp_inf>
    137e:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__fp_szero>
    1382:	5f 3f       	cpi	r21, 0xFF	; 255
    1384:	e4 f3       	brlt	.-8      	; 0x137e <__mulsf3_pse+0x84>
    1386:	98 3e       	cpi	r25, 0xE8	; 232
    1388:	d4 f3       	brlt	.-12     	; 0x137e <__mulsf3_pse+0x84>
    138a:	86 95       	lsr	r24
    138c:	77 95       	ror	r23
    138e:	67 95       	ror	r22
    1390:	b7 95       	ror	r27
    1392:	f7 95       	ror	r31
    1394:	e7 95       	ror	r30
    1396:	9f 5f       	subi	r25, 0xFF	; 255
    1398:	c1 f7       	brne	.-16     	; 0x138a <__mulsf3_pse+0x90>
    139a:	fe 2b       	or	r31, r30
    139c:	88 0f       	add	r24, r24
    139e:	91 1d       	adc	r25, r1
    13a0:	96 95       	lsr	r25
    13a2:	87 95       	ror	r24
    13a4:	97 f9       	bld	r25, 7
    13a6:	08 95       	ret

000013a8 <_exit>:
    13a8:	f8 94       	cli

000013aa <__stop_program>:
    13aa:	ff cf       	rjmp	.-2      	; 0x13aa <__stop_program>
