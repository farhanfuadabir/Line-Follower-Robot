
LFR_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bcc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00000bcc  00000c60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  0080008a  0080008a  00000c8a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c8a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001485  00000000  00000000  00000e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000542  00000000  00000000  0000230d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ea  00000000  00000000  0000284f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a4  00000000  00000000  0000323c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000067b  00000000  00000000  000035e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b59  00000000  00000000  00003c5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  000047b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__vector_1>
   8:	0c 94 96 03 	jmp	0x72c	; 0x72c <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ec       	ldi	r30, 0xCC	; 204
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e8       	ldi	r26, 0x8A	; 138
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 3b       	cpi	r26, 0xB5	; 181
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 34 03 	call	0x668	; 0x668 <main>
  8a:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <adc_init>:
#include "ADC_routine.h"
#include "serial_lib.h"

void adc_init()
{
	ADMUX |= (1 << REFS0);									    //reference AVcc 5volt
  92:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1 << ADEN);										//enable ADC Module
  94:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);		//prescaler 128
  96:	86 b1       	in	r24, 0x06	; 6
  98:	87 60       	ori	r24, 0x07	; 7
  9a:	86 b9       	out	0x06, r24	; 6
  9c:	08 95       	ret

0000009e <adcRead>:
}

int adcRead(uint8_t channel)
{
	ADMUX  &= ~(0x1F);				//disable all ADC channel
  9e:	97 b1       	in	r25, 0x07	; 7
  a0:	90 7e       	andi	r25, 0xE0	; 224
  a2:	97 b9       	out	0x07, r25	; 7
	ADMUX |= channel;		//set the ADC channel
  a4:	97 b1       	in	r25, 0x07	; 7
  a6:	89 2b       	or	r24, r25
  a8:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);			//start ADC conversion
  aa:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1<<ADSC));		//wait until conversion complete
  ac:	36 99       	sbic	0x06, 6	; 6
  ae:	fe cf       	rjmp	.-4      	; 0xac <adcRead+0xe>
	return ADC;						//return the ADC converted digital value
  b0:	84 b1       	in	r24, 0x04	; 4
  b2:	95 b1       	in	r25, 0x05	; 5
}
  b4:	08 95       	ret

000000b6 <sensorValueConversion>:
	prev_mappedValue = mappedValue;
	if (sensorValue == 0b00000000) mappedValue = prev_mappedValue;
	else if (sensorValue == 0b11111111) mappedValue = 0;
	
	else if ((sensorValue == 0b00011001) || (sensorValue == 0b00001001) || (sensorValue == 0b00010001) || (sensorValue == 0b00110001) || (sensorValue == 0b01110001) || (sensorValue == 0b01100001) || (sensorValue == 0b01100011)) mappedValue = 120;
	else if ((sensorValue == 0b00001011) || (sensorValue == 0b00010011) || (sensorValue == 0b00011011) || (sensorValue == 0b00001010) || (sensorValue == 0b00010010) || (sensorValue == 0b01110111) || (sensorValue == 0b01110011) || (sensorValue == 0b00110111) || (sensorValue == 0b00011101) || (sensorValue == 0b01100111) || (sensorValue == 0b00001101) || (sensorValue == 0b00111001) || (sensorValue == 0b00110011)) mappedValue = 120;
  b6:	4f 92       	push	r4
  b8:	5f 92       	push	r5
  ba:	6f 92       	push	r6
  bc:	7f 92       	push	r7
  be:	8f 92       	push	r8
  c0:	9f 92       	push	r9
  c2:	af 92       	push	r10
  c4:	bf 92       	push	r11
  c6:	cf 92       	push	r12
  c8:	df 92       	push	r13
  ca:	ef 92       	push	r14
  cc:	ff 92       	push	r15
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	10 92 b4 00 	sts	0x00B4, r1
  da:	10 92 b3 00 	sts	0x00B3, r1
  de:	10 92 98 00 	sts	0x0098, r1
  e2:	10 92 97 00 	sts	0x0097, r1
  e6:	10 92 94 00 	sts	0x0094, r1
  ea:	10 92 9b 00 	sts	0x009B, r1
  ee:	80 91 8f 00 	lds	r24, 0x008F
  f2:	81 11       	cpse	r24, r1
  f4:	6b c0       	rjmp	.+214    	; 0x1cc <sensorValueConversion+0x116>
  f6:	0f 2e       	mov	r0, r31
  f8:	f9 e8       	ldi	r31, 0x89	; 137
  fa:	ef 2e       	mov	r14, r31
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	ff 2e       	mov	r15, r31
 100:	f0 2d       	mov	r31, r0
 102:	c7 e0       	ldi	r28, 0x07	; 7
 104:	d6 e4       	ldi	r29, 0x46	; 70
 106:	00 e0       	ldi	r16, 0x00	; 0
 108:	10 e0       	ldi	r17, 0x00	; 0
 10a:	a1 2c       	mov	r10, r1
 10c:	c1 2c       	mov	r12, r1
 10e:	b1 2c       	mov	r11, r1
 110:	0f 2e       	mov	r0, r31
 112:	f7 e0       	ldi	r31, 0x07	; 7
 114:	df 2e       	mov	r13, r31
 116:	f0 2d       	mov	r31, r0
 118:	61 2c       	mov	r6, r1
 11a:	71 2c       	mov	r7, r1
 11c:	88 24       	eor	r8, r8
 11e:	83 94       	inc	r8
 120:	91 2c       	mov	r9, r1
 122:	55 24       	eor	r5, r5
 124:	53 94       	inc	r5
 126:	0f 2e       	mov	r0, r31
 128:	fa e0       	ldi	r31, 0x0A	; 10
 12a:	4f 2e       	mov	r4, r31
 12c:	f0 2d       	mov	r31, r0
 12e:	8d 2d       	mov	r24, r13
 130:	80 1b       	sub	r24, r16
 132:	0e 94 4f 00 	call	0x9e	; 0x9e <adcRead>
 136:	f7 01       	movw	r30, r14
 138:	32 91       	ld	r19, -Z
 13a:	22 91       	ld	r18, -Z
 13c:	7f 01       	movw	r14, r30
 13e:	28 17       	cp	r18, r24
 140:	39 07       	cpc	r19, r25
 142:	38 f1       	brcs	.+78     	; 0x192 <sensorValueConversion+0xdc>
 144:	cc 23       	and	r28, r28
 146:	34 f4       	brge	.+12     	; 0x154 <sensorValueConversion+0x9e>
 148:	84 2d       	mov	r24, r4
 14a:	8c 1b       	sub	r24, r28
 14c:	c8 9f       	mul	r28, r24
 14e:	80 2d       	mov	r24, r0
 150:	11 24       	eor	r1, r1
 152:	05 c0       	rjmp	.+10     	; 0x15e <sensorValueConversion+0xa8>
 154:	8a e0       	ldi	r24, 0x0A	; 10
 156:	8c 0f       	add	r24, r28
 158:	c8 9f       	mul	r28, r24
 15a:	80 2d       	mov	r24, r0
 15c:	11 24       	eor	r1, r1
 15e:	cd 2e       	mov	r12, r29
 160:	20 91 97 00 	lds	r18, 0x0097
	else if ((sensorValue == 0b00000111) || (sensorValue == 0b00001111) || (sensorValue == 0b00011111 || sensorValue == 0b00111111)) mappedValue = 100;
 164:	30 91 98 00 	lds	r19, 0x0098
 168:	a9 01       	movw	r20, r18
 16a:	48 0f       	add	r20, r24
 16c:	51 1d       	adc	r21, r1
 16e:	87 fd       	sbrc	r24, 7
 170:	5a 95       	dec	r21
 172:	50 93 98 00 	sts	0x0098, r21
 176:	40 93 97 00 	sts	0x0097, r20
 17a:	80 91 94 00 	lds	r24, 0x0094
 17e:	8f 5f       	subi	r24, 0xFF	; 255
 180:	80 93 94 00 	sts	0x0094, r24
 184:	a1 10       	cpse	r10, r1
 186:	08 c0       	rjmp	.+16     	; 0x198 <sensorValueConversion+0xe2>
 188:	bd 2e       	mov	r11, r29
 18a:	a5 2c       	mov	r10, r5
 18c:	88 2d       	mov	r24, r8
 18e:	99 2d       	mov	r25, r9
 190:	05 c0       	rjmp	.+10     	; 0x19c <sensorValueConversion+0xe6>
 192:	86 2d       	mov	r24, r6
 194:	97 2d       	mov	r25, r7
 196:	02 c0       	rjmp	.+4      	; 0x19c <sensorValueConversion+0xe6>
 198:	88 2d       	mov	r24, r8
 19a:	99 2d       	mov	r25, r9
 19c:	20 91 b3 00 	lds	r18, 0x00B3
 1a0:	30 91 b4 00 	lds	r19, 0x00B4
	else if (sensorValue == 0b00000001) mappedValue = 70;
 1a4:	00 2e       	mov	r0, r16
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <sensorValueConversion+0xf6>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	0a 94       	dec	r0
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <sensorValueConversion+0xf2>
 1b0:	82 2b       	or	r24, r18
 1b2:	93 2b       	or	r25, r19
 1b4:	90 93 b4 00 	sts	0x00B4, r25
 1b8:	80 93 b3 00 	sts	0x00B3, r24
	else if (sensorValue == 0b00000011) mappedValue = 60;
 1bc:	0f 5f       	subi	r16, 0xFF	; 255
 1be:	1f 4f       	sbci	r17, 0xFF	; 255
 1c0:	d4 51       	subi	r29, 0x14	; 20
 1c2:	c2 50       	subi	r28, 0x02	; 2
 1c4:	c7 3f       	cpi	r28, 0xF7	; 247
 1c6:	09 f0       	breq	.+2      	; 0x1ca <sensorValueConversion+0x114>
 1c8:	b2 cf       	rjmp	.-156    	; 0x12e <sensorValueConversion+0x78>
 1ca:	70 c0       	rjmp	.+224    	; 0x2ac <sensorValueConversion+0x1f6>
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	09 f0       	breq	.+2      	; 0x1d2 <sensorValueConversion+0x11c>
 1d0:	6b c0       	rjmp	.+214    	; 0x2a8 <sensorValueConversion+0x1f2>
 1d2:	0f 2e       	mov	r0, r31
 1d4:	f9 e7       	ldi	r31, 0x79	; 121
	else if (sensorValue == 0b00000010 || sensorValue == 0b11111101) mappedValue = 30;
 1d6:	ef 2e       	mov	r14, r31
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	ff 2e       	mov	r15, r31
 1dc:	f0 2d       	mov	r31, r0
 1de:	c7 e0       	ldi	r28, 0x07	; 7
 1e0:	d6 e4       	ldi	r29, 0x46	; 70
 1e2:	00 e0       	ldi	r16, 0x00	; 0
 1e4:	10 e0       	ldi	r17, 0x00	; 0
 1e6:	a1 2c       	mov	r10, r1
 1e8:	c1 2c       	mov	r12, r1
 1ea:	b1 2c       	mov	r11, r1
 1ec:	0f 2e       	mov	r0, r31
 1ee:	f7 e0       	ldi	r31, 0x07	; 7
 1f0:	df 2e       	mov	r13, r31
 1f2:	f0 2d       	mov	r31, r0
 1f4:	61 2c       	mov	r6, r1
 1f6:	71 2c       	mov	r7, r1
 1f8:	88 24       	eor	r8, r8
 1fa:	83 94       	inc	r8
 1fc:	91 2c       	mov	r9, r1
	else if (sensorValue == 0b00000110 || sensorValue == 0b11111001) mappedValue = 20;
 1fe:	55 24       	eor	r5, r5
 200:	53 94       	inc	r5
 202:	0f 2e       	mov	r0, r31
 204:	fa e0       	ldi	r31, 0x0A	; 10
 206:	4f 2e       	mov	r4, r31
 208:	f0 2d       	mov	r31, r0
 20a:	8d 2d       	mov	r24, r13
 20c:	80 1b       	sub	r24, r16
 20e:	0e 94 4f 00 	call	0x9e	; 0x9e <adcRead>
 212:	f7 01       	movw	r30, r14
 214:	32 91       	ld	r19, -Z
 216:	22 91       	ld	r18, -Z
 218:	7f 01       	movw	r14, r30
 21a:	82 17       	cp	r24, r18
 21c:	93 07       	cpc	r25, r19
 21e:	38 f1       	brcs	.+78     	; 0x26e <sensorValueConversion+0x1b8>
 220:	cc 23       	and	r28, r28
 222:	34 f4       	brge	.+12     	; 0x230 <sensorValueConversion+0x17a>
 224:	84 2d       	mov	r24, r4
	else if (sensorValue == 0b00000100 || sensorValue == 0b00001110) mappedValue = 15;
 226:	8c 1b       	sub	r24, r28
 228:	8c 9f       	mul	r24, r28
 22a:	80 2d       	mov	r24, r0
 22c:	11 24       	eor	r1, r1
 22e:	05 c0       	rjmp	.+10     	; 0x23a <sensorValueConversion+0x184>
 230:	8a e0       	ldi	r24, 0x0A	; 10
 232:	8c 0f       	add	r24, r28
 234:	8c 9f       	mul	r24, r28
 236:	80 2d       	mov	r24, r0
 238:	11 24       	eor	r1, r1
 23a:	cd 2e       	mov	r12, r29
 23c:	20 91 97 00 	lds	r18, 0x0097
 240:	30 91 98 00 	lds	r19, 0x0098
 244:	a9 01       	movw	r20, r18
 246:	48 0f       	add	r20, r24
 248:	51 1d       	adc	r21, r1
 24a:	87 fd       	sbrc	r24, 7
	else if (sensorValue == 0b11111011)
 24c:	5a 95       	dec	r21
 24e:	50 93 98 00 	sts	0x0098, r21
 252:	40 93 97 00 	sts	0x0097, r20
 256:	80 91 94 00 	lds	r24, 0x0094
	{
		mappedValue = 15;
 25a:	8f 5f       	subi	r24, 0xFF	; 255
 25c:	80 93 94 00 	sts	0x0094, r24
 260:	a1 10       	cpse	r10, r1
 262:	08 c0       	rjmp	.+16     	; 0x274 <sensorValueConversion+0x1be>
 264:	bd 2e       	mov	r11, r29
		if (reverseFlag == 0)
 266:	a5 2c       	mov	r10, r5
 268:	88 2d       	mov	r24, r8
 26a:	99 2d       	mov	r25, r9
 26c:	05 c0       	rjmp	.+10     	; 0x278 <sensorValueConversion+0x1c2>
		{
			inverseLevel++;
 26e:	86 2d       	mov	r24, r6
 270:	97 2d       	mov	r25, r7
 272:	02 c0       	rjmp	.+4      	; 0x278 <sensorValueConversion+0x1c2>
 274:	88 2d       	mov	r24, r8
 276:	99 2d       	mov	r25, r9
 278:	20 91 b3 00 	lds	r18, 0x00B3
		}
		
	}
	else if (sensorValue == 0b00001100) mappedValue = 10;
 27c:	30 91 b4 00 	lds	r19, 0x00B4
 280:	00 2e       	mov	r0, r16
 282:	02 c0       	rjmp	.+4      	; 0x288 <sensorValueConversion+0x1d2>
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	0a 94       	dec	r0
 28a:	e2 f7       	brpl	.-8      	; 0x284 <sensorValueConversion+0x1ce>
 28c:	82 2b       	or	r24, r18
 28e:	93 2b       	or	r25, r19
 290:	90 93 b4 00 	sts	0x00B4, r25
	else if (sensorValue == 0b11110011)
 294:	80 93 b3 00 	sts	0x00B3, r24
 298:	0f 5f       	subi	r16, 0xFF	; 255
 29a:	1f 4f       	sbci	r17, 0xFF	; 255
 29c:	d4 51       	subi	r29, 0x14	; 20
 29e:	c2 50       	subi	r28, 0x02	; 2
 2a0:	c7 3f       	cpi	r28, 0xF7	; 247
	{
		mappedValue = 10;
 2a2:	09 f0       	breq	.+2      	; 0x2a6 <sensorValueConversion+0x1f0>
 2a4:	b2 cf       	rjmp	.-156    	; 0x20a <sensorValueConversion+0x154>
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <sensorValueConversion+0x1f6>
 2a8:	c1 2c       	mov	r12, r1
 2aa:	b1 2c       	mov	r11, r1
 2ac:	80 91 b3 00 	lds	r24, 0x00B3
		if (reverseFlag == 0)
 2b0:	90 91 b4 00 	lds	r25, 0x00B4
 2b4:	89 2b       	or	r24, r25
		{
			inverseLevel++;
 2b6:	b1 f4       	brne	.+44     	; 0x2e4 <sensorValueConversion+0x22e>
 2b8:	80 91 91 00 	lds	r24, 0x0091
 2bc:	80 51       	subi	r24, 0x10	; 16
 2be:	84 35       	cpi	r24, 0x54	; 84
 2c0:	30 f4       	brcc	.+12     	; 0x2ce <sensorValueConversion+0x218>
		}
	}
	else if (sensorValue == 0b00001000 || sensorValue == 0b00011100) mappedValue = 5;
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	80 93 8e 00 	sts	0x008E, r24
 2c8:	8a e0       	ldi	r24, 0x0A	; 10
 2ca:	80 93 9a 00 	sts	0x009A, r24
 2ce:	10 92 91 00 	sts	0x0091, r1
 2d2:	80 91 95 00 	lds	r24, 0x0095
 2d6:	90 91 96 00 	lds	r25, 0x0096
 2da:	90 93 98 00 	sts	0x0098, r25
 2de:	80 93 97 00 	sts	0x0097, r24
 2e2:	5f c0       	rjmp	.+190    	; 0x3a2 <sensorValueConversion+0x2ec>
 2e4:	80 91 b3 00 	lds	r24, 0x00B3
	else if (sensorValue == 0b11110111)
 2e8:	90 91 b4 00 	lds	r25, 0x00B4
 2ec:	8f 3f       	cpi	r24, 0xFF	; 255
 2ee:	91 05       	cpc	r25, r1
 2f0:	81 f4       	brne	.+32     	; 0x312 <sensorValueConversion+0x25c>
 2f2:	80 91 90 00 	lds	r24, 0x0090
	{
		mappedValue = 5;
 2f6:	81 11       	cpse	r24, r1
 2f8:	05 c0       	rjmp	.+10     	; 0x304 <sensorValueConversion+0x24e>
 2fa:	80 91 91 00 	lds	r24, 0x0091
 2fe:	8f 5f       	subi	r24, 0xFF	; 255
 300:	80 93 91 00 	sts	0x0091, r24
		if (reverseFlag == 0)
 304:	10 92 98 00 	sts	0x0098, r1
 308:	10 92 97 00 	sts	0x0097, r1
		{
			inverseLevel++;
 30c:	10 92 9b 00 	sts	0x009B, r1
 310:	4c c0       	rjmp	.+152    	; 0x3aa <sensorValueConversion+0x2f4>
 312:	80 91 91 00 	lds	r24, 0x0091
		}
	}
	else if (sensorValue == 0b00011000 /*|| sensorValue == 0b11101110 || sensorValue == 0b01110111 || sensorValue == 0b01100110 || sensorValue == 0b10011001 || sensorValue == 0b00110111 || sensorValue == 0b11101100*/) mappedValue = 0;
 316:	80 51       	subi	r24, 0x10	; 16
 318:	84 35       	cpi	r24, 0x54	; 84
 31a:	30 f4       	brcc	.+12     	; 0x328 <sensorValueConversion+0x272>
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	80 93 8e 00 	sts	0x008E, r24
 322:	8a e0       	ldi	r24, 0x0A	; 10
 324:	80 93 9a 00 	sts	0x009A, r24
 328:	10 92 91 00 	sts	0x0091, r1
	else if (sensorValue == 0b11100111)
 32c:	2b 2d       	mov	r18, r11
 32e:	2c 19       	sub	r18, r12
 330:	30 91 94 00 	lds	r19, 0x0094
 334:	63 2f       	mov	r22, r19
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	80 91 97 00 	lds	r24, 0x0097
	{
		mappedValue = 0;
 33c:	90 91 98 00 	lds	r25, 0x0098
 340:	0e 94 bc 05 	call	0xb78	; 0xb78 <__divmodhi4>
		if (reverseFlag == 0)
 344:	70 93 98 00 	sts	0x0098, r23
 348:	60 93 97 00 	sts	0x0097, r22
		{
			inverseLevel++;
 34c:	70 93 96 00 	sts	0x0096, r23
 350:	60 93 95 00 	sts	0x0095, r22
 354:	84 ec       	ldi	r24, 0xC4	; 196
		}
	}
	else if (sensorValue == 0b11101110 || sensorValue == 0b01110111 || sensorValue == 0b01100110 || sensorValue == 0b10011001 || sensorValue == 0b01111110 || sensorValue == 0b00111100 || sensorValue == 0b01111100 || sensorValue == 0b00111110 || sensorValue == 0b01110111 || sensorValue == 0b11101110)  mappedValue = .5;
 356:	82 0f       	add	r24, r18
 358:	89 32       	cpi	r24, 0x29	; 41
 35a:	18 f5       	brcc	.+70     	; 0x3a2 <sensorValueConversion+0x2ec>
 35c:	87 e6       	ldi	r24, 0x67	; 103
 35e:	28 02       	muls	r18, r24
 360:	81 2d       	mov	r24, r1
 362:	11 24       	eor	r1, r1
 364:	85 95       	asr	r24
 366:	85 95       	asr	r24
 368:	85 95       	asr	r24
 36a:	27 fd       	sbrc	r18, 7
 36c:	83 95       	inc	r24
 36e:	83 1b       	sub	r24, r19
 370:	8f 3f       	cpi	r24, 0xFF	; 255
 372:	59 f4       	brne	.+22     	; 0x38a <sensorValueConversion+0x2d4>
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	80 93 9b 00 	sts	0x009B, r24
 37a:	80 91 9a 00 	lds	r24, 0x009A
 37e:	8f 5f       	subi	r24, 0xFF	; 255
 380:	80 93 9a 00 	sts	0x009A, r24
 384:	10 92 99 00 	sts	0x0099, r1
 388:	0c c0       	rjmp	.+24     	; 0x3a2 <sensorValueConversion+0x2ec>
 38a:	83 30       	cpi	r24, 0x03	; 3
 38c:	50 f4       	brcc	.+20     	; 0x3a2 <sensorValueConversion+0x2ec>
 38e:	82 e0       	ldi	r24, 0x02	; 2
 390:	80 93 9b 00 	sts	0x009B, r24
 394:	10 92 9a 00 	sts	0x009A, r1
 398:	80 91 99 00 	lds	r24, 0x0099
 39c:	8f 5f       	subi	r24, 0xFF	; 255
 39e:	80 93 99 00 	sts	0x0099, r24
 3a2:	80 91 9b 00 	lds	r24, 0x009B
 3a6:	81 11       	cpse	r24, r1
 3a8:	04 c0       	rjmp	.+8      	; 0x3b2 <sensorValueConversion+0x2fc>
 3aa:	10 92 9a 00 	sts	0x009A, r1
 3ae:	10 92 99 00 	sts	0x0099, r1
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	1f 91       	pop	r17
 3b8:	0f 91       	pop	r16
 3ba:	ff 90       	pop	r15
 3bc:	ef 90       	pop	r14
 3be:	df 90       	pop	r13
 3c0:	cf 90       	pop	r12
 3c2:	bf 90       	pop	r11
 3c4:	af 90       	pop	r10
 3c6:	9f 90       	pop	r9
 3c8:	8f 90       	pop	r8
 3ca:	7f 90       	pop	r7
 3cc:	6f 90       	pop	r6
 3ce:	5f 90       	pop	r5
 3d0:	4f 90       	pop	r4
 3d2:	08 95       	ret

000003d4 <setRotationForward>:
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 0c 04 	call	0x818	; 0x818 <PWM0>
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 0e 04 	call	0x81c	; 0x81c <PWM2>
 3e4:	af 9a       	sbi	0x15, 7	; 21
 3e6:	ae 98       	cbi	0x15, 6	; 21
	else if (sensorValue == 0b00010000 || sensorValue == 0b00111000) mappedValue = -5;
 3e8:	ad 9a       	sbi	0x15, 5	; 21
 3ea:	ac 98       	cbi	0x15, 4	; 21
 3ec:	08 95       	ret

000003ee <setRotationLeftSharp>:
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0e 94 0c 04 	call	0x818	; 0x818 <PWM0>
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	0e 94 0e 04 	call	0x81c	; 0x81c <PWM2>
 3fe:	af 98       	cbi	0x15, 7	; 21
 400:	ae 9a       	sbi	0x15, 6	; 21
 402:	ad 9a       	sbi	0x15, 5	; 21
 404:	ac 98       	cbi	0x15, 4	; 21
 406:	08 95       	ret

00000408 <setRotationRightSharp>:
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	0e 94 0c 04 	call	0x818	; 0x818 <PWM0>
	else if (sensorValue == 0b11101111)
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	0e 94 0e 04 	call	0x81c	; 0x81c <PWM2>
 418:	af 9a       	sbi	0x15, 7	; 21
 41a:	ae 98       	cbi	0x15, 6	; 21
	{
		mappedValue = -5;
 41c:	ad 98       	cbi	0x15, 5	; 21
 41e:	ac 9a       	sbi	0x15, 4	; 21
 420:	08 95       	ret

00000422 <PID_Correction>:
 422:	8f 92       	push	r8
 424:	9f 92       	push	r9
 426:	af 92       	push	r10
		if (reverseFlag == 0)
 428:	bf 92       	push	r11
 42a:	cf 92       	push	r12
 42c:	df 92       	push	r13
 42e:	ef 92       	push	r14
		{
			inverseLevel++;
 430:	ff 92       	push	r15
 432:	1f 93       	push	r17
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	90 91 97 00 	lds	r25, 0x0097
		}
	}
	else if (sensorValue == 0b00110000) mappedValue = -10;
 43c:	89 2f       	mov	r24, r25
 43e:	81 95       	neg	r24
 440:	80 93 a8 00 	sts	0x00A8, r24
 444:	88 e2       	ldi	r24, 0x28	; 40
 446:	89 1b       	sub	r24, r25
 448:	81 35       	cpi	r24, 0x51	; 81
 44a:	80 f4       	brcc	.+32     	; 0x46c <PID_Correction+0x4a>
 44c:	80 91 92 00 	lds	r24, 0x0092
 450:	90 91 93 00 	lds	r25, 0x0093
 454:	01 96       	adiw	r24, 0x01	; 1
	else if (sensorValue == 0b11001111)
 456:	90 93 93 00 	sts	0x0093, r25
 45a:	80 93 92 00 	sts	0x0092, r24
 45e:	85 3f       	cpi	r24, 0xF5	; 245
 460:	91 40       	sbci	r25, 0x01	; 1
 462:	58 f0       	brcs	.+22     	; 0x47a <PID_Correction+0x58>
	{
		mappedValue = -10;
 464:	86 ee       	ldi	r24, 0xE6	; 230
 466:	80 93 68 00 	sts	0x0068, r24
 46a:	07 c0       	rjmp	.+14     	; 0x47a <PID_Correction+0x58>
 46c:	10 92 93 00 	sts	0x0093, r1
		if (reverseFlag == 0)
 470:	10 92 92 00 	sts	0x0092, r1
 474:	88 ec       	ldi	r24, 0xC8	; 200
 476:	80 93 68 00 	sts	0x0068, r24
		{
			inverseLevel++;
 47a:	10 91 a8 00 	lds	r17, 0x00A8
 47e:	c1 2f       	mov	r28, r17
 480:	01 2e       	mov	r0, r17
 482:	00 0c       	add	r0, r0
		}
	}
	else if (sensorValue == 0b00100000 || sensorValue == 0b01110000) mappedValue = -15;
 484:	dd 0b       	sbc	r29, r29
 486:	60 91 a5 00 	lds	r22, 0x00A5
 48a:	70 91 a6 00 	lds	r23, 0x00A6
 48e:	6c 0f       	add	r22, r28
 490:	7d 1f       	adc	r23, r29
 492:	77 23       	and	r23, r23
 494:	14 f4       	brge	.+4      	; 0x49a <PID_Correction+0x78>
 496:	6f 5f       	subi	r22, 0xFF	; 255
 498:	7f 4f       	sbci	r23, 0xFF	; 255
 49a:	7b 01       	movw	r14, r22
 49c:	f5 94       	asr	r15
 49e:	e7 94       	ror	r14
 4a0:	f0 92 a6 00 	sts	0x00A6, r15
 4a4:	e0 92 a5 00 	sts	0x00A5, r14
 4a8:	61 2f       	mov	r22, r17
 4aa:	01 2e       	mov	r0, r17
	else if (sensorValue == 0b11011111)
 4ac:	00 0c       	add	r0, r0
 4ae:	77 0b       	sbc	r23, r23
 4b0:	88 0b       	sbc	r24, r24
 4b2:	99 0b       	sbc	r25, r25
 4b4:	0e 94 c3 04 	call	0x986	; 0x986 <__floatsisf>
 4b8:	20 91 64 00 	lds	r18, 0x0064
	{
		mappedValue = -15;
 4bc:	30 91 65 00 	lds	r19, 0x0065
 4c0:	40 91 66 00 	lds	r20, 0x0066
 4c4:	50 91 67 00 	lds	r21, 0x0067
		if (reverseFlag == 0)
 4c8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__mulsf3>
 4cc:	4b 01       	movw	r8, r22
		{
			inverseLevel++;
 4ce:	5c 01       	movw	r10, r24
 4d0:	b7 01       	movw	r22, r14
 4d2:	ff 0c       	add	r15, r15
 4d4:	88 0b       	sbc	r24, r24
 4d6:	99 0b       	sbc	r25, r25
 4d8:	0e 94 c3 04 	call	0x986	; 0x986 <__floatsisf>
		}
	}
	else if (sensorValue == 0b01100000 || sensorValue == 0b10011111) mappedValue = -20;
 4dc:	20 91 8a 00 	lds	r18, 0x008A
 4e0:	30 91 8b 00 	lds	r19, 0x008B
 4e4:	40 91 8c 00 	lds	r20, 0x008C
 4e8:	50 91 8d 00 	lds	r21, 0x008D
 4ec:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__mulsf3>
 4f0:	9b 01       	movw	r18, r22
 4f2:	ac 01       	movw	r20, r24
 4f4:	c5 01       	movw	r24, r10
 4f6:	b4 01       	movw	r22, r8
 4f8:	0e 94 1f 04 	call	0x83e	; 0x83e <__addsf3>
 4fc:	6b 01       	movw	r12, r22
 4fe:	7c 01       	movw	r14, r24
 500:	80 91 a7 00 	lds	r24, 0x00A7
	else if (sensorValue == 0b01000000 || sensorValue == 0b10111111) mappedValue = -30;
 504:	9e 01       	movw	r18, r28
 506:	28 1b       	sub	r18, r24
 508:	31 09       	sbc	r19, r1
 50a:	87 fd       	sbrc	r24, 7
 50c:	33 95       	inc	r19
 50e:	b9 01       	movw	r22, r18
 510:	33 0f       	add	r19, r19
 512:	88 0b       	sbc	r24, r24
 514:	99 0b       	sbc	r25, r25
 516:	0e 94 c3 04 	call	0x986	; 0x986 <__floatsisf>
 51a:	20 91 60 00 	lds	r18, 0x0060
 51e:	30 91 61 00 	lds	r19, 0x0061
 522:	40 91 62 00 	lds	r20, 0x0062
 526:	50 91 63 00 	lds	r21, 0x0063
 52a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__mulsf3>
	else if (sensorValue == 0b11000000) mappedValue = -60;
 52e:	9b 01       	movw	r18, r22
 530:	ac 01       	movw	r20, r24
 532:	c7 01       	movw	r24, r14
 534:	b6 01       	movw	r22, r12
 536:	0e 94 1f 04 	call	0x83e	; 0x83e <__addsf3>
 53a:	60 93 a1 00 	sts	0x00A1, r22
 53e:	70 93 a2 00 	sts	0x00A2, r23
 542:	80 93 a3 00 	sts	0x00A3, r24
 546:	90 93 a4 00 	sts	0x00A4, r25
	else if (sensorValue == 0b10000000) mappedValue = -70;
 54a:	10 93 a7 00 	sts	0x00A7, r17
 54e:	0e 94 8b 04 	call	0x916	; 0x916 <__fixsfsi>
 552:	86 2f       	mov	r24, r22
 554:	97 2f       	mov	r25, r23
 556:	26 2f       	mov	r18, r22
 558:	37 2f       	mov	r19, r23
 55a:	30 93 a0 00 	sts	0x00A0, r19
 55e:	20 93 9f 00 	sts	0x009F, r18
 562:	20 91 68 00 	lds	r18, 0x0068
	else if ((sensorValue == 0b11100000) || (sensorValue == 0b11110000) || (sensorValue == 0b11111000 || sensorValue == 0b11111100)) mappedValue = -100;
 566:	42 2f       	mov	r20, r18
 568:	50 e0       	ldi	r21, 0x00	; 0
 56a:	48 17       	cp	r20, r24
 56c:	59 07       	cpc	r21, r25
 56e:	bc f4       	brge	.+46     	; 0x59e <PID_Correction+0x17c>
 570:	62 1b       	sub	r22, r18
 572:	26 17       	cp	r18, r22
 574:	18 f0       	brcs	.+6      	; 0x57c <PID_Correction+0x15a>
 576:	60 93 9c 00 	sts	0x009C, r22
 57a:	02 c0       	rjmp	.+4      	; 0x580 <PID_Correction+0x15e>
 57c:	20 93 9c 00 	sts	0x009C, r18
 580:	50 93 a0 00 	sts	0x00A0, r21
 584:	40 93 9f 00 	sts	0x009F, r20
 588:	0e 94 f7 01 	call	0x3ee	; 0x3ee <setRotationLeftSharp>
 58c:	80 91 9c 00 	lds	r24, 0x009C
 590:	80 93 9e 00 	sts	0x009E, r24
 594:	80 91 68 00 	lds	r24, 0x0068
 598:	80 93 9d 00 	sts	0x009D, r24
 59c:	42 c0       	rjmp	.+132    	; 0x622 <PID_Correction+0x200>
 59e:	ee 27       	eor	r30, r30
 5a0:	ff 27       	eor	r31, r31
 5a2:	e4 1b       	sub	r30, r20
 5a4:	f5 0b       	sbc	r31, r21
 5a6:	8e 17       	cp	r24, r30
 5a8:	9f 07       	cpc	r25, r31
 5aa:	c4 f4       	brge	.+48     	; 0x5dc <PID_Correction+0x1ba>
	else if ((sensorValue == 0b11011000) || (sensorValue == 0b11010000) || (sensorValue == 0b11001000) || (sensorValue == 0b01010000) || (sensorValue == 0b01001000) || (sensorValue == 0b11101110) || (sensorValue == 0b11001110) || (sensorValue == 0b11101100) || (sensorValue == 0b10111000) || (sensorValue == 0b11100110) || (sensorValue == 0b10110000) || (sensorValue == 0b10011100) || (sensorValue == 0b11001100)) mappedValue = -120;
 5ac:	62 0f       	add	r22, r18
 5ae:	61 95       	neg	r22
 5b0:	26 17       	cp	r18, r22
 5b2:	18 f0       	brcs	.+6      	; 0x5ba <PID_Correction+0x198>
 5b4:	60 93 9c 00 	sts	0x009C, r22
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <PID_Correction+0x19c>
 5ba:	20 93 9c 00 	sts	0x009C, r18
 5be:	f0 93 a0 00 	sts	0x00A0, r31
 5c2:	e0 93 9f 00 	sts	0x009F, r30
 5c6:	0e 94 04 02 	call	0x408	; 0x408 <setRotationRightSharp>
 5ca:	80 91 68 00 	lds	r24, 0x0068
 5ce:	80 93 9e 00 	sts	0x009E, r24
 5d2:	80 91 9c 00 	lds	r24, 0x009C
 5d6:	80 93 9d 00 	sts	0x009D, r24
 5da:	23 c0       	rjmp	.+70     	; 0x622 <PID_Correction+0x200>
 5dc:	99 23       	and	r25, r25
 5de:	7c f4       	brge	.+30     	; 0x5fe <PID_Correction+0x1dc>
 5e0:	e8 17       	cp	r30, r24
 5e2:	f9 07       	cpc	r31, r25
 5e4:	64 f4       	brge	.+24     	; 0x5fe <PID_Correction+0x1dc>
 5e6:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <setRotationForward>
 5ea:	80 91 68 00 	lds	r24, 0x0068
 5ee:	80 93 9e 00 	sts	0x009E, r24
 5f2:	90 91 9f 00 	lds	r25, 0x009F
 5f6:	89 0f       	add	r24, r25
 5f8:	80 93 9d 00 	sts	0x009D, r24
 5fc:	12 c0       	rjmp	.+36     	; 0x622 <PID_Correction+0x200>
 5fe:	18 16       	cp	r1, r24
 600:	19 06       	cpc	r1, r25
 602:	7c f4       	brge	.+30     	; 0x622 <PID_Correction+0x200>
 604:	84 17       	cp	r24, r20
 606:	95 07       	cpc	r25, r21
 608:	64 f4       	brge	.+24     	; 0x622 <PID_Correction+0x200>
 60a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <setRotationForward>
 60e:	80 91 68 00 	lds	r24, 0x0068
 612:	90 91 9f 00 	lds	r25, 0x009F
 616:	38 2f       	mov	r19, r24
 618:	39 1b       	sub	r19, r25
 61a:	30 93 9e 00 	sts	0x009E, r19
 61e:	80 93 9d 00 	sts	0x009D, r24
 622:	df 91       	pop	r29
 624:	cf 91       	pop	r28
 626:	1f 91       	pop	r17
 628:	ff 90       	pop	r15
 62a:	ef 90       	pop	r14
 62c:	df 90       	pop	r13
 62e:	cf 90       	pop	r12
 630:	bf 90       	pop	r11
 632:	af 90       	pop	r10
 634:	9f 90       	pop	r9
 636:	8f 90       	pop	r8
 638:	08 95       	ret

0000063a <Forward>:
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	0e 94 0c 04 	call	0x818	; 0x818 <PWM0>
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	0e 94 0e 04 	call	0x81c	; 0x81c <PWM2>
 64a:	af 9a       	sbi	0x15, 7	; 21
 64c:	ae 98       	cbi	0x15, 6	; 21
 64e:	ad 9a       	sbi	0x15, 5	; 21
 650:	ac 98       	cbi	0x15, 4	; 21
 652:	80 91 68 00 	lds	r24, 0x0068
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	0e 94 0c 04 	call	0x818	; 0x818 <PWM0>
 65c:	80 91 68 00 	lds	r24, 0x0068
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	0e 94 0e 04 	call	0x81c	; 0x81c <PWM2>
 666:	08 95       	ret

00000668 <main>:
 668:	8c 9a       	sbi	0x11, 4	; 17
 66a:	8d 9a       	sbi	0x11, 5	; 17
 66c:	8b 98       	cbi	0x11, 3	; 17
 66e:	8a 98       	cbi	0x11, 2	; 17
 670:	a7 9a       	sbi	0x14, 7	; 20
 672:	a6 9a       	sbi	0x14, 6	; 20
 674:	a5 9a       	sbi	0x14, 5	; 20
 676:	a4 9a       	sbi	0x14, 4	; 20
	else if ((sensorValue == 0b10011000) || (sensorValue == 0b10010000) || (sensorValue == 0b10001000) || (sensorValue == 0b10001100) || (sensorValue == 0b10001110) || (sensorValue == 0b10000110) || (sensorValue == 0b11000110)) mappedValue = -120;
 678:	8f 9a       	sbi	0x11, 7	; 17
 67a:	bb 9a       	sbi	0x17, 3	; 23
 67c:	0e 94 49 00 	call	0x92	; 0x92 <adc_init>
 680:	0e 94 10 04 	call	0x820	; 0x820 <UART_init>
 684:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <PWM0_init>
 688:	0e 94 02 04 	call	0x804	; 0x804 <PWM2_init>
 68c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <setRotationForward>
 690:	0e 94 1d 03 	call	0x63a	; 0x63a <Forward>
 694:	80 91 68 00 	lds	r24, 0x0068
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	0e 94 0c 04 	call	0x818	; 0x818 <PWM0>
 69e:	80 91 68 00 	lds	r24, 0x0068
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	0e 94 0e 04 	call	0x81c	; 0x81c <PWM2>
 6a8:	0e 94 5b 00 	call	0xb6	; 0xb6 <sensorValueConversion>
 6ac:	0e 94 11 02 	call	0x422	; 0x422 <PID_Correction>
 6b0:	80 91 9e 00 	lds	r24, 0x009E
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	0e 94 0c 04 	call	0x818	; 0x818 <PWM0>
 6ba:	80 91 9d 00 	lds	r24, 0x009D
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	0e 94 0e 04 	call	0x81c	; 0x81c <PWM2>
 6c4:	f1 cf       	rjmp	.-30     	; 0x6a8 <main+0x40>

000006c6 <__vector_1>:
 6c6:	1f 92       	push	r1
 6c8:	0f 92       	push	r0
 6ca:	0f b6       	in	r0, 0x3f	; 63
 6cc:	0f 92       	push	r0
 6ce:	11 24       	eor	r1, r1
 6d0:	8f 93       	push	r24
 6d2:	9f 93       	push	r25
 6d4:	80 91 af 00 	lds	r24, 0x00AF
 6d8:	90 91 b0 00 	lds	r25, 0x00B0
 6dc:	89 2b       	or	r24, r25
 6de:	51 f4       	brne	.+20     	; 0x6f4 <__vector_1+0x2e>
 6e0:	8e b5       	in	r24, 0x2e	; 46
 6e2:	82 60       	ori	r24, 0x02	; 2
 6e4:	8e bd       	out	0x2e, r24	; 46
 6e6:	81 e0       	ldi	r24, 0x01	; 1
ISR (INT0_vect)
{
	if (choice1 == 0)
	{
		TCCR1B |= (1 << CS11);
		choice1 = 1;
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	90 93 b0 00 	sts	0x00B0, r25
 6ee:	80 93 af 00 	sts	0x00AF, r24
 6f2:	15 c0       	rjmp	.+42     	; 0x71e <__vector_1+0x58>
	}
	else if (choice1 == 1)
 6f4:	80 91 af 00 	lds	r24, 0x00AF
 6f8:	90 91 b0 00 	lds	r25, 0x00B0
 6fc:	01 97       	sbiw	r24, 0x01	; 1
 6fe:	79 f4       	brne	.+30     	; 0x71e <__vector_1+0x58>
	{
		TCCR1B = 0;
 700:	1e bc       	out	0x2e, r1	; 46
		pulse1 = TCNT1 / 2;
 702:	8c b5       	in	r24, 0x2c	; 44
 704:	9d b5       	in	r25, 0x2d	; 45
 706:	96 95       	lsr	r25
 708:	87 95       	ror	r24
 70a:	90 93 b2 00 	sts	0x00B2, r25
 70e:	80 93 b1 00 	sts	0x00B1, r24
		TCNT1 = 0;
 712:	1d bc       	out	0x2d, r1	; 45
 714:	1c bc       	out	0x2c, r1	; 44
		choice1 = 0;
 716:	10 92 b0 00 	sts	0x00B0, r1
 71a:	10 92 af 00 	sts	0x00AF, r1
	}
}
 71e:	9f 91       	pop	r25
 720:	8f 91       	pop	r24
 722:	0f 90       	pop	r0
 724:	0f be       	out	0x3f, r0	; 63
 726:	0f 90       	pop	r0
 728:	1f 90       	pop	r1
 72a:	18 95       	reti

0000072c <__vector_2>:

ISR (INT1_vect)
{
 72c:	1f 92       	push	r1
 72e:	0f 92       	push	r0
 730:	0f b6       	in	r0, 0x3f	; 63
 732:	0f 92       	push	r0
 734:	11 24       	eor	r1, r1
 736:	2f 93       	push	r18
 738:	3f 93       	push	r19
 73a:	4f 93       	push	r20
 73c:	5f 93       	push	r21
 73e:	8f 93       	push	r24
 740:	9f 93       	push	r25
	if (choice2 == 0)
 742:	80 91 ab 00 	lds	r24, 0x00AB
 746:	90 91 ac 00 	lds	r25, 0x00AC
 74a:	89 2b       	or	r24, r25
 74c:	51 f4       	brne	.+20     	; 0x762 <__vector_2+0x36>
	{
		TCCR0 |= 0b00000011;
 74e:	83 b7       	in	r24, 0x33	; 51
 750:	83 60       	ori	r24, 0x03	; 3
 752:	83 bf       	out	0x33, r24	; 51
		choice2 = 1;
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	90 93 ac 00 	sts	0x00AC, r25
 75c:	80 93 ab 00 	sts	0x00AB, r24
 760:	25 c0       	rjmp	.+74     	; 0x7ac <__vector_2+0x80>
	}
	else if (choice2 == 1)
 762:	80 91 ab 00 	lds	r24, 0x00AB
 766:	90 91 ac 00 	lds	r25, 0x00AC
 76a:	01 97       	sbiw	r24, 0x01	; 1
 76c:	f9 f4       	brne	.+62     	; 0x7ac <__vector_2+0x80>
	{
		TCCR0 = 0;
 76e:	13 be       	out	0x33, r1	; 51
		pulse2 = (TCNT0 + (0xFF * TIMER0_INT)) * 4;
 770:	22 b7       	in	r18, 0x32	; 50
 772:	40 91 a9 00 	lds	r20, 0x00A9
 776:	50 91 aa 00 	lds	r21, 0x00AA
 77a:	3f ef       	ldi	r19, 0xFF	; 255
 77c:	34 9f       	mul	r19, r20
 77e:	c0 01       	movw	r24, r0
 780:	35 9f       	mul	r19, r21
 782:	90 0d       	add	r25, r0
 784:	11 24       	eor	r1, r1
 786:	82 0f       	add	r24, r18
 788:	91 1d       	adc	r25, r1
 78a:	88 0f       	add	r24, r24
 78c:	99 1f       	adc	r25, r25
 78e:	88 0f       	add	r24, r24
 790:	99 1f       	adc	r25, r25
 792:	90 93 ae 00 	sts	0x00AE, r25
 796:	80 93 ad 00 	sts	0x00AD, r24
		TIMER0_INT = 0;
 79a:	10 92 aa 00 	sts	0x00AA, r1
 79e:	10 92 a9 00 	sts	0x00A9, r1
		TCNT0 = 0;
 7a2:	12 be       	out	0x32, r1	; 50
		choice2 = 0;
 7a4:	10 92 ac 00 	sts	0x00AC, r1
 7a8:	10 92 ab 00 	sts	0x00AB, r1
	}
}
 7ac:	9f 91       	pop	r25
 7ae:	8f 91       	pop	r24
 7b0:	5f 91       	pop	r21
 7b2:	4f 91       	pop	r20
 7b4:	3f 91       	pop	r19
 7b6:	2f 91       	pop	r18
 7b8:	0f 90       	pop	r0
 7ba:	0f be       	out	0x3f, r0	; 63
 7bc:	0f 90       	pop	r0
 7be:	1f 90       	pop	r1
 7c0:	18 95       	reti

000007c2 <__vector_11>:
// {
// 	TIMER2_INT++;
// }

ISR (TIMER0_OVF_vect)
{
 7c2:	1f 92       	push	r1
 7c4:	0f 92       	push	r0
 7c6:	0f b6       	in	r0, 0x3f	; 63
 7c8:	0f 92       	push	r0
 7ca:	11 24       	eor	r1, r1
 7cc:	8f 93       	push	r24
 7ce:	9f 93       	push	r25
	TIMER0_INT++;
 7d0:	80 91 a9 00 	lds	r24, 0x00A9
 7d4:	90 91 aa 00 	lds	r25, 0x00AA
 7d8:	01 96       	adiw	r24, 0x01	; 1
 7da:	90 93 aa 00 	sts	0x00AA, r25
 7de:	80 93 a9 00 	sts	0x00A9, r24
}
 7e2:	9f 91       	pop	r25
 7e4:	8f 91       	pop	r24
 7e6:	0f 90       	pop	r0
 7e8:	0f be       	out	0x3f, r0	; 63
 7ea:	0f 90       	pop	r0
 7ec:	1f 90       	pop	r1
 7ee:	18 95       	reti

000007f0 <PWM0_init>:
 7f0:	83 b7       	in	r24, 0x33	; 51
 7f2:	88 64       	ori	r24, 0x48	; 72
 7f4:	83 bf       	out	0x33, r24	; 51
 7f6:	83 b7       	in	r24, 0x33	; 51
 7f8:	80 62       	ori	r24, 0x20	; 32
 7fa:	83 bf       	out	0x33, r24	; 51
 7fc:	83 b7       	in	r24, 0x33	; 51
 7fe:	81 60       	ori	r24, 0x01	; 1
 800:	83 bf       	out	0x33, r24	; 51
 802:	08 95       	ret

00000804 <PWM2_init>:
 804:	85 b5       	in	r24, 0x25	; 37
 806:	88 64       	ori	r24, 0x48	; 72
 808:	85 bd       	out	0x25, r24	; 37
 80a:	85 b5       	in	r24, 0x25	; 37
 80c:	80 62       	ori	r24, 0x20	; 32
 80e:	85 bd       	out	0x25, r24	; 37
 810:	85 b5       	in	r24, 0x25	; 37
 812:	81 60       	ori	r24, 0x01	; 1
 814:	85 bd       	out	0x25, r24	; 37
 816:	08 95       	ret

00000818 <PWM0>:
 818:	8c bf       	out	0x3c, r24	; 60
 81a:	08 95       	ret

0000081c <PWM2>:
 81c:	83 bd       	out	0x23, r24	; 35
 81e:	08 95       	ret

00000820 <UART_init>:
#include "serial_lib.h"

void UART_init(void)
{
	UCSRC &= ~(1 << UMSEL);						// Asynchronous Mode Selection
 820:	80 b5       	in	r24, 0x20	; 32
 822:	8f 7b       	andi	r24, 0xBF	; 191
 824:	80 bd       	out	0x20, r24	; 32
	UCSRA &= ~(1 << U2X);						// Normal Transmission Mode
 826:	59 98       	cbi	0x0b, 1	; 11
	UBRRH = 0;
 828:	10 bc       	out	0x20, r1	; 32
	UBRRL = 103;
 82a:	87 e6       	ldi	r24, 0x67	; 103
 82c:	89 b9       	out	0x09, r24	; 9
	UCSRB |= (1 << RXEN) | (1 << TXEN);
 82e:	8a b1       	in	r24, 0x0a	; 10
 830:	88 61       	ori	r24, 0x18	; 24
 832:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1 << USBS) | (3 << UCSZ0);
 834:	80 b5       	in	r24, 0x20	; 32
 836:	8e 68       	ori	r24, 0x8E	; 142
 838:	80 bd       	out	0x20, r24	; 32
 83a:	08 95       	ret

0000083c <__subsf3>:
 83c:	50 58       	subi	r21, 0x80	; 128

0000083e <__addsf3>:
 83e:	bb 27       	eor	r27, r27
 840:	aa 27       	eor	r26, r26
 842:	0e 94 36 04 	call	0x86c	; 0x86c <__addsf3x>
 846:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <__fp_round>
 84a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fp_pscA>
 84e:	38 f0       	brcs	.+14     	; 0x85e <__addsf3+0x20>
 850:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__fp_pscB>
 854:	20 f0       	brcs	.+8      	; 0x85e <__addsf3+0x20>
 856:	39 f4       	brne	.+14     	; 0x866 <__stack+0x7>
 858:	9f 3f       	cpi	r25, 0xFF	; 255
 85a:	19 f4       	brne	.+6      	; 0x862 <__stack+0x3>
 85c:	26 f4       	brtc	.+8      	; 0x866 <__stack+0x7>
 85e:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__fp_nan>
 862:	0e f4       	brtc	.+2      	; 0x866 <__stack+0x7>
 864:	e0 95       	com	r30
 866:	e7 fb       	bst	r30, 7
 868:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__fp_inf>

0000086c <__addsf3x>:
 86c:	e9 2f       	mov	r30, r25
 86e:	0e 94 26 05 	call	0xa4c	; 0xa4c <__fp_split3>
 872:	58 f3       	brcs	.-42     	; 0x84a <__addsf3+0xc>
 874:	ba 17       	cp	r27, r26
 876:	62 07       	cpc	r22, r18
 878:	73 07       	cpc	r23, r19
 87a:	84 07       	cpc	r24, r20
 87c:	95 07       	cpc	r25, r21
 87e:	20 f0       	brcs	.+8      	; 0x888 <__addsf3x+0x1c>
 880:	79 f4       	brne	.+30     	; 0x8a0 <__addsf3x+0x34>
 882:	a6 f5       	brtc	.+104    	; 0x8ec <__addsf3x+0x80>
 884:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__fp_zero>
 888:	0e f4       	brtc	.+2      	; 0x88c <__addsf3x+0x20>
 88a:	e0 95       	com	r30
 88c:	0b 2e       	mov	r0, r27
 88e:	ba 2f       	mov	r27, r26
 890:	a0 2d       	mov	r26, r0
 892:	0b 01       	movw	r0, r22
 894:	b9 01       	movw	r22, r18
 896:	90 01       	movw	r18, r0
 898:	0c 01       	movw	r0, r24
 89a:	ca 01       	movw	r24, r20
 89c:	a0 01       	movw	r20, r0
 89e:	11 24       	eor	r1, r1
 8a0:	ff 27       	eor	r31, r31
 8a2:	59 1b       	sub	r21, r25
 8a4:	99 f0       	breq	.+38     	; 0x8cc <__addsf3x+0x60>
 8a6:	59 3f       	cpi	r21, 0xF9	; 249
 8a8:	50 f4       	brcc	.+20     	; 0x8be <__addsf3x+0x52>
 8aa:	50 3e       	cpi	r21, 0xE0	; 224
 8ac:	68 f1       	brcs	.+90     	; 0x908 <__addsf3x+0x9c>
 8ae:	1a 16       	cp	r1, r26
 8b0:	f0 40       	sbci	r31, 0x00	; 0
 8b2:	a2 2f       	mov	r26, r18
 8b4:	23 2f       	mov	r18, r19
 8b6:	34 2f       	mov	r19, r20
 8b8:	44 27       	eor	r20, r20
 8ba:	58 5f       	subi	r21, 0xF8	; 248
 8bc:	f3 cf       	rjmp	.-26     	; 0x8a4 <__addsf3x+0x38>
 8be:	46 95       	lsr	r20
 8c0:	37 95       	ror	r19
 8c2:	27 95       	ror	r18
 8c4:	a7 95       	ror	r26
 8c6:	f0 40       	sbci	r31, 0x00	; 0
 8c8:	53 95       	inc	r21
 8ca:	c9 f7       	brne	.-14     	; 0x8be <__addsf3x+0x52>
 8cc:	7e f4       	brtc	.+30     	; 0x8ec <__addsf3x+0x80>
 8ce:	1f 16       	cp	r1, r31
 8d0:	ba 0b       	sbc	r27, r26
 8d2:	62 0b       	sbc	r22, r18
 8d4:	73 0b       	sbc	r23, r19
 8d6:	84 0b       	sbc	r24, r20
 8d8:	ba f0       	brmi	.+46     	; 0x908 <__addsf3x+0x9c>
 8da:	91 50       	subi	r25, 0x01	; 1
 8dc:	a1 f0       	breq	.+40     	; 0x906 <__addsf3x+0x9a>
 8de:	ff 0f       	add	r31, r31
 8e0:	bb 1f       	adc	r27, r27
 8e2:	66 1f       	adc	r22, r22
 8e4:	77 1f       	adc	r23, r23
 8e6:	88 1f       	adc	r24, r24
 8e8:	c2 f7       	brpl	.-16     	; 0x8da <__addsf3x+0x6e>
 8ea:	0e c0       	rjmp	.+28     	; 0x908 <__addsf3x+0x9c>
 8ec:	ba 0f       	add	r27, r26
 8ee:	62 1f       	adc	r22, r18
 8f0:	73 1f       	adc	r23, r19
 8f2:	84 1f       	adc	r24, r20
 8f4:	48 f4       	brcc	.+18     	; 0x908 <__addsf3x+0x9c>
 8f6:	87 95       	ror	r24
 8f8:	77 95       	ror	r23
 8fa:	67 95       	ror	r22
 8fc:	b7 95       	ror	r27
 8fe:	f7 95       	ror	r31
 900:	9e 3f       	cpi	r25, 0xFE	; 254
 902:	08 f0       	brcs	.+2      	; 0x906 <__addsf3x+0x9a>
 904:	b0 cf       	rjmp	.-160    	; 0x866 <__stack+0x7>
 906:	93 95       	inc	r25
 908:	88 0f       	add	r24, r24
 90a:	08 f0       	brcs	.+2      	; 0x90e <__addsf3x+0xa2>
 90c:	99 27       	eor	r25, r25
 90e:	ee 0f       	add	r30, r30
 910:	97 95       	ror	r25
 912:	87 95       	ror	r24
 914:	08 95       	ret

00000916 <__fixsfsi>:
 916:	0e 94 92 04 	call	0x924	; 0x924 <__fixunssfsi>
 91a:	68 94       	set
 91c:	b1 11       	cpse	r27, r1
 91e:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__fp_szero>
 922:	08 95       	ret

00000924 <__fixunssfsi>:
 924:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__fp_splitA>
 928:	88 f0       	brcs	.+34     	; 0x94c <__fixunssfsi+0x28>
 92a:	9f 57       	subi	r25, 0x7F	; 127
 92c:	98 f0       	brcs	.+38     	; 0x954 <__fixunssfsi+0x30>
 92e:	b9 2f       	mov	r27, r25
 930:	99 27       	eor	r25, r25
 932:	b7 51       	subi	r27, 0x17	; 23
 934:	b0 f0       	brcs	.+44     	; 0x962 <__fixunssfsi+0x3e>
 936:	e1 f0       	breq	.+56     	; 0x970 <__fixunssfsi+0x4c>
 938:	66 0f       	add	r22, r22
 93a:	77 1f       	adc	r23, r23
 93c:	88 1f       	adc	r24, r24
 93e:	99 1f       	adc	r25, r25
 940:	1a f0       	brmi	.+6      	; 0x948 <__fixunssfsi+0x24>
 942:	ba 95       	dec	r27
 944:	c9 f7       	brne	.-14     	; 0x938 <__fixunssfsi+0x14>
 946:	14 c0       	rjmp	.+40     	; 0x970 <__fixunssfsi+0x4c>
 948:	b1 30       	cpi	r27, 0x01	; 1
 94a:	91 f0       	breq	.+36     	; 0x970 <__fixunssfsi+0x4c>
 94c:	0e 94 48 05 	call	0xa90	; 0xa90 <__fp_zero>
 950:	b1 e0       	ldi	r27, 0x01	; 1
 952:	08 95       	ret
 954:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__fp_zero>
 958:	67 2f       	mov	r22, r23
 95a:	78 2f       	mov	r23, r24
 95c:	88 27       	eor	r24, r24
 95e:	b8 5f       	subi	r27, 0xF8	; 248
 960:	39 f0       	breq	.+14     	; 0x970 <__fixunssfsi+0x4c>
 962:	b9 3f       	cpi	r27, 0xF9	; 249
 964:	cc f3       	brlt	.-14     	; 0x958 <__fixunssfsi+0x34>
 966:	86 95       	lsr	r24
 968:	77 95       	ror	r23
 96a:	67 95       	ror	r22
 96c:	b3 95       	inc	r27
 96e:	d9 f7       	brne	.-10     	; 0x966 <__fixunssfsi+0x42>
 970:	3e f4       	brtc	.+14     	; 0x980 <__fixunssfsi+0x5c>
 972:	90 95       	com	r25
 974:	80 95       	com	r24
 976:	70 95       	com	r23
 978:	61 95       	neg	r22
 97a:	7f 4f       	sbci	r23, 0xFF	; 255
 97c:	8f 4f       	sbci	r24, 0xFF	; 255
 97e:	9f 4f       	sbci	r25, 0xFF	; 255
 980:	08 95       	ret

00000982 <__floatunsisf>:
 982:	e8 94       	clt
 984:	09 c0       	rjmp	.+18     	; 0x998 <__floatsisf+0x12>

00000986 <__floatsisf>:
 986:	97 fb       	bst	r25, 7
 988:	3e f4       	brtc	.+14     	; 0x998 <__floatsisf+0x12>
 98a:	90 95       	com	r25
 98c:	80 95       	com	r24
 98e:	70 95       	com	r23
 990:	61 95       	neg	r22
 992:	7f 4f       	sbci	r23, 0xFF	; 255
 994:	8f 4f       	sbci	r24, 0xFF	; 255
 996:	9f 4f       	sbci	r25, 0xFF	; 255
 998:	99 23       	and	r25, r25
 99a:	a9 f0       	breq	.+42     	; 0x9c6 <__floatsisf+0x40>
 99c:	f9 2f       	mov	r31, r25
 99e:	96 e9       	ldi	r25, 0x96	; 150
 9a0:	bb 27       	eor	r27, r27
 9a2:	93 95       	inc	r25
 9a4:	f6 95       	lsr	r31
 9a6:	87 95       	ror	r24
 9a8:	77 95       	ror	r23
 9aa:	67 95       	ror	r22
 9ac:	b7 95       	ror	r27
 9ae:	f1 11       	cpse	r31, r1
 9b0:	f8 cf       	rjmp	.-16     	; 0x9a2 <__floatsisf+0x1c>
 9b2:	fa f4       	brpl	.+62     	; 0x9f2 <__floatsisf+0x6c>
 9b4:	bb 0f       	add	r27, r27
 9b6:	11 f4       	brne	.+4      	; 0x9bc <__floatsisf+0x36>
 9b8:	60 ff       	sbrs	r22, 0
 9ba:	1b c0       	rjmp	.+54     	; 0x9f2 <__floatsisf+0x6c>
 9bc:	6f 5f       	subi	r22, 0xFF	; 255
 9be:	7f 4f       	sbci	r23, 0xFF	; 255
 9c0:	8f 4f       	sbci	r24, 0xFF	; 255
 9c2:	9f 4f       	sbci	r25, 0xFF	; 255
 9c4:	16 c0       	rjmp	.+44     	; 0x9f2 <__floatsisf+0x6c>
 9c6:	88 23       	and	r24, r24
 9c8:	11 f0       	breq	.+4      	; 0x9ce <__floatsisf+0x48>
 9ca:	96 e9       	ldi	r25, 0x96	; 150
 9cc:	11 c0       	rjmp	.+34     	; 0x9f0 <__floatsisf+0x6a>
 9ce:	77 23       	and	r23, r23
 9d0:	21 f0       	breq	.+8      	; 0x9da <__floatsisf+0x54>
 9d2:	9e e8       	ldi	r25, 0x8E	; 142
 9d4:	87 2f       	mov	r24, r23
 9d6:	76 2f       	mov	r23, r22
 9d8:	05 c0       	rjmp	.+10     	; 0x9e4 <__floatsisf+0x5e>
 9da:	66 23       	and	r22, r22
 9dc:	71 f0       	breq	.+28     	; 0x9fa <__floatsisf+0x74>
 9de:	96 e8       	ldi	r25, 0x86	; 134
 9e0:	86 2f       	mov	r24, r22
 9e2:	70 e0       	ldi	r23, 0x00	; 0
 9e4:	60 e0       	ldi	r22, 0x00	; 0
 9e6:	2a f0       	brmi	.+10     	; 0x9f2 <__floatsisf+0x6c>
 9e8:	9a 95       	dec	r25
 9ea:	66 0f       	add	r22, r22
 9ec:	77 1f       	adc	r23, r23
 9ee:	88 1f       	adc	r24, r24
 9f0:	da f7       	brpl	.-10     	; 0x9e8 <__floatsisf+0x62>
 9f2:	88 0f       	add	r24, r24
 9f4:	96 95       	lsr	r25
 9f6:	87 95       	ror	r24
 9f8:	97 f9       	bld	r25, 7
 9fa:	08 95       	ret

000009fc <__fp_inf>:
 9fc:	97 f9       	bld	r25, 7
 9fe:	9f 67       	ori	r25, 0x7F	; 127
 a00:	80 e8       	ldi	r24, 0x80	; 128
 a02:	70 e0       	ldi	r23, 0x00	; 0
 a04:	60 e0       	ldi	r22, 0x00	; 0
 a06:	08 95       	ret

00000a08 <__fp_nan>:
 a08:	9f ef       	ldi	r25, 0xFF	; 255
 a0a:	80 ec       	ldi	r24, 0xC0	; 192
 a0c:	08 95       	ret

00000a0e <__fp_pscA>:
 a0e:	00 24       	eor	r0, r0
 a10:	0a 94       	dec	r0
 a12:	16 16       	cp	r1, r22
 a14:	17 06       	cpc	r1, r23
 a16:	18 06       	cpc	r1, r24
 a18:	09 06       	cpc	r0, r25
 a1a:	08 95       	ret

00000a1c <__fp_pscB>:
 a1c:	00 24       	eor	r0, r0
 a1e:	0a 94       	dec	r0
 a20:	12 16       	cp	r1, r18
 a22:	13 06       	cpc	r1, r19
 a24:	14 06       	cpc	r1, r20
 a26:	05 06       	cpc	r0, r21
 a28:	08 95       	ret

00000a2a <__fp_round>:
 a2a:	09 2e       	mov	r0, r25
 a2c:	03 94       	inc	r0
 a2e:	00 0c       	add	r0, r0
 a30:	11 f4       	brne	.+4      	; 0xa36 <__fp_round+0xc>
 a32:	88 23       	and	r24, r24
 a34:	52 f0       	brmi	.+20     	; 0xa4a <__fp_round+0x20>
 a36:	bb 0f       	add	r27, r27
 a38:	40 f4       	brcc	.+16     	; 0xa4a <__fp_round+0x20>
 a3a:	bf 2b       	or	r27, r31
 a3c:	11 f4       	brne	.+4      	; 0xa42 <__fp_round+0x18>
 a3e:	60 ff       	sbrs	r22, 0
 a40:	04 c0       	rjmp	.+8      	; 0xa4a <__fp_round+0x20>
 a42:	6f 5f       	subi	r22, 0xFF	; 255
 a44:	7f 4f       	sbci	r23, 0xFF	; 255
 a46:	8f 4f       	sbci	r24, 0xFF	; 255
 a48:	9f 4f       	sbci	r25, 0xFF	; 255
 a4a:	08 95       	ret

00000a4c <__fp_split3>:
 a4c:	57 fd       	sbrc	r21, 7
 a4e:	90 58       	subi	r25, 0x80	; 128
 a50:	44 0f       	add	r20, r20
 a52:	55 1f       	adc	r21, r21
 a54:	59 f0       	breq	.+22     	; 0xa6c <__fp_splitA+0x10>
 a56:	5f 3f       	cpi	r21, 0xFF	; 255
 a58:	71 f0       	breq	.+28     	; 0xa76 <__fp_splitA+0x1a>
 a5a:	47 95       	ror	r20

00000a5c <__fp_splitA>:
 a5c:	88 0f       	add	r24, r24
 a5e:	97 fb       	bst	r25, 7
 a60:	99 1f       	adc	r25, r25
 a62:	61 f0       	breq	.+24     	; 0xa7c <__fp_splitA+0x20>
 a64:	9f 3f       	cpi	r25, 0xFF	; 255
 a66:	79 f0       	breq	.+30     	; 0xa86 <__fp_splitA+0x2a>
 a68:	87 95       	ror	r24
 a6a:	08 95       	ret
 a6c:	12 16       	cp	r1, r18
 a6e:	13 06       	cpc	r1, r19
 a70:	14 06       	cpc	r1, r20
 a72:	55 1f       	adc	r21, r21
 a74:	f2 cf       	rjmp	.-28     	; 0xa5a <__fp_split3+0xe>
 a76:	46 95       	lsr	r20
 a78:	f1 df       	rcall	.-30     	; 0xa5c <__fp_splitA>
 a7a:	08 c0       	rjmp	.+16     	; 0xa8c <__fp_splitA+0x30>
 a7c:	16 16       	cp	r1, r22
 a7e:	17 06       	cpc	r1, r23
 a80:	18 06       	cpc	r1, r24
 a82:	99 1f       	adc	r25, r25
 a84:	f1 cf       	rjmp	.-30     	; 0xa68 <__fp_splitA+0xc>
 a86:	86 95       	lsr	r24
 a88:	71 05       	cpc	r23, r1
 a8a:	61 05       	cpc	r22, r1
 a8c:	08 94       	sec
 a8e:	08 95       	ret

00000a90 <__fp_zero>:
 a90:	e8 94       	clt

00000a92 <__fp_szero>:
 a92:	bb 27       	eor	r27, r27
 a94:	66 27       	eor	r22, r22
 a96:	77 27       	eor	r23, r23
 a98:	cb 01       	movw	r24, r22
 a9a:	97 f9       	bld	r25, 7
 a9c:	08 95       	ret

00000a9e <__mulsf3>:
 a9e:	0e 94 62 05 	call	0xac4	; 0xac4 <__mulsf3x>
 aa2:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <__fp_round>
 aa6:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fp_pscA>
 aaa:	38 f0       	brcs	.+14     	; 0xaba <__mulsf3+0x1c>
 aac:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__fp_pscB>
 ab0:	20 f0       	brcs	.+8      	; 0xaba <__mulsf3+0x1c>
 ab2:	95 23       	and	r25, r21
 ab4:	11 f0       	breq	.+4      	; 0xaba <__mulsf3+0x1c>
 ab6:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__fp_inf>
 aba:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__fp_nan>
 abe:	11 24       	eor	r1, r1
 ac0:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__fp_szero>

00000ac4 <__mulsf3x>:
 ac4:	0e 94 26 05 	call	0xa4c	; 0xa4c <__fp_split3>
 ac8:	70 f3       	brcs	.-36     	; 0xaa6 <__mulsf3+0x8>

00000aca <__mulsf3_pse>:
 aca:	95 9f       	mul	r25, r21
 acc:	c1 f3       	breq	.-16     	; 0xabe <__mulsf3+0x20>
 ace:	95 0f       	add	r25, r21
 ad0:	50 e0       	ldi	r21, 0x00	; 0
 ad2:	55 1f       	adc	r21, r21
 ad4:	62 9f       	mul	r22, r18
 ad6:	f0 01       	movw	r30, r0
 ad8:	72 9f       	mul	r23, r18
 ada:	bb 27       	eor	r27, r27
 adc:	f0 0d       	add	r31, r0
 ade:	b1 1d       	adc	r27, r1
 ae0:	63 9f       	mul	r22, r19
 ae2:	aa 27       	eor	r26, r26
 ae4:	f0 0d       	add	r31, r0
 ae6:	b1 1d       	adc	r27, r1
 ae8:	aa 1f       	adc	r26, r26
 aea:	64 9f       	mul	r22, r20
 aec:	66 27       	eor	r22, r22
 aee:	b0 0d       	add	r27, r0
 af0:	a1 1d       	adc	r26, r1
 af2:	66 1f       	adc	r22, r22
 af4:	82 9f       	mul	r24, r18
 af6:	22 27       	eor	r18, r18
 af8:	b0 0d       	add	r27, r0
 afa:	a1 1d       	adc	r26, r1
 afc:	62 1f       	adc	r22, r18
 afe:	73 9f       	mul	r23, r19
 b00:	b0 0d       	add	r27, r0
 b02:	a1 1d       	adc	r26, r1
 b04:	62 1f       	adc	r22, r18
 b06:	83 9f       	mul	r24, r19
 b08:	a0 0d       	add	r26, r0
 b0a:	61 1d       	adc	r22, r1
 b0c:	22 1f       	adc	r18, r18
 b0e:	74 9f       	mul	r23, r20
 b10:	33 27       	eor	r19, r19
 b12:	a0 0d       	add	r26, r0
 b14:	61 1d       	adc	r22, r1
 b16:	23 1f       	adc	r18, r19
 b18:	84 9f       	mul	r24, r20
 b1a:	60 0d       	add	r22, r0
 b1c:	21 1d       	adc	r18, r1
 b1e:	82 2f       	mov	r24, r18
 b20:	76 2f       	mov	r23, r22
 b22:	6a 2f       	mov	r22, r26
 b24:	11 24       	eor	r1, r1
 b26:	9f 57       	subi	r25, 0x7F	; 127
 b28:	50 40       	sbci	r21, 0x00	; 0
 b2a:	9a f0       	brmi	.+38     	; 0xb52 <__mulsf3_pse+0x88>
 b2c:	f1 f0       	breq	.+60     	; 0xb6a <__mulsf3_pse+0xa0>
 b2e:	88 23       	and	r24, r24
 b30:	4a f0       	brmi	.+18     	; 0xb44 <__mulsf3_pse+0x7a>
 b32:	ee 0f       	add	r30, r30
 b34:	ff 1f       	adc	r31, r31
 b36:	bb 1f       	adc	r27, r27
 b38:	66 1f       	adc	r22, r22
 b3a:	77 1f       	adc	r23, r23
 b3c:	88 1f       	adc	r24, r24
 b3e:	91 50       	subi	r25, 0x01	; 1
 b40:	50 40       	sbci	r21, 0x00	; 0
 b42:	a9 f7       	brne	.-22     	; 0xb2e <__mulsf3_pse+0x64>
 b44:	9e 3f       	cpi	r25, 0xFE	; 254
 b46:	51 05       	cpc	r21, r1
 b48:	80 f0       	brcs	.+32     	; 0xb6a <__mulsf3_pse+0xa0>
 b4a:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__fp_inf>
 b4e:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__fp_szero>
 b52:	5f 3f       	cpi	r21, 0xFF	; 255
 b54:	e4 f3       	brlt	.-8      	; 0xb4e <__mulsf3_pse+0x84>
 b56:	98 3e       	cpi	r25, 0xE8	; 232
 b58:	d4 f3       	brlt	.-12     	; 0xb4e <__mulsf3_pse+0x84>
 b5a:	86 95       	lsr	r24
 b5c:	77 95       	ror	r23
 b5e:	67 95       	ror	r22
 b60:	b7 95       	ror	r27
 b62:	f7 95       	ror	r31
 b64:	e7 95       	ror	r30
 b66:	9f 5f       	subi	r25, 0xFF	; 255
 b68:	c1 f7       	brne	.-16     	; 0xb5a <__mulsf3_pse+0x90>
 b6a:	fe 2b       	or	r31, r30
 b6c:	88 0f       	add	r24, r24
 b6e:	91 1d       	adc	r25, r1
 b70:	96 95       	lsr	r25
 b72:	87 95       	ror	r24
 b74:	97 f9       	bld	r25, 7
 b76:	08 95       	ret

00000b78 <__divmodhi4>:
 b78:	97 fb       	bst	r25, 7
 b7a:	07 2e       	mov	r0, r23
 b7c:	16 f4       	brtc	.+4      	; 0xb82 <__divmodhi4+0xa>
 b7e:	00 94       	com	r0
 b80:	07 d0       	rcall	.+14     	; 0xb90 <__divmodhi4_neg1>
 b82:	77 fd       	sbrc	r23, 7
 b84:	09 d0       	rcall	.+18     	; 0xb98 <__divmodhi4_neg2>
 b86:	0e 94 d0 05 	call	0xba0	; 0xba0 <__udivmodhi4>
 b8a:	07 fc       	sbrc	r0, 7
 b8c:	05 d0       	rcall	.+10     	; 0xb98 <__divmodhi4_neg2>
 b8e:	3e f4       	brtc	.+14     	; 0xb9e <__divmodhi4_exit>

00000b90 <__divmodhi4_neg1>:
 b90:	90 95       	com	r25
 b92:	81 95       	neg	r24
 b94:	9f 4f       	sbci	r25, 0xFF	; 255
 b96:	08 95       	ret

00000b98 <__divmodhi4_neg2>:
 b98:	70 95       	com	r23
 b9a:	61 95       	neg	r22
 b9c:	7f 4f       	sbci	r23, 0xFF	; 255

00000b9e <__divmodhi4_exit>:
 b9e:	08 95       	ret

00000ba0 <__udivmodhi4>:
 ba0:	aa 1b       	sub	r26, r26
 ba2:	bb 1b       	sub	r27, r27
 ba4:	51 e1       	ldi	r21, 0x11	; 17
 ba6:	07 c0       	rjmp	.+14     	; 0xbb6 <__udivmodhi4_ep>

00000ba8 <__udivmodhi4_loop>:
 ba8:	aa 1f       	adc	r26, r26
 baa:	bb 1f       	adc	r27, r27
 bac:	a6 17       	cp	r26, r22
 bae:	b7 07       	cpc	r27, r23
 bb0:	10 f0       	brcs	.+4      	; 0xbb6 <__udivmodhi4_ep>
 bb2:	a6 1b       	sub	r26, r22
 bb4:	b7 0b       	sbc	r27, r23

00000bb6 <__udivmodhi4_ep>:
 bb6:	88 1f       	adc	r24, r24
 bb8:	99 1f       	adc	r25, r25
 bba:	5a 95       	dec	r21
 bbc:	a9 f7       	brne	.-22     	; 0xba8 <__udivmodhi4_loop>
 bbe:	80 95       	com	r24
 bc0:	90 95       	com	r25
 bc2:	bc 01       	movw	r22, r24
 bc4:	cd 01       	movw	r24, r26
 bc6:	08 95       	ret

00000bc8 <_exit>:
 bc8:	f8 94       	cli

00000bca <__stop_program>:
 bca:	ff cf       	rjmp	.-2      	; 0xbca <__stop_program>
