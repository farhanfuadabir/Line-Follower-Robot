
LFR_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006c  00800060  000014f2  00001586  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000054  008000cc  008000cc  000015f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001624  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002158  00000000  00000000  000017e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a36  00000000  00000000  00003940  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012f4  00000000  00000000  00004376  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d4  00000000  00000000  0000566c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000088c  00000000  00000000  00005a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fe3  00000000  00000000  000062cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  000072af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ef       	ldi	r30, 0xF2	; 242
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3c       	cpi	r26, 0xCC	; 204
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ac ec       	ldi	r26, 0xCC	; 204
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 32       	cpi	r26, 0x20	; 32
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 08 05 	call	0xa10	; 0xa10 <main>
      8a:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <adc_init>:
#include "ADC_routine.h"
#include "serial_lib.h"

void adc_init()
{
	ADMUX |= (1 << REFS0);									    //reference AVcc 5volt
      92:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1 << ADEN);										//enable ADC Module
      94:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);		//prescaler 128
      96:	86 b1       	in	r24, 0x06	; 6
      98:	87 60       	ori	r24, 0x07	; 7
      9a:	86 b9       	out	0x06, r24	; 6
      9c:	08 95       	ret

0000009e <adcRead>:
}

int adcRead(uint8_t channel)
{
	ADMUX  &= ~(0x1F);				//disable all ADC channel
      9e:	97 b1       	in	r25, 0x07	; 7
      a0:	90 7e       	andi	r25, 0xE0	; 224
      a2:	97 b9       	out	0x07, r25	; 7
	ADMUX |= channel;		//set the ADC channel
      a4:	97 b1       	in	r25, 0x07	; 7
      a6:	89 2b       	or	r24, r25
      a8:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);			//start ADC conversion
      aa:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1<<ADSC));		//wait until conversion complete
      ac:	36 99       	sbic	0x06, 6	; 6
      ae:	fe cf       	rjmp	.-4      	; 0xac <adcRead+0xe>
	return ADC;						//return the ADC converted digital value
      b0:	84 b1       	in	r24, 0x04	; 4
      b2:	95 b1       	in	r25, 0x05	; 5
}
      b4:	08 95       	ret

000000b6 <sonar1Read>:
void timercount(uint16_t durationmillis)
{
	TCCR1B |= (1 << WGM12);
	unsigned long timerlimit = ((F_CPU / 1024) * (durationmillis / 1000)) - 1;
	OCR1A = timerlimit;
	TCCR1B |= (1 << CS12) | (1 << CS10);
      b6:	10 92 d3 00 	sts	0x00D3, r1	; 0x8000d3 <sonar1_ack>
      ba:	94 98       	cbi	0x12, 4	; 18
      bc:	94 9a       	sbi	0x12, 4	; 18
      be:	35 e3       	ldi	r19, 0x35	; 53
      c0:	3a 95       	dec	r19
      c2:	f1 f7       	brne	.-4      	; 0xc0 <sonar1Read+0xa>
      c4:	00 00       	nop
      c6:	94 98       	cbi	0x12, 4	; 18
      c8:	21 e0       	ldi	r18, 0x01	; 1
      ca:	31 c0       	rjmp	.+98     	; 0x12e <sonar1Read+0x78>
      cc:	8e b5       	in	r24, 0x2e	; 46
      ce:	82 60       	ori	r24, 0x02	; 2
      d0:	8e bd       	out	0x2e, r24	; 46
      d2:	83 9b       	sbis	0x10, 3	; 16
      d4:	21 c0       	rjmp	.+66     	; 0x118 <sonar1Read+0x62>
      d6:	1d bc       	out	0x2d, r1	; 45
      d8:	1c bc       	out	0x2c, r1	; 44
      da:	8e b5       	in	r24, 0x2e	; 46
      dc:	82 60       	ori	r24, 0x02	; 2
      de:	8e bd       	out	0x2e, r24	; 46
      e0:	0b c0       	rjmp	.+22     	; 0xf8 <sonar1Read+0x42>
      e2:	8c b5       	in	r24, 0x2c	; 44
      e4:	9d b5       	in	r25, 0x2d	; 45
      e6:	89 38       	cpi	r24, 0x89	; 137
      e8:	93 41       	sbci	r25, 0x13	; 19
      ea:	30 f0       	brcs	.+12     	; 0xf8 <sonar1Read+0x42>
      ec:	1e bc       	out	0x2e, r1	; 46
      ee:	1d bc       	out	0x2d, r1	; 45
      f0:	1c bc       	out	0x2c, r1	; 44
      f2:	8f e6       	ldi	r24, 0x6F	; 111
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	08 95       	ret
      f8:	83 99       	sbic	0x10, 3	; 16
      fa:	f3 cf       	rjmp	.-26     	; 0xe2 <sonar1Read+0x2c>
      fc:	1e bc       	out	0x2e, r1	; 46
      fe:	8c b5       	in	r24, 0x2c	; 44
     100:	9d b5       	in	r25, 0x2d	; 45
     102:	96 95       	lsr	r25
     104:	87 95       	ror	r24
     106:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <pulse1+0x1>
     10a:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <pulse1>
     10e:	1d bc       	out	0x2d, r1	; 45
     110:	1c bc       	out	0x2c, r1	; 44
     112:	20 93 d3 00 	sts	0x00D3, r18	; 0x8000d3 <sonar1_ack>
     116:	0b c0       	rjmp	.+22     	; 0x12e <sonar1Read+0x78>
     118:	8c b5       	in	r24, 0x2c	; 44
     11a:	9d b5       	in	r25, 0x2d	; 45
     11c:	81 31       	cpi	r24, 0x11	; 17
     11e:	97 42       	sbci	r25, 0x27	; 39
     120:	30 f0       	brcs	.+12     	; 0x12e <sonar1Read+0x78>
     122:	1e bc       	out	0x2e, r1	; 46
     124:	1d bc       	out	0x2d, r1	; 45
     126:	1c bc       	out	0x2c, r1	; 44
     128:	80 e7       	ldi	r24, 0x70	; 112
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	08 95       	ret
     12e:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <sonar1_ack>
     132:	88 23       	and	r24, r24
     134:	59 f2       	breq	.-106    	; 0xcc <sonar1Read+0x16>
     136:	60 91 d0 00 	lds	r22, 0x00D0	; 0x8000d0 <pulse1>
     13a:	70 91 d1 00 	lds	r23, 0x00D1	; 0x8000d1 <pulse1+0x1>
     13e:	80 e0       	ldi	r24, 0x00	; 0
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__floatunsisf>
     146:	29 e2       	ldi	r18, 0x29	; 41
     148:	3c e5       	ldi	r19, 0x5C	; 92
     14a:	4f e0       	ldi	r20, 0x0F	; 15
     14c:	5d e3       	ldi	r21, 0x3D	; 61
     14e:	0e 94 9b 09 	call	0x1336	; 0x1336 <__mulsf3>
     152:	20 e0       	ldi	r18, 0x00	; 0
     154:	30 e0       	ldi	r19, 0x00	; 0
     156:	40 e0       	ldi	r20, 0x00	; 0
     158:	5f e3       	ldi	r21, 0x3F	; 63
     15a:	0e 94 9b 09 	call	0x1336	; 0x1336 <__mulsf3>
     15e:	0e 94 b5 08 	call	0x116a	; 0x116a <__fixunssfsi>
     162:	cb 01       	movw	r24, r22
     164:	08 95       	ret

00000166 <sonar2Read>:
     166:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <sonar2_ack>
     16a:	95 98       	cbi	0x12, 5	; 18
     16c:	95 9a       	sbi	0x12, 5	; 18
     16e:	35 e3       	ldi	r19, 0x35	; 53
     170:	3a 95       	dec	r19
     172:	f1 f7       	brne	.-4      	; 0x170 <sonar2Read+0xa>
     174:	00 00       	nop
     176:	95 98       	cbi	0x12, 5	; 18
     178:	21 e0       	ldi	r18, 0x01	; 1
     17a:	2e c0       	rjmp	.+92     	; 0x1d8 <sonar2Read+0x72>
     17c:	8e b5       	in	r24, 0x2e	; 46
     17e:	82 60       	ori	r24, 0x02	; 2
     180:	8e bd       	out	0x2e, r24	; 46
     182:	82 9b       	sbis	0x10, 2	; 16
     184:	1e c0       	rjmp	.+60     	; 0x1c2 <sonar2Read+0x5c>
     186:	1d bc       	out	0x2d, r1	; 45
     188:	1c bc       	out	0x2c, r1	; 44
     18a:	0b c0       	rjmp	.+22     	; 0x1a2 <sonar2Read+0x3c>
     18c:	8c b5       	in	r24, 0x2c	; 44
     18e:	9d b5       	in	r25, 0x2d	; 45
     190:	89 38       	cpi	r24, 0x89	; 137
     192:	93 41       	sbci	r25, 0x13	; 19
     194:	30 f0       	brcs	.+12     	; 0x1a2 <sonar2Read+0x3c>
     196:	1e bc       	out	0x2e, r1	; 46
     198:	1d bc       	out	0x2d, r1	; 45
     19a:	1c bc       	out	0x2c, r1	; 44
     19c:	8f e6       	ldi	r24, 0x6F	; 111
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	08 95       	ret
     1a2:	82 99       	sbic	0x10, 2	; 16
     1a4:	f3 cf       	rjmp	.-26     	; 0x18c <sonar2Read+0x26>
     1a6:	1e bc       	out	0x2e, r1	; 46
     1a8:	8c b5       	in	r24, 0x2c	; 44
     1aa:	9d b5       	in	r25, 0x2d	; 45
     1ac:	96 95       	lsr	r25
     1ae:	87 95       	ror	r24
     1b0:	90 93 cf 00 	sts	0x00CF, r25	; 0x8000cf <pulse2+0x1>
     1b4:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <pulse2>
     1b8:	1d bc       	out	0x2d, r1	; 45
     1ba:	1c bc       	out	0x2c, r1	; 44
     1bc:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <sonar2_ack>
     1c0:	0b c0       	rjmp	.+22     	; 0x1d8 <sonar2Read+0x72>
     1c2:	8c b5       	in	r24, 0x2c	; 44
     1c4:	9d b5       	in	r25, 0x2d	; 45
     1c6:	81 31       	cpi	r24, 0x11	; 17
     1c8:	97 42       	sbci	r25, 0x27	; 39
     1ca:	30 f0       	brcs	.+12     	; 0x1d8 <sonar2Read+0x72>
     1cc:	1e bc       	out	0x2e, r1	; 46
     1ce:	1d bc       	out	0x2d, r1	; 45
     1d0:	1c bc       	out	0x2c, r1	; 44
     1d2:	80 e7       	ldi	r24, 0x70	; 112
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	08 95       	ret
     1d8:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <sonar2_ack>
     1dc:	88 23       	and	r24, r24
     1de:	71 f2       	breq	.-100    	; 0x17c <sonar2Read+0x16>
     1e0:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <pulse2>
     1e4:	70 91 cf 00 	lds	r23, 0x00CF	; 0x8000cf <pulse2+0x1>
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__floatunsisf>
     1f0:	29 e2       	ldi	r18, 0x29	; 41
     1f2:	3c e5       	ldi	r19, 0x5C	; 92
     1f4:	4f e0       	ldi	r20, 0x0F	; 15
     1f6:	5d e3       	ldi	r21, 0x3D	; 61
     1f8:	0e 94 9b 09 	call	0x1336	; 0x1336 <__mulsf3>
     1fc:	20 e0       	ldi	r18, 0x00	; 0
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	40 e0       	ldi	r20, 0x00	; 0
     202:	5f e3       	ldi	r21, 0x3F	; 63
     204:	0e 94 9b 09 	call	0x1336	; 0x1336 <__mulsf3>
     208:	0e 94 b5 08 	call	0x116a	; 0x116a <__fixunssfsi>
     20c:	cb 01       	movw	r24, r22
     20e:	08 95       	ret

00000210 <sensorValueConversion>:
     210:	9f 92       	push	r9
     212:	af 92       	push	r10
     214:	bf 92       	push	r11
     216:	cf 92       	push	r12
     218:	df 92       	push	r13
     21a:	ef 92       	push	r14
     21c:	ff 92       	push	r15
     21e:	0f 93       	push	r16
     220:	1f 93       	push	r17
     222:	cf 93       	push	r28
     224:	df 93       	push	r29
     226:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <sensorCount>
     22a:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <leftFlag>
     22e:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <rightFlag>
     232:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <allFlag>
     236:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <rightAcuteFlag>
     23a:	10 92 d4 00 	sts	0x00D4, r1	; 0x8000d4 <leftAcuteFlag>
     23e:	0f 2e       	mov	r0, r31
     240:	f4 e9       	ldi	r31, 0x94	; 148
     242:	cf 2e       	mov	r12, r31
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	df 2e       	mov	r13, r31
     248:	f0 2d       	mov	r31, r0
     24a:	0f ef       	ldi	r16, 0xFF	; 255
     24c:	1f ef       	ldi	r17, 0xFF	; 255
     24e:	0f 2e       	mov	r0, r31
     250:	fe ef       	ldi	r31, 0xFE	; 254
     252:	ff 2e       	mov	r15, r31
     254:	f0 2d       	mov	r31, r0
     256:	d1 e0       	ldi	r29, 0x01	; 1
     258:	c0 e0       	ldi	r28, 0x00	; 0
     25a:	0f 2e       	mov	r0, r31
     25c:	f5 e0       	ldi	r31, 0x05	; 5
     25e:	bf 2e       	mov	r11, r31
     260:	f0 2d       	mov	r31, r0
     262:	a1 2c       	mov	r10, r1
     264:	e1 2c       	mov	r14, r1
     266:	99 24       	eor	r9, r9
     268:	93 94       	inc	r9
     26a:	06 c0       	rjmp	.+12     	; 0x278 <sensorValueConversion+0x68>
     26c:	cf 5f       	subi	r28, 0xFF	; 255
     26e:	df 5f       	subi	r29, 0xFF	; 255
     270:	f3 94       	inc	r15
     272:	f3 94       	inc	r15
     274:	0f 5f       	subi	r16, 0xFF	; 255
     276:	1f 4f       	sbci	r17, 0xFF	; 255
     278:	8c 2f       	mov	r24, r28
     27a:	0e 94 4f 00 	call	0x9e	; 0x9e <adcRead>
     27e:	f6 01       	movw	r30, r12
     280:	21 91       	ld	r18, Z+
     282:	31 91       	ld	r19, Z+
     284:	6f 01       	movw	r12, r30
     286:	82 17       	cp	r24, r18
     288:	93 07       	cpc	r25, r19
     28a:	f0 f4       	brcc	.+60     	; 0x2c8 <sensorValueConversion+0xb8>
     28c:	c1 11       	cpse	r28, r1
     28e:	03 c0       	rjmp	.+6      	; 0x296 <sensorValueConversion+0x86>
     290:	90 92 d7 00 	sts	0x00D7, r9	; 0x8000d7 <leftFlag>
     294:	eb cf       	rjmp	.-42     	; 0x26c <sensorValueConversion+0x5c>
     296:	c7 30       	cpi	r28, 0x07	; 7
     298:	21 f4       	brne	.+8      	; 0x2a2 <sensorValueConversion+0x92>
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <rightFlag>
     2a0:	15 c0       	rjmp	.+42     	; 0x2cc <sensorValueConversion+0xbc>
     2a2:	8b 2d       	mov	r24, r11
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	08 17       	cp	r16, r24
     2a8:	19 07       	cpc	r17, r25
     2aa:	14 f4       	brge	.+4      	; 0x2b0 <sensorValueConversion+0xa0>
     2ac:	b0 2e       	mov	r11, r16
     2ae:	06 c0       	rjmp	.+12     	; 0x2bc <sensorValueConversion+0xac>
     2b0:	8a 2d       	mov	r24, r10
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	80 17       	cp	r24, r16
     2b6:	91 07       	cpc	r25, r17
     2b8:	0c f4       	brge	.+2      	; 0x2bc <sensorValueConversion+0xac>
     2ba:	a0 2e       	mov	r10, r16
     2bc:	ef 0c       	add	r14, r15
     2be:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <sensorCount>
     2c2:	8f 5f       	subi	r24, 0xFF	; 255
     2c4:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <sensorCount>
     2c8:	d8 30       	cpi	r29, 0x08	; 8
     2ca:	80 f2       	brcs	.-96     	; 0x26c <sensorValueConversion+0x5c>
     2cc:	20 91 db 00 	lds	r18, 0x00DB	; 0x8000db <sensorCount>
     2d0:	42 2f       	mov	r20, r18
     2d2:	50 e0       	ldi	r21, 0x00	; 0
     2d4:	8a 2d       	mov	r24, r10
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	8b 19       	sub	r24, r11
     2da:	91 09       	sbc	r25, r1
     2dc:	01 96       	adiw	r24, 0x01	; 1
     2de:	48 17       	cp	r20, r24
     2e0:	59 07       	cpc	r21, r25
     2e2:	11 f5       	brne	.+68     	; 0x328 <sensorValueConversion+0x118>
     2e4:	f5 e0       	ldi	r31, 0x05	; 5
     2e6:	af 12       	cpse	r10, r31
     2e8:	06 c0       	rjmp	.+12     	; 0x2f6 <sensorValueConversion+0xe6>
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	8b 15       	cp	r24, r11
     2ee:	80 f4       	brcc	.+32     	; 0x310 <sensorValueConversion+0x100>
     2f0:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <rightAcuteFlag>
     2f4:	11 c0       	rjmp	.+34     	; 0x318 <sensorValueConversion+0x108>
     2f6:	b1 10       	cpse	r11, r1
     2f8:	0b c0       	rjmp	.+22     	; 0x310 <sensorValueConversion+0x100>
     2fa:	e3 e0       	ldi	r30, 0x03	; 3
     2fc:	ea 15       	cp	r30, r10
     2fe:	40 f0       	brcs	.+16     	; 0x310 <sensorValueConversion+0x100>
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <leftAcuteFlag>
     306:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <rightAcuteFlag>
     30a:	81 30       	cpi	r24, 0x01	; 1
     30c:	69 f4       	brne	.+26     	; 0x328 <sensorValueConversion+0x118>
     30e:	08 c0       	rjmp	.+16     	; 0x320 <sensorValueConversion+0x110>
     310:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <rightAcuteFlag>
     314:	81 30       	cpi	r24, 0x01	; 1
     316:	41 f4       	brne	.+16     	; 0x328 <sensorValueConversion+0x118>
     318:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <leftAcuteFlag>
     31c:	81 30       	cpi	r24, 0x01	; 1
     31e:	21 f4       	brne	.+8      	; 0x328 <sensorValueConversion+0x118>
     320:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <rightAcuteFlag>
     324:	10 92 d4 00 	sts	0x00D4, r1	; 0x8000d4 <leftAcuteFlag>
     328:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <leftFlag>
     32c:	81 30       	cpi	r24, 0x01	; 1
     32e:	51 f4       	brne	.+20     	; 0x344 <sensorValueConversion+0x134>
     330:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <rightFlag>
     334:	81 30       	cpi	r24, 0x01	; 1
     336:	31 f4       	brne	.+12     	; 0x344 <sensorValueConversion+0x134>
     338:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <leftFlag>
     33c:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <rightFlag>
     340:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <allFlag>
     344:	8e 2d       	mov	r24, r14
     346:	62 2f       	mov	r22, r18
     348:	0e 94 08 0a 	call	0x1410	; 0x1410 <__udivmodqi4>
     34c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <weightedValue>
     350:	26 30       	cpi	r18, 0x06	; 6
     352:	71 f4       	brne	.+28     	; 0x370 <sensorValueConversion+0x160>
     354:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <allFlag>
     358:	81 30       	cpi	r24, 0x01	; 1
     35a:	51 f4       	brne	.+20     	; 0x370 <sensorValueConversion+0x160>
     35c:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <stopFlag>
     360:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <stopFlag+0x1>
     364:	01 96       	adiw	r24, 0x01	; 1
     366:	90 93 da 00 	sts	0x00DA, r25	; 0x8000da <stopFlag+0x1>
     36a:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <stopFlag>
     36e:	04 c0       	rjmp	.+8      	; 0x378 <sensorValueConversion+0x168>
     370:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <stopFlag+0x1>
     374:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <stopFlag>
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	1f 91       	pop	r17
     37e:	0f 91       	pop	r16
     380:	ff 90       	pop	r15
     382:	ef 90       	pop	r14
     384:	df 90       	pop	r13
     386:	cf 90       	pop	r12
     388:	bf 90       	pop	r11
     38a:	af 90       	pop	r10
     38c:	9f 90       	pop	r9
     38e:	08 95       	ret

00000390 <setTimer>:
	
}

void setTimer(uint16_t durationMicros)
{
	duration = durationMicros;
     390:	90 93 f2 00 	sts	0x00F2, r25	; 0x8000f2 <duration+0x1>
     394:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <duration>
	TIMSK |= (1 << OCIE1A);										// Set Timer1 Interrupt ON
     398:	89 b7       	in	r24, 0x39	; 57
     39a:	80 61       	ori	r24, 0x10	; 16
     39c:	89 bf       	out	0x39, r24	; 57
	sei();														// Set Global Interrupt
     39e:	78 94       	sei
	TCNT1 = 0;													// Reset Timer Count
     3a0:	1d bc       	out	0x2d, r1	; 45
     3a2:	1c bc       	out	0x2c, r1	; 44
	OCR1A = 0xF9;												// Compare Value for 1ms
     3a4:	89 ef       	ldi	r24, 0xF9	; 249
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	9b bd       	out	0x2b, r25	; 43
     3aa:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1 << CS10) | (1 << CS11) | (1 << WGM12);			// Set Prescaler to 64 and CTC Mode
     3ac:	8e b5       	in	r24, 0x2e	; 46
     3ae:	8b 60       	ori	r24, 0x0B	; 11
     3b0:	8e bd       	out	0x2e, r24	; 46
     3b2:	08 95       	ret

000003b4 <timerOff>:
}

void timerOff(void)
{
	TCCR1B = 0x00;
     3b4:	1e bc       	out	0x2e, r1	; 46
	TIMSK = 0x00;
     3b6:	19 be       	out	0x39, r1	; 57
	cli();
     3b8:	f8 94       	cli
	TCNT1 = 0;
     3ba:	1d bc       	out	0x2d, r1	; 45
     3bc:	1c bc       	out	0x2c, r1	; 44
     3be:	08 95       	ret

000003c0 <__vector_7>:
}

ISR(TIMER1_COMPA_vect)
{
     3c0:	1f 92       	push	r1
     3c2:	0f 92       	push	r0
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	0f 92       	push	r0
     3c8:	11 24       	eor	r1, r1
     3ca:	2f 93       	push	r18
     3cc:	3f 93       	push	r19
     3ce:	8f 93       	push	r24
     3d0:	9f 93       	push	r25
	timerOverflow++;
     3d2:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <timerOverflow>
     3d6:	90 91 f4 00 	lds	r25, 0x00F4	; 0x8000f4 <timerOverflow+0x1>
     3da:	01 96       	adiw	r24, 0x01	; 1
     3dc:	90 93 f4 00 	sts	0x00F4, r25	; 0x8000f4 <timerOverflow+0x1>
     3e0:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <timerOverflow>
	TCNT1 = 0;
     3e4:	1d bc       	out	0x2d, r1	; 45
     3e6:	1c bc       	out	0x2c, r1	; 44
	if (timerOverflow >= duration)
     3e8:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <timerOverflow>
     3ec:	30 91 f4 00 	lds	r19, 0x00F4	; 0x8000f4 <timerOverflow+0x1>
     3f0:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <duration>
     3f4:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <duration+0x1>
     3f8:	28 17       	cp	r18, r24
     3fa:	39 07       	cpc	r19, r25
     3fc:	50 f0       	brcs	.+20     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	{
		TCCR1B |= 0;
     3fe:	8e b5       	in	r24, 0x2e	; 46
     400:	8e bd       	out	0x2e, r24	; 46
		timerFlag = 1;
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <timerFlag>
		timerOverflow = 0;
     408:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <timerOverflow+0x1>
     40c:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <timerOverflow>
		cli();
     410:	f8 94       	cli
	}
}
     412:	9f 91       	pop	r25
     414:	8f 91       	pop	r24
     416:	3f 91       	pop	r19
     418:	2f 91       	pop	r18
     41a:	0f 90       	pop	r0
     41c:	0f be       	out	0x3f, r0	; 63
     41e:	0f 90       	pop	r0
     420:	1f 90       	pop	r1
     422:	18 95       	reti

00000424 <setRotationForward>:
	motor2b_PORT &= ~(1 << motor2b_PIN);
}

void setRotationForward(void)
{
	enable1(0);
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	0e 94 f8 07 	call	0xff0	; 0xff0 <PWM0>
	enable2(0);
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 fa 07 	call	0xff4	; 0xff4 <PWM2>
	
	motor1a_PORT |= (1 << motor1a_PIN);
     434:	af 9a       	sbi	0x15, 7	; 21
	motor1b_PORT &= ~(1 << motor1b_PIN);
     436:	ae 98       	cbi	0x15, 6	; 21
	motor2a_PORT |= (1 << motor2a_PIN);
     438:	ad 9a       	sbi	0x15, 5	; 21
	motor2b_PORT &= ~(1 << motor2b_PIN);
     43a:	ac 98       	cbi	0x15, 4	; 21
     43c:	08 95       	ret

0000043e <setRotationLeftSharp>:
}

void setRotationLeftSharp(void)
{
	enable1(0);
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 f8 07 	call	0xff0	; 0xff0 <PWM0>
	enable2(0);
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	0e 94 fa 07 	call	0xff4	; 0xff4 <PWM2>
	
	motor1a_PORT &= ~(1 << motor1a_PIN);
     44e:	af 98       	cbi	0x15, 7	; 21
	motor1b_PORT |= (1 << motor1b_PIN);
     450:	ae 9a       	sbi	0x15, 6	; 21
	motor2a_PORT |= (1 << motor2a_PIN);
     452:	ad 9a       	sbi	0x15, 5	; 21
	motor2b_PORT &= ~(1 << motor2b_PIN);
     454:	ac 98       	cbi	0x15, 4	; 21
     456:	08 95       	ret

00000458 <setRotationRightSharp>:
}

void setRotationRightSharp(void)
{
	enable1(0);
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 f8 07 	call	0xff0	; 0xff0 <PWM0>
	enable2(0);
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	0e 94 fa 07 	call	0xff4	; 0xff4 <PWM2>
	
	motor1a_PORT |= (1 << motor1a_PIN);
     468:	af 9a       	sbi	0x15, 7	; 21
	motor1b_PORT &= ~(1 << motor1b_PIN);
     46a:	ae 98       	cbi	0x15, 6	; 21
	motor2a_PORT &= ~(1 << motor2a_PIN);
     46c:	ad 98       	cbi	0x15, 5	; 21
	motor2b_PORT |= (1 << motor2b_PIN);
     46e:	ac 9a       	sbi	0x15, 4	; 21
     470:	08 95       	ret

00000472 <PID_Correction>:
		cli();
	}
}

void PID_Correction(void)
{
     472:	8f 92       	push	r8
     474:	9f 92       	push	r9
     476:	af 92       	push	r10
     478:	bf 92       	push	r11
     47a:	cf 92       	push	r12
     47c:	df 92       	push	r13
     47e:	ef 92       	push	r14
     480:	ff 92       	push	r15
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
	error = weightedValue - setPoint;
     486:	60 91 dc 00 	lds	r22, 0x00DC	; 0x8000dc <weightedValue>
     48a:	70 e0       	ldi	r23, 0x00	; 0
     48c:	65 50       	subi	r22, 0x05	; 5
     48e:	71 09       	sbc	r23, r1
     490:	07 2e       	mov	r0, r23
     492:	00 0c       	add	r0, r0
     494:	88 0b       	sbc	r24, r24
     496:	99 0b       	sbc	r25, r25
     498:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__floatsisf>
     49c:	6b 01       	movw	r12, r22
     49e:	7c 01       	movw	r14, r24
     4a0:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <error>
     4a4:	70 93 ed 00 	sts	0x00ED, r23	; 0x8000ed <error+0x1>
     4a8:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <error+0x2>
     4ac:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <error+0x3>

	correction = ((Kp * error) + (Kd * (error - prev_error))/* + (Ki * sum_error)*/);
     4b0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <prev_error>
     4b4:	30 91 e9 00 	lds	r19, 0x00E9	; 0x8000e9 <prev_error+0x1>
     4b8:	40 91 ea 00 	lds	r20, 0x00EA	; 0x8000ea <prev_error+0x2>
     4bc:	50 91 eb 00 	lds	r21, 0x00EB	; 0x8000eb <prev_error+0x3>
     4c0:	0e 94 3c 08 	call	0x1078	; 0x1078 <__subsf3>
     4c4:	4b 01       	movw	r8, r22
     4c6:	5c 01       	movw	r10, r24
     4c8:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Kd>
     4cc:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Kd+0x1>
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__floatunsisf>
     4d8:	9b 01       	movw	r18, r22
     4da:	ac 01       	movw	r20, r24
     4dc:	c5 01       	movw	r24, r10
     4de:	b4 01       	movw	r22, r8
     4e0:	0e 94 9b 09 	call	0x1336	; 0x1336 <__mulsf3>
     4e4:	4b 01       	movw	r8, r22
     4e6:	5c 01       	movw	r10, r24
     4e8:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <Kp>
     4ec:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <Kp+0x1>
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__floatunsisf>
     4f8:	a7 01       	movw	r20, r14
     4fa:	96 01       	movw	r18, r12
     4fc:	0e 94 9b 09 	call	0x1336	; 0x1336 <__mulsf3>
     500:	9b 01       	movw	r18, r22
     502:	ac 01       	movw	r20, r24
     504:	c5 01       	movw	r24, r10
     506:	b4 01       	movw	r22, r8
     508:	0e 94 3d 08 	call	0x107a	; 0x107a <__addsf3>
     50c:	60 93 e4 00 	sts	0x00E4, r22	; 0x8000e4 <correction>
     510:	70 93 e5 00 	sts	0x00E5, r23	; 0x8000e5 <correction+0x1>
     514:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <correction+0x2>
     518:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <correction+0x3>

	prev_error = error;
     51c:	c0 92 e8 00 	sts	0x00E8, r12	; 0x8000e8 <prev_error>
     520:	d0 92 e9 00 	sts	0x00E9, r13	; 0x8000e9 <prev_error+0x1>
     524:	e0 92 ea 00 	sts	0x00EA, r14	; 0x8000ea <prev_error+0x2>
     528:	f0 92 eb 00 	sts	0x00EB, r15	; 0x8000eb <prev_error+0x3>
	motorResponse = (int)correction;
     52c:	0e 94 ae 08 	call	0x115c	; 0x115c <__fixsfsi>
     530:	70 93 e3 00 	sts	0x00E3, r23	; 0x8000e3 <motorResponse+0x1>
     534:	60 93 e2 00 	sts	0x00E2, r22	; 0x8000e2 <motorResponse>

	if(motorResponse > maxSpeed)
     538:	6f 3f       	cpi	r22, 0xFF	; 255
     53a:	71 05       	cpc	r23, r1
     53c:	c1 f0       	breq	.+48     	; 0x56e <PID_Correction+0xfc>
     53e:	bc f0       	brlt	.+46     	; 0x56e <PID_Correction+0xfc>
	{
		reverseSpeed = (motorResponse - maxSpeed);
     540:	6f 5f       	subi	r22, 0xFF	; 255
     542:	60 93 dd 00 	sts	0x00DD, r22	; 0x8000dd <reverseSpeed>
		if (reverseSpeed > maxSpeed) reverseSpeed = maxSpeed;
		motorResponse = maxSpeed;
     546:	cf ef       	ldi	r28, 0xFF	; 255
     548:	d0 e0       	ldi	r29, 0x00	; 0
     54a:	d0 93 e3 00 	sts	0x00E3, r29	; 0x8000e3 <motorResponse+0x1>
     54e:	c0 93 e2 00 	sts	0x00E2, r28	; 0x8000e2 <motorResponse>
		
		setRotationRightSharp();
     552:	0e 94 2c 02 	call	0x458	; 0x458 <setRotationRightSharp>
		
		RMspeed = reverseSpeed;
     556:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <reverseSpeed>
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <RMspeed+0x1>
     560:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <RMspeed>
		LMspeed = maxSpeed/* - (maxSpeed / speedCoefficient)*/;
     564:	d0 93 e1 00 	sts	0x00E1, r29	; 0x8000e1 <LMspeed+0x1>
     568:	c0 93 e0 00 	sts	0x00E0, r28	; 0x8000e0 <LMspeed>
     56c:	4d c0       	rjmp	.+154    	; 0x608 <PID_Correction+0x196>
	}
	
	else if(motorResponse < -maxSpeed)
     56e:	61 30       	cpi	r22, 0x01	; 1
     570:	4f ef       	ldi	r20, 0xFF	; 255
     572:	74 07       	cpc	r23, r20
     574:	dc f4       	brge	.+54     	; 0x5ac <PID_Correction+0x13a>
	{
		reverseSpeed = (-motorResponse - maxSpeed);
     576:	21 e0       	ldi	r18, 0x01	; 1
     578:	82 2f       	mov	r24, r18
     57a:	86 1b       	sub	r24, r22
     57c:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <reverseSpeed>
		if (reverseSpeed > maxSpeed) reverseSpeed = maxSpeed;
		motorResponse = -maxSpeed;
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	9f ef       	ldi	r25, 0xFF	; 255
     584:	90 93 e3 00 	sts	0x00E3, r25	; 0x8000e3 <motorResponse+0x1>
     588:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <motorResponse>
		
		setRotationLeftSharp();
     58c:	0e 94 1f 02 	call	0x43e	; 0x43e <setRotationLeftSharp>
		
		RMspeed = maxSpeed;
     590:	8f ef       	ldi	r24, 0xFF	; 255
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <RMspeed+0x1>
     598:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <RMspeed>
		LMspeed = reverseSpeed;
     59c:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <reverseSpeed>
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <LMspeed+0x1>
     5a6:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <LMspeed>
     5aa:	2e c0       	rjmp	.+92     	; 0x608 <PID_Correction+0x196>
	}
	


	else if(motorResponse >= 0 && motorResponse < maxSpeed)
     5ac:	6f 3f       	cpi	r22, 0xFF	; 255
     5ae:	71 05       	cpc	r23, r1
     5b0:	a0 f4       	brcc	.+40     	; 0x5da <PID_Correction+0x168>
	{
		setRotationForward();
     5b2:	0e 94 12 02 	call	0x424	; 0x424 <setRotationForward>
		
		RMspeed = maxSpeed - motorResponse/* - (maxSpeed / speedCoefficient)*/;
     5b6:	8f ef       	ldi	r24, 0xFF	; 255
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	20 91 e2 00 	lds	r18, 0x00E2	; 0x8000e2 <motorResponse>
     5be:	30 91 e3 00 	lds	r19, 0x00E3	; 0x8000e3 <motorResponse+0x1>
     5c2:	ac 01       	movw	r20, r24
     5c4:	42 1b       	sub	r20, r18
     5c6:	53 0b       	sbc	r21, r19
     5c8:	50 93 df 00 	sts	0x00DF, r21	; 0x8000df <RMspeed+0x1>
     5cc:	40 93 de 00 	sts	0x00DE, r20	; 0x8000de <RMspeed>
		LMspeed = maxSpeed;		
     5d0:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <LMspeed+0x1>
     5d4:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <LMspeed>
     5d8:	17 c0       	rjmp	.+46     	; 0x608 <PID_Correction+0x196>
	}

	else if(motorResponse < 0 && motorResponse > -maxSpeed)
     5da:	62 50       	subi	r22, 0x02	; 2
     5dc:	7f 4f       	sbci	r23, 0xFF	; 255
     5de:	6e 3f       	cpi	r22, 0xFE	; 254
     5e0:	71 05       	cpc	r23, r1
     5e2:	90 f4       	brcc	.+36     	; 0x608 <PID_Correction+0x196>
	{
		setRotationForward();
     5e4:	0e 94 12 02 	call	0x424	; 0x424 <setRotationForward>
		
		RMspeed = maxSpeed/* - (maxSpeed / speedCoefficient)*/;
     5e8:	8f ef       	ldi	r24, 0xFF	; 255
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <RMspeed+0x1>
     5f0:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <RMspeed>
		LMspeed = maxSpeed + motorResponse;
     5f4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <motorResponse>
     5f8:	90 91 e3 00 	lds	r25, 0x00E3	; 0x8000e3 <motorResponse+0x1>
     5fc:	81 50       	subi	r24, 0x01	; 1
     5fe:	9f 4f       	sbci	r25, 0xFF	; 255
     600:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <LMspeed+0x1>
     604:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <LMspeed>
// 	if (RMspeed < 0) RMspeed = 0;
// 	if (RMspeed > maxSpeed) RMspeed = maxSpeed;
// 	if (LMspeed < 0) LMspeed = 0;
// 	if (LMspeed > maxSpeed) LMspeed = maxSpeed;
// 
}
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	ff 90       	pop	r15
     60e:	ef 90       	pop	r14
     610:	df 90       	pop	r13
     612:	cf 90       	pop	r12
     614:	bf 90       	pop	r11
     616:	af 90       	pop	r10
     618:	9f 90       	pop	r9
     61a:	8f 90       	pop	r8
     61c:	08 95       	ret

0000061e <Forward>:
	motor2b_PORT |= (1 << motor2b_PIN);
}

void Forward(void)
{
	enable1(0);
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	0e 94 f8 07 	call	0xff0	; 0xff0 <PWM0>
	enable2(0);
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	0e 94 fa 07 	call	0xff4	; 0xff4 <PWM2>
	
	motor1a_PORT |= (1 << motor1a_PIN);
     62e:	af 9a       	sbi	0x15, 7	; 21
	motor1b_PORT &= ~(1 << motor1b_PIN);
     630:	ae 98       	cbi	0x15, 6	; 21
	motor2a_PORT |= (1 << motor2a_PIN);
     632:	ad 9a       	sbi	0x15, 5	; 21
	motor2b_PORT &= ~(1 << motor2b_PIN);
     634:	ac 98       	cbi	0x15, 4	; 21

	enable1(maxSpeed);
     636:	8f ef       	ldi	r24, 0xFF	; 255
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	0e 94 f8 07 	call	0xff0	; 0xff0 <PWM0>
	enable2(maxSpeed);
     63e:	8f ef       	ldi	r24, 0xFF	; 255
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	0e 94 fa 07 	call	0xff4	; 0xff4 <PWM2>
     646:	08 95       	ret

00000648 <Backward>:
}

void Backward(void)
{
	enable1(0);
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	0e 94 f8 07 	call	0xff0	; 0xff0 <PWM0>
	enable2(0);
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	0e 94 fa 07 	call	0xff4	; 0xff4 <PWM2>
	
	motor1a_PORT &= ~(1 << motor1a_PIN);
     658:	af 98       	cbi	0x15, 7	; 21
	motor1b_PORT |= (1 << motor1b_PIN);
     65a:	ae 9a       	sbi	0x15, 6	; 21
	motor2a_PORT &= ~(1 << motor2a_PIN);
     65c:	ad 98       	cbi	0x15, 5	; 21
	motor2b_PORT |= (1 << motor2b_PIN);
     65e:	ac 9a       	sbi	0x15, 4	; 21

	enable1(130);
     660:	82 e8       	ldi	r24, 0x82	; 130
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	0e 94 f8 07 	call	0xff0	; 0xff0 <PWM0>
	enable2(130);
     668:	82 e8       	ldi	r24, 0x82	; 130
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	0e 94 fa 07 	call	0xff4	; 0xff4 <PWM2>
     670:	08 95       	ret

00000672 <Stop>:
// 
}

void Stop(void)
{
	Backward();
     672:	0e 94 24 03 	call	0x648	; 0x648 <Backward>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     676:	8f e8       	ldi	r24, 0x8F	; 143
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	01 97       	sbiw	r24, 0x01	; 1
     67c:	f1 f7       	brne	.-4      	; 0x67a <Stop+0x8>
     67e:	00 c0       	rjmp	.+0      	; 0x680 <Stop+0xe>
     680:	00 00       	nop
	_delay_us(100);
	enable1(0);
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0e 94 f8 07 	call	0xff0	; 0xff0 <PWM0>
	enable2(0);
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	0e 94 fa 07 	call	0xff4	; 0xff4 <PWM2>
	
	motor1a_PORT &= ~(1 << motor1a_PIN);
     692:	af 98       	cbi	0x15, 7	; 21
	motor1b_PORT &= ~(1 << motor1b_PIN);
     694:	ae 98       	cbi	0x15, 6	; 21
	motor2a_PORT &= ~(1 << motor2a_PIN);
     696:	ad 98       	cbi	0x15, 5	; 21
	motor2b_PORT &= ~(1 << motor2b_PIN);
     698:	ac 98       	cbi	0x15, 4	; 21
     69a:	08 95       	ret

0000069c <RightSharp>:
	enable1(130);
	enable2(130);
}

void RightSharp(uint8_t motorSpeed)
{
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	c8 2f       	mov	r28, r24
	enable1(0);
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	0e 94 f8 07 	call	0xff0	; 0xff0 <PWM0>
	enable2(0);
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	0e 94 fa 07 	call	0xff4	; 0xff4 <PWM2>
	
	motor1a_PORT |= (1 << motor1a_PIN);
     6b2:	af 9a       	sbi	0x15, 7	; 21
	motor1b_PORT &= ~(1 << motor1b_PIN);
     6b4:	ae 98       	cbi	0x15, 6	; 21
	motor2a_PORT &= ~(1 << motor2a_PIN);
     6b6:	ad 98       	cbi	0x15, 5	; 21
	motor2b_PORT |= (1 << motor2b_PIN);
     6b8:	ac 9a       	sbi	0x15, 4	; 21

	enable1(motorSpeed);
     6ba:	d0 e0       	ldi	r29, 0x00	; 0
     6bc:	ce 01       	movw	r24, r28
     6be:	0e 94 f8 07 	call	0xff0	; 0xff0 <PWM0>
	enable2(motorSpeed);
     6c2:	ce 01       	movw	r24, r28
     6c4:	0e 94 fa 07 	call	0xff4	; 0xff4 <PWM2>
}
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	08 95       	ret

000006ce <autoCalibration>:
	OCR1A = timerlimit;
	TCCR1B |= (1 << CS12) | (1 << CS10);
}

void autoCalibration(void)
{
     6ce:	5f 92       	push	r5
     6d0:	6f 92       	push	r6
     6d2:	7f 92       	push	r7
     6d4:	8f 92       	push	r8
     6d6:	9f 92       	push	r9
     6d8:	af 92       	push	r10
     6da:	bf 92       	push	r11
     6dc:	cf 92       	push	r12
     6de:	df 92       	push	r13
     6e0:	ef 92       	push	r14
     6e2:	ff 92       	push	r15
     6e4:	0f 93       	push	r16
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
	int currentValue = 0;
	setTimer(2000);
     6ec:	80 ed       	ldi	r24, 0xD0	; 208
     6ee:	97 e0       	ldi	r25, 0x07	; 7
     6f0:	0e 94 c8 01 	call	0x390	; 0x390 <setTimer>
	
	RightSharp(170);
     6f4:	8a ea       	ldi	r24, 0xAA	; 170
     6f6:	0e 94 4e 03 	call	0x69c	; 0x69c <RightSharp>
	while (timerFlag == 0)
     6fa:	1d c0       	rjmp	.+58     	; 0x736 <autoCalibration+0x68>
	{
		for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
		{
			currentValue = adcRead(sensorNumber);
     6fc:	8c 2f       	mov	r24, r28
     6fe:	0e 94 4f 00 	call	0x9e	; 0x9e <adcRead>
			if(currentValue > SensorMaxValue[sensorNumber]) SensorMaxValue[sensorNumber] = currentValue;
     702:	28 2f       	mov	r18, r24
     704:	39 2f       	mov	r19, r25
     706:	f7 01       	movw	r30, r14
     708:	40 81       	ld	r20, Z
     70a:	51 81       	ldd	r21, Z+1	; 0x01
     70c:	42 17       	cp	r20, r18
     70e:	53 07       	cpc	r21, r19
     710:	10 f4       	brcc	.+4      	; 0x716 <autoCalibration+0x48>
     712:	80 83       	st	Z, r24
     714:	91 83       	std	Z+1, r25	; 0x01
			if(currentValue < SensorMinValue[sensorNumber]) SensorMinValue[sensorNumber] = currentValue;
     716:	f8 01       	movw	r30, r16
     718:	40 81       	ld	r20, Z
     71a:	51 81       	ldd	r21, Z+1	; 0x01
     71c:	24 17       	cp	r18, r20
     71e:	35 07       	cpc	r19, r21
     720:	10 f4       	brcc	.+4      	; 0x726 <autoCalibration+0x58>
     722:	80 83       	st	Z, r24
     724:	91 83       	std	Z+1, r25	; 0x01
	setTimer(2000);
	
	RightSharp(170);
	while (timerFlag == 0)
	{
		for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
     726:	cf 5f       	subi	r28, 0xFF	; 255
     728:	f2 e0       	ldi	r31, 0x02	; 2
     72a:	ef 0e       	add	r14, r31
     72c:	f1 1c       	adc	r15, r1
     72e:	0e 5f       	subi	r16, 0xFE	; 254
     730:	1f 4f       	sbci	r17, 0xFF	; 255
     732:	c8 30       	cpi	r28, 0x08	; 8
     734:	19 f7       	brne	.-58     	; 0x6fc <autoCalibration+0x2e>
{
	int currentValue = 0;
	setTimer(2000);
	
	RightSharp(170);
	while (timerFlag == 0)
     736:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <timerFlag>
     73a:	81 11       	cpse	r24, r1
     73c:	0a c0       	rjmp	.+20     	; 0x752 <autoCalibration+0x84>
     73e:	0f 2e       	mov	r0, r31
     740:	f6 ef       	ldi	r31, 0xF6	; 246
     742:	ef 2e       	mov	r14, r31
     744:	f0 e0       	ldi	r31, 0x00	; 0
     746:	ff 2e       	mov	r15, r31
     748:	f0 2d       	mov	r31, r0
     74a:	04 e6       	ldi	r16, 0x64	; 100
     74c:	10 e0       	ldi	r17, 0x00	; 0
     74e:	c0 e0       	ldi	r28, 0x00	; 0
     750:	d5 cf       	rjmp	.-86     	; 0x6fc <autoCalibration+0x2e>
			currentValue = adcRead(sensorNumber);
			if(currentValue > SensorMaxValue[sensorNumber]) SensorMaxValue[sensorNumber] = currentValue;
			if(currentValue < SensorMinValue[sensorNumber]) SensorMinValue[sensorNumber] = currentValue;
		}
	}
	timerFlag = 0;
     752:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <timerFlag>
	timerOff();
     756:	0e 94 da 01 	call	0x3b4	; 0x3b4 <timerOff>
	Stop();
     75a:	0e 94 39 03 	call	0x672	; 0x672 <Stop>
	Serial_sendString("MAX\t");
     75e:	87 ea       	ldi	r24, 0xA7	; 167
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 0e 08 	call	0x101c	; 0x101c <Serial_sendString>
     766:	06 ef       	ldi	r16, 0xF6	; 246
     768:	10 e0       	ldi	r17, 0x00	; 0
     76a:	c6 e0       	ldi	r28, 0x06	; 6
     76c:	d1 e0       	ldi	r29, 0x01	; 1
     76e:	78 01       	movw	r14, r16
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
	{
		Serial_sendInt(SensorMaxValue[sensorNumber], DEC);
     770:	6a e0       	ldi	r22, 0x0A	; 10
     772:	70 e0       	ldi	r23, 0x00	; 0
     774:	f7 01       	movw	r30, r14
     776:	81 91       	ld	r24, Z+
     778:	91 91       	ld	r25, Z+
     77a:	7f 01       	movw	r14, r30
     77c:	0e 94 1d 08 	call	0x103a	; 0x103a <Serial_sendInt>
		Serial_sendChar('\t');
     780:	89 e0       	ldi	r24, 0x09	; 9
     782:	0e 94 0a 08 	call	0x1014	; 0x1014 <Serial_sendChar>
	}
	timerFlag = 0;
	timerOff();
	Stop();
	Serial_sendString("MAX\t");
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
     786:	ec 16       	cp	r14, r28
     788:	fd 06       	cpc	r15, r29
     78a:	91 f7       	brne	.-28     	; 0x770 <autoCalibration+0xa2>
	{
		Serial_sendInt(SensorMaxValue[sensorNumber], DEC);
		Serial_sendChar('\t');
	}
	Serial_sendChar('\n');
     78c:	8a e0       	ldi	r24, 0x0A	; 10
     78e:	0e 94 0a 08 	call	0x1014	; 0x1014 <Serial_sendChar>
	
	Serial_sendString("MIN\t");
     792:	8c ea       	ldi	r24, 0xAC	; 172
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	0e 94 0e 08 	call	0x101c	; 0x101c <Serial_sendString>
     79a:	0f 2e       	mov	r0, r31
     79c:	f4 e6       	ldi	r31, 0x64	; 100
     79e:	6f 2e       	mov	r6, r31
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	7f 2e       	mov	r7, r31
     7a4:	f0 2d       	mov	r31, r0
     7a6:	0f 2e       	mov	r0, r31
     7a8:	f4 e7       	ldi	r31, 0x74	; 116
     7aa:	cf 2e       	mov	r12, r31
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	df 2e       	mov	r13, r31
     7b0:	f0 2d       	mov	r31, r0
     7b2:	73 01       	movw	r14, r6
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
	{
		Serial_sendInt(SensorMinValue[sensorNumber], DEC);
     7b4:	6a e0       	ldi	r22, 0x0A	; 10
     7b6:	70 e0       	ldi	r23, 0x00	; 0
     7b8:	f7 01       	movw	r30, r14
     7ba:	81 91       	ld	r24, Z+
     7bc:	91 91       	ld	r25, Z+
     7be:	7f 01       	movw	r14, r30
     7c0:	0e 94 1d 08 	call	0x103a	; 0x103a <Serial_sendInt>
		Serial_sendChar('\t');
     7c4:	89 e0       	ldi	r24, 0x09	; 9
     7c6:	0e 94 0a 08 	call	0x1014	; 0x1014 <Serial_sendChar>
		Serial_sendChar('\t');
	}
	Serial_sendChar('\n');
	
	Serial_sendString("MIN\t");
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
     7ca:	ec 14       	cp	r14, r12
     7cc:	fd 04       	cpc	r15, r13
     7ce:	91 f7       	brne	.-28     	; 0x7b4 <autoCalibration+0xe6>
	{
		Serial_sendInt(SensorMinValue[sensorNumber], DEC);
		Serial_sendChar('\t');
	}
	Serial_sendChar('\n');
     7d0:	8a e0       	ldi	r24, 0x0A	; 10
     7d2:	0e 94 0a 08 	call	0x1014	; 0x1014 <Serial_sendChar>
	
	Serial_sendString("THR\t");
     7d6:	81 eb       	ldi	r24, 0xB1	; 177
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	0e 94 0e 08 	call	0x101c	; 0x101c <Serial_sendString>
     7de:	0f 2e       	mov	r0, r31
     7e0:	f4 e9       	ldi	r31, 0x94	; 148
     7e2:	ef 2e       	mov	r14, r31
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	ff 2e       	mov	r15, r31
     7e8:	f0 2d       	mov	r31, r0
     7ea:	57 01       	movw	r10, r14
     7ec:	0f 2e       	mov	r0, r31
     7ee:	f4 e6       	ldi	r31, 0x64	; 100
     7f0:	cf 2e       	mov	r12, r31
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	df 2e       	mov	r13, r31
     7f6:	f0 2d       	mov	r31, r0
     7f8:	0f 2e       	mov	r0, r31
     7fa:	f6 ef       	ldi	r31, 0xF6	; 246
     7fc:	8f 2e       	mov	r8, r31
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	9f 2e       	mov	r9, r31
     802:	f0 2d       	mov	r31, r0
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
	{
		threshold[sensorNumber] = (SensorMaxValue[sensorNumber] + SensorMinValue[sensorNumber]) / 2;
     804:	f4 01       	movw	r30, r8
     806:	21 91       	ld	r18, Z+
     808:	31 91       	ld	r19, Z+
     80a:	4f 01       	movw	r8, r30
     80c:	f6 01       	movw	r30, r12
     80e:	81 91       	ld	r24, Z+
     810:	91 91       	ld	r25, Z+
     812:	6f 01       	movw	r12, r30
     814:	82 0f       	add	r24, r18
     816:	93 1f       	adc	r25, r19
     818:	96 95       	lsr	r25
     81a:	87 95       	ror	r24
     81c:	f5 01       	movw	r30, r10
     81e:	81 93       	st	Z+, r24
     820:	91 93       	st	Z+, r25
     822:	5f 01       	movw	r10, r30
		Serial_sendInt(threshold[sensorNumber], DEC);
     824:	6a e0       	ldi	r22, 0x0A	; 10
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	0e 94 1d 08 	call	0x103a	; 0x103a <Serial_sendInt>
		Serial_sendChar('\t');
     82c:	89 e0       	ldi	r24, 0x09	; 9
     82e:	0e 94 0a 08 	call	0x1014	; 0x1014 <Serial_sendChar>
		Serial_sendChar('\t');
	}
	Serial_sendChar('\n');
	
	Serial_sendString("THR\t");
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
     832:	8c 16       	cp	r8, r28
     834:	9d 06       	cpc	r9, r29
     836:	31 f7       	brne	.-52     	; 0x804 <autoCalibration+0x136>
	{
		threshold[sensorNumber] = (SensorMaxValue[sensorNumber] + SensorMinValue[sensorNumber]) / 2;
		Serial_sendInt(threshold[sensorNumber], DEC);
		Serial_sendChar('\t');
	}
	Serial_sendChar('\n');
     838:	8a e0       	ldi	r24, 0x0A	; 10
     83a:	0e 94 0a 08 	call	0x1014	; 0x1014 <Serial_sendChar>
	
	Serial_sendString("UTH\t");
     83e:	86 eb       	ldi	r24, 0xB6	; 182
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0e 94 0e 08 	call	0x101c	; 0x101c <Serial_sendString>
     846:	0f 2e       	mov	r0, r31
     848:	f4 e8       	ldi	r31, 0x84	; 132
     84a:	8f 2e       	mov	r8, r31
     84c:	f0 e0       	ldi	r31, 0x00	; 0
     84e:	9f 2e       	mov	r9, r31
     850:	f0 2d       	mov	r31, r0
     852:	0f 2e       	mov	r0, r31
     854:	f4 e9       	ldi	r31, 0x94	; 148
     856:	af 2e       	mov	r10, r31
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	bf 2e       	mov	r11, r31
     85c:	f0 2d       	mov	r31, r0
     85e:	0f 2e       	mov	r0, r31
     860:	f6 ef       	ldi	r31, 0xF6	; 246
     862:	cf 2e       	mov	r12, r31
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	df 2e       	mov	r13, r31
     868:	f0 2d       	mov	r31, r0
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
	{
		upperThreshold[sensorNumber] = threshold[sensorNumber] + ((SensorMaxValue[sensorNumber] - threshold[sensorNumber]) * 30 / 100); 
     86a:	0f 2e       	mov	r0, r31
     86c:	fe e1       	ldi	r31, 0x1E	; 30
     86e:	5f 2e       	mov	r5, r31
     870:	f0 2d       	mov	r31, r0
     872:	f6 01       	movw	r30, r12
     874:	81 91       	ld	r24, Z+
     876:	91 91       	ld	r25, Z+
     878:	6f 01       	movw	r12, r30
     87a:	f5 01       	movw	r30, r10
     87c:	41 91       	ld	r20, Z+
     87e:	51 91       	ld	r21, Z+
     880:	5f 01       	movw	r10, r30
     882:	84 1b       	sub	r24, r20
     884:	95 0b       	sbc	r25, r21
     886:	58 9e       	mul	r5, r24
     888:	90 01       	movw	r18, r0
     88a:	59 9e       	mul	r5, r25
     88c:	30 0d       	add	r19, r0
     88e:	11 24       	eor	r1, r1
     890:	36 95       	lsr	r19
     892:	27 95       	ror	r18
     894:	36 95       	lsr	r19
     896:	27 95       	ror	r18
     898:	ab e7       	ldi	r26, 0x7B	; 123
     89a:	b4 e1       	ldi	r27, 0x14	; 20
     89c:	0e 94 28 0a 	call	0x1450	; 0x1450 <__umulhisi3>
     8a0:	96 95       	lsr	r25
     8a2:	87 95       	ror	r24
     8a4:	84 0f       	add	r24, r20
     8a6:	95 1f       	adc	r25, r21
     8a8:	f4 01       	movw	r30, r8
     8aa:	81 93       	st	Z+, r24
     8ac:	91 93       	st	Z+, r25
     8ae:	4f 01       	movw	r8, r30
		Serial_sendInt(upperThreshold[sensorNumber], DEC);
     8b0:	6a e0       	ldi	r22, 0x0A	; 10
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	0e 94 1d 08 	call	0x103a	; 0x103a <Serial_sendInt>
		Serial_sendChar('\t');
     8b8:	89 e0       	ldi	r24, 0x09	; 9
     8ba:	0e 94 0a 08 	call	0x1014	; 0x1014 <Serial_sendChar>
		Serial_sendChar('\t');
	}
	Serial_sendChar('\n');
	
	Serial_sendString("UTH\t");
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
     8be:	cc 16       	cp	r12, r28
     8c0:	dd 06       	cpc	r13, r29
     8c2:	b9 f6       	brne	.-82     	; 0x872 <__stack+0x13>
	{
		upperThreshold[sensorNumber] = threshold[sensorNumber] + ((SensorMaxValue[sensorNumber] - threshold[sensorNumber]) * 30 / 100); 
		Serial_sendInt(upperThreshold[sensorNumber], DEC);
		Serial_sendChar('\t');
	}
	Serial_sendChar('\n');
     8c4:	8a e0       	ldi	r24, 0x0A	; 10
     8c6:	0e 94 0a 08 	call	0x1014	; 0x1014 <Serial_sendChar>
	
	Serial_sendString("LTH\t");
     8ca:	8b eb       	ldi	r24, 0xBB	; 187
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	0e 94 0e 08 	call	0x101c	; 0x101c <Serial_sendString>
     8d2:	0f 2e       	mov	r0, r31
     8d4:	f4 e7       	ldi	r31, 0x74	; 116
     8d6:	af 2e       	mov	r10, r31
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	bf 2e       	mov	r11, r31
     8dc:	f0 2d       	mov	r31, r0
     8de:	0f 2e       	mov	r0, r31
     8e0:	f4 ea       	ldi	r31, 0xA4	; 164
     8e2:	8f 2e       	mov	r8, r31
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	9f 2e       	mov	r9, r31
     8e8:	f0 2d       	mov	r31, r0
     8ea:	0f 2e       	mov	r0, r31
     8ec:	f4 e6       	ldi	r31, 0x64	; 100
     8ee:	cf 2e       	mov	r12, r31
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	df 2e       	mov	r13, r31
     8f4:	f0 2d       	mov	r31, r0
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
	{
		lowerThreshold[sensorNumber] = threshold[sensorNumber] - ((threshold[sensorNumber] - SensorMinValue[sensorNumber]) * 30 / 100);
     8f6:	0f 2e       	mov	r0, r31
     8f8:	fe e1       	ldi	r31, 0x1E	; 30
     8fa:	5f 2e       	mov	r5, r31
     8fc:	f0 2d       	mov	r31, r0
     8fe:	f7 01       	movw	r30, r14
     900:	41 91       	ld	r20, Z+
     902:	51 91       	ld	r21, Z+
     904:	7f 01       	movw	r14, r30
     906:	f6 01       	movw	r30, r12
     908:	81 91       	ld	r24, Z+
     90a:	91 91       	ld	r25, Z+
     90c:	6f 01       	movw	r12, r30
     90e:	9a 01       	movw	r18, r20
     910:	28 1b       	sub	r18, r24
     912:	39 0b       	sbc	r19, r25
     914:	c9 01       	movw	r24, r18
     916:	58 9e       	mul	r5, r24
     918:	90 01       	movw	r18, r0
     91a:	59 9e       	mul	r5, r25
     91c:	30 0d       	add	r19, r0
     91e:	11 24       	eor	r1, r1
     920:	36 95       	lsr	r19
     922:	27 95       	ror	r18
     924:	36 95       	lsr	r19
     926:	27 95       	ror	r18
     928:	ab e7       	ldi	r26, 0x7B	; 123
     92a:	b4 e1       	ldi	r27, 0x14	; 20
     92c:	0e 94 28 0a 	call	0x1450	; 0x1450 <__umulhisi3>
     930:	96 95       	lsr	r25
     932:	87 95       	ror	r24
     934:	fa 01       	movw	r30, r20
     936:	e8 1b       	sub	r30, r24
     938:	f9 0b       	sbc	r31, r25
     93a:	cf 01       	movw	r24, r30
     93c:	f5 01       	movw	r30, r10
     93e:	81 93       	st	Z+, r24
     940:	91 93       	st	Z+, r25
     942:	5f 01       	movw	r10, r30
		Serial_sendInt(lowerThreshold[sensorNumber], DEC);
     944:	6a e0       	ldi	r22, 0x0A	; 10
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	0e 94 1d 08 	call	0x103a	; 0x103a <Serial_sendInt>
		Serial_sendChar('\t');
     94c:	89 e0       	ldi	r24, 0x09	; 9
     94e:	0e 94 0a 08 	call	0x1014	; 0x1014 <Serial_sendChar>
		Serial_sendChar('\t');
	}
	Serial_sendChar('\n');
	
	Serial_sendString("LTH\t");
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
     952:	8e 14       	cp	r8, r14
     954:	9f 04       	cpc	r9, r15
     956:	99 f6       	brne	.-90     	; 0x8fe <__stack+0x9f>
	{
		lowerThreshold[sensorNumber] = threshold[sensorNumber] - ((threshold[sensorNumber] - SensorMinValue[sensorNumber]) * 30 / 100);
		Serial_sendInt(lowerThreshold[sensorNumber], DEC);
		Serial_sendChar('\t');
	}
	Serial_sendChar('\n');
     958:	8a e0       	ldi	r24, 0x0A	; 10
     95a:	0e 94 0a 08 	call	0x1014	; 0x1014 <Serial_sendChar>
		
	Serial_sendString("PRO\t");
     95e:	80 ec       	ldi	r24, 0xC0	; 192
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	0e 94 0e 08 	call	0x101c	; 0x101c <Serial_sendString>
     966:	0f 2e       	mov	r0, r31
     968:	f6 e0       	ldi	r31, 0x06	; 6
     96a:	ef 2e       	mov	r14, r31
     96c:	f1 e0       	ldi	r31, 0x01	; 1
     96e:	ff 2e       	mov	r15, r31
     970:	f0 2d       	mov	r31, r0
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
	{
		proportionality[sensorNumber] = 20000 / (SensorMaxValue[sensorNumber] - SensorMinValue[sensorNumber]);
     972:	0f 2e       	mov	r0, r31
     974:	f0 e2       	ldi	r31, 0x20	; 32
     976:	cf 2e       	mov	r12, r31
     978:	fe e4       	ldi	r31, 0x4E	; 78
     97a:	df 2e       	mov	r13, r31
     97c:	f0 2d       	mov	r31, r0
     97e:	f8 01       	movw	r30, r16
     980:	61 91       	ld	r22, Z+
     982:	71 91       	ld	r23, Z+
     984:	8f 01       	movw	r16, r30
     986:	f3 01       	movw	r30, r6
     988:	81 91       	ld	r24, Z+
     98a:	91 91       	ld	r25, Z+
     98c:	3f 01       	movw	r6, r30
     98e:	68 1b       	sub	r22, r24
     990:	79 0b       	sbc	r23, r25
     992:	c6 01       	movw	r24, r12
     994:	0e 94 14 0a 	call	0x1428	; 0x1428 <__udivmodhi4>
     998:	cb 01       	movw	r24, r22
     99a:	f7 01       	movw	r30, r14
     99c:	61 93       	st	Z+, r22
     99e:	71 93       	st	Z+, r23
     9a0:	7f 01       	movw	r14, r30
		Serial_sendInt(proportionality[sensorNumber], DEC);
     9a2:	6a e0       	ldi	r22, 0x0A	; 10
     9a4:	70 e0       	ldi	r23, 0x00	; 0
     9a6:	0e 94 1d 08 	call	0x103a	; 0x103a <Serial_sendInt>
		Serial_sendChar('\t');
     9aa:	89 e0       	ldi	r24, 0x09	; 9
     9ac:	0e 94 0a 08 	call	0x1014	; 0x1014 <Serial_sendChar>
		Serial_sendChar('\t');
	}
	Serial_sendChar('\n');
		
	Serial_sendString("PRO\t");
	for(uint8_t sensorNumber = 0; sensorNumber < 8; sensorNumber++)
     9b0:	0c 17       	cp	r16, r28
     9b2:	1d 07       	cpc	r17, r29
     9b4:	21 f7       	brne	.-56     	; 0x97e <__stack+0x11f>
	{
		proportionality[sensorNumber] = 20000 / (SensorMaxValue[sensorNumber] - SensorMinValue[sensorNumber]);
		Serial_sendInt(proportionality[sensorNumber], DEC);
		Serial_sendChar('\t');
	}
	Serial_sendString("\n\n\n\n\n\n");
     9b6:	85 ec       	ldi	r24, 0xC5	; 197
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	0e 94 0e 08 	call	0x101c	; 0x101c <Serial_sendString>
	
	
}
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	ff 90       	pop	r15
     9c8:	ef 90       	pop	r14
     9ca:	df 90       	pop	r13
     9cc:	cf 90       	pop	r12
     9ce:	bf 90       	pop	r11
     9d0:	af 90       	pop	r10
     9d2:	9f 90       	pop	r9
     9d4:	8f 90       	pop	r8
     9d6:	7f 90       	pop	r7
     9d8:	6f 90       	pop	r6
     9da:	5f 90       	pop	r5
     9dc:	08 95       	ret

000009de <LeftSharp>:
	enable1(motorSpeed);
	enable2(motorSpeed);
}

void LeftSharp(uint8_t motorSpeed)
{
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	c8 2f       	mov	r28, r24
	enable1(0);
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	0e 94 f8 07 	call	0xff0	; 0xff0 <PWM0>
	enable2(0);
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	0e 94 fa 07 	call	0xff4	; 0xff4 <PWM2>
	
	motor1a_PORT &= ~(1 << motor1a_PIN);
     9f4:	af 98       	cbi	0x15, 7	; 21
	motor1b_PORT |= (1 << motor1b_PIN);
     9f6:	ae 9a       	sbi	0x15, 6	; 21
	motor2a_PORT |= (1 << motor2a_PIN);
     9f8:	ad 9a       	sbi	0x15, 5	; 21
	motor2b_PORT &= ~(1 << motor2b_PIN);
     9fa:	ac 98       	cbi	0x15, 4	; 21

	enable1(motorSpeed);
     9fc:	d0 e0       	ldi	r29, 0x00	; 0
     9fe:	ce 01       	movw	r24, r28
     a00:	0e 94 f8 07 	call	0xff0	; 0xff0 <PWM0>
	enable2(motorSpeed);
     a04:	ce 01       	movw	r24, r28
     a06:	0e 94 fa 07 	call	0xff4	; 0xff4 <PWM2>
}
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	08 95       	ret

00000a10 <main>:
#define sonarSetPoint  8

int main(void)
{
	// Input-Output settings
	trig1_DDR |= (1 << trig1_PIN);
     a10:	8c 9a       	sbi	0x11, 4	; 17
	trig2_DDR |= (1 << trig2_PIN);
     a12:	8d 9a       	sbi	0x11, 5	; 17
	trig3_DDR |= (1 << trig3_PIN);
     a14:	b9 9a       	sbi	0x17, 1	; 23
	echo1_DDR &= ~(1 << echo1_PIN);
     a16:	8b 98       	cbi	0x11, 3	; 17
	echo2_DDR &= ~(1 << echo2_PIN);
     a18:	8a 98       	cbi	0x11, 2	; 17
	echo3_DDR &= ~(1 << echo3_PIN);
     a1a:	ba 98       	cbi	0x17, 2	; 23
	motor1a_DDR |= (1 << motor1a_PIN);
     a1c:	a7 9a       	sbi	0x14, 7	; 20
	motor1b_DDR |= (1 << motor1b_PIN);
     a1e:	a6 9a       	sbi	0x14, 6	; 20
	motor2a_DDR |= (1 << motor2a_PIN);
     a20:	a5 9a       	sbi	0x14, 5	; 20
	motor2b_DDR |= (1 << motor2b_PIN);
     a22:	a4 9a       	sbi	0x14, 4	; 20
	enable1_DDR |= (1 << enable1_PIN);
     a24:	8f 9a       	sbi	0x11, 7	; 17
	enable2_DDR |= (1 << enable2_PIN);	
     a26:	bb 9a       	sbi	0x17, 3	; 23
	int8_t sonarError = 0;
	int sonarCorrection = 0;

	// Initializations	
	
	adc_init();
     a28:	0e 94 49 00 	call	0x92	; 0x92 <adc_init>
	UART_init();
     a2c:	0e 94 fc 07 	call	0xff8	; 0xff8 <UART_init>
	PWM0_init();
     a30:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <PWM0_init>
	PWM2_init();
     a34:	0e 94 ee 07 	call	0xfdc	; 0xfdc <PWM2_init>
	setRotationForward();
     a38:	0e 94 12 02 	call	0x424	; 0x424 <setRotationForward>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a3c:	2f ef       	ldi	r18, 0xFF	; 255
     a3e:	33 ed       	ldi	r19, 0xD3	; 211
     a40:	40 e3       	ldi	r20, 0x30	; 48
     a42:	21 50       	subi	r18, 0x01	; 1
     a44:	30 40       	sbci	r19, 0x00	; 0
     a46:	40 40       	sbci	r20, 0x00	; 0
     a48:	e1 f7       	brne	.-8      	; 0xa42 <main+0x32>
     a4a:	00 c0       	rjmp	.+0      	; 0xa4c <main+0x3c>
     a4c:	00 00       	nop
	
	
	_delay_ms(1000);
	autoCalibration();
     a4e:	0e 94 67 03 	call	0x6ce	; 0x6ce <autoCalibration>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	93 ed       	ldi	r25, 0xD3	; 211
     a56:	20 e3       	ldi	r18, 0x30	; 48
     a58:	81 50       	subi	r24, 0x01	; 1
     a5a:	90 40       	sbci	r25, 0x00	; 0
     a5c:	20 40       	sbci	r18, 0x00	; 0
     a5e:	e1 f7       	brne	.-8      	; 0xa58 <main+0x48>
     a60:	00 c0       	rjmp	.+0      	; 0xa62 <main+0x52>
     a62:	00 00       	nop
	_delay_ms(1000);
	
	Forward();
     a64:	0e 94 0f 03 	call	0x61e	; 0x61e <Forward>
					j--;
				}
				sonar2_val[j + 1] = key;
			}

			distance2 = sonar2_val[4];
     a68:	c6 e1       	ldi	r28, 0x16	; 22
     a6a:	d1 e0       	ldi	r29, 0x01	; 1
					_delay_ms(4000);
					Forward();
				}

				sonarError = sonar1Read() - distance1;
				enable1(160 + (sonarError * 50));
     a6c:	02 e3       	ldi	r16, 0x32	; 50
				enable2(160 - (sonarError * 50));
     a6e:	1e ec       	ldi	r17, 0xCE	; 206
					LeftSharp(130);
					_delay_ms(500);
					while (sonar1Read() > distance1);
					setRotationForward();
					sonarError = sonar1Read() - distance1;
					enable1(120 + (sonarError * 40));
     a70:	0f 2e       	mov	r0, r31
     a72:	f8 e2       	ldi	r31, 0x28	; 40
     a74:	ff 2e       	mov	r15, r31
     a76:	f0 2d       	mov	r31, r0
	Forward();
// 	enable1(maxSpeed);
// 	enable2(maxSpeed - (maxSpeed / 5.3));
    while (1) 
    {	
		sensorValueConversion();
     a78:	0e 94 08 01 	call	0x210	; 0x210 <sensorValueConversion>
// 		Serial_sendString("\t");
// 		_delay_ms(50);
// 		Serial_sendInt(sonar2Read(), DEC);
// 		Serial_sendString("\n");

		sonar2_val[sonar2_turn] = sonar2Read();
     a7c:	c0 90 f5 00 	lds	r12, 0x00F5	; 0x8000f5 <sonar2_turn>
     a80:	d1 2c       	mov	r13, r1
     a82:	0e 94 b3 00 	call	0x166	; 0x166 <sonar2Read>
     a86:	f6 01       	movw	r30, r12
     a88:	ea 5e       	subi	r30, 0xEA	; 234
     a8a:	fe 4f       	sbci	r31, 0xFE	; 254
     a8c:	80 83       	st	Z, r24
		if (sonar2_turn >= 4)
     a8e:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <sonar2_turn>
     a92:	84 30       	cpi	r24, 0x04	; 4
     a94:	40 f1       	brcs	.+80     	; 0xae6 <main+0xd6>
		{
			sonar2_turn = 0;
     a96:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <sonar2_turn>
     a9a:	e6 e1       	ldi	r30, 0x16	; 22
     a9c:	f1 e0       	ldi	r31, 0x01	; 1
     a9e:	40 e0       	ldi	r20, 0x00	; 0
     aa0:	50 e0       	ldi	r21, 0x00	; 0
			uint8_t i = 0, j = 0, key = 0;

			for(i = 1; i < 5; i++)
			{
				key = sonar2_val[i];
     aa2:	61 81       	ldd	r22, Z+1	; 0x01
				j = i - 1;
     aa4:	34 2f       	mov	r19, r20
				while(j >= 0 && sonar2_val[j] > key)
     aa6:	ca 01       	movw	r24, r20
     aa8:	21 91       	ld	r18, Z+
     aaa:	62 17       	cp	r22, r18
     aac:	70 f4       	brcc	.+28     	; 0xaca <main+0xba>
				{
					sonar2_val[j + 1] = sonar2_val[j];
     aae:	dc 01       	movw	r26, r24
     ab0:	aa 5e       	subi	r26, 0xEA	; 234
     ab2:	be 4f       	sbci	r27, 0xFE	; 254
     ab4:	11 96       	adiw	r26, 0x01	; 1
     ab6:	2c 93       	st	X, r18
					j--;
     ab8:	31 50       	subi	r19, 0x01	; 1

			for(i = 1; i < 5; i++)
			{
				key = sonar2_val[i];
				j = i - 1;
				while(j >= 0 && sonar2_val[j] > key)
     aba:	83 2f       	mov	r24, r19
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	dc 01       	movw	r26, r24
     ac0:	aa 5e       	subi	r26, 0xEA	; 234
     ac2:	be 4f       	sbci	r27, 0xFE	; 254
     ac4:	2c 91       	ld	r18, X
     ac6:	62 17       	cp	r22, r18
     ac8:	90 f3       	brcs	.-28     	; 0xaae <main+0x9e>
				{
					sonar2_val[j + 1] = sonar2_val[j];
					j--;
				}
				sonar2_val[j + 1] = key;
     aca:	dc 01       	movw	r26, r24
     acc:	aa 5e       	subi	r26, 0xEA	; 234
     ace:	be 4f       	sbci	r27, 0xFE	; 254
     ad0:	11 96       	adiw	r26, 0x01	; 1
     ad2:	6c 93       	st	X, r22
     ad4:	4f 5f       	subi	r20, 0xFF	; 255
     ad6:	5f 4f       	sbci	r21, 0xFF	; 255
		if (sonar2_turn >= 4)
		{
			sonar2_turn = 0;
			uint8_t i = 0, j = 0, key = 0;

			for(i = 1; i < 5; i++)
     ad8:	44 30       	cpi	r20, 0x04	; 4
     ada:	51 05       	cpc	r21, r1
     adc:	11 f7       	brne	.-60     	; 0xaa2 <main+0x92>
					j--;
				}
				sonar2_val[j + 1] = key;
			}

			distance2 = sonar2_val[4];
     ade:	8c 81       	ldd	r24, Y+4	; 0x04
     ae0:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__data_end>
     ae4:	03 c0       	rjmp	.+6      	; 0xaec <main+0xdc>
		}
		else sonar2_turn++;
     ae6:	8f 5f       	subi	r24, 0xFF	; 255
     ae8:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <sonar2_turn>

				
		if (distance2 < 12 && error < 2 && error > -2 )
     aec:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <__data_end>
     af0:	8c 30       	cpi	r24, 0x0C	; 12
     af2:	08 f0       	brcs	.+2      	; 0xaf6 <main+0xe6>
     af4:	68 c0       	rjmp	.+208    	; 0xbc6 <main+0x1b6>
     af6:	80 90 ec 00 	lds	r8, 0x00EC	; 0x8000ec <error>
     afa:	90 90 ed 00 	lds	r9, 0x00ED	; 0x8000ed <error+0x1>
     afe:	a0 90 ee 00 	lds	r10, 0x00EE	; 0x8000ee <error+0x2>
     b02:	b0 90 ef 00 	lds	r11, 0x00EF	; 0x8000ef <error+0x3>
     b06:	20 e0       	ldi	r18, 0x00	; 0
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	40 e0       	ldi	r20, 0x00	; 0
     b0c:	50 e4       	ldi	r21, 0x40	; 64
     b0e:	c5 01       	movw	r24, r10
     b10:	b4 01       	movw	r22, r8
     b12:	0e 94 a9 08 	call	0x1152	; 0x1152 <__cmpsf2>
     b16:	88 23       	and	r24, r24
     b18:	0c f0       	brlt	.+2      	; 0xb1c <main+0x10c>
     b1a:	55 c0       	rjmp	.+170    	; 0xbc6 <main+0x1b6>
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	40 e0       	ldi	r20, 0x00	; 0
     b22:	50 ec       	ldi	r21, 0xC0	; 192
     b24:	c5 01       	movw	r24, r10
     b26:	b4 01       	movw	r22, r8
     b28:	0e 94 96 09 	call	0x132c	; 0x132c <__gesf2>
     b2c:	18 16       	cp	r1, r24
     b2e:	0c f0       	brlt	.+2      	; 0xb32 <main+0x122>
     b30:	4a c0       	rjmp	.+148    	; 0xbc6 <main+0x1b6>
		{
			Backward();
     b32:	0e 94 24 03 	call	0x648	; 0x648 <Backward>
     b36:	3f ef       	ldi	r19, 0xFF	; 255
     b38:	41 ee       	ldi	r20, 0xE1	; 225
     b3a:	84 e0       	ldi	r24, 0x04	; 4
     b3c:	31 50       	subi	r19, 0x01	; 1
     b3e:	40 40       	sbci	r20, 0x00	; 0
     b40:	80 40       	sbci	r24, 0x00	; 0
     b42:	e1 f7       	brne	.-8      	; 0xb3c <main+0x12c>
     b44:	00 c0       	rjmp	.+0      	; 0xb46 <main+0x136>
     b46:	00 00       	nop
			_delay_ms(100);
			Stop();
     b48:	0e 94 39 03 	call	0x672	; 0x672 <Stop>
			while (distance2 < 12)
     b4c:	38 c0       	rjmp	.+112    	; 0xbbe <main+0x1ae>
			{
				sonar2_val[sonar2_turn] = sonar2Read();
     b4e:	c0 90 f5 00 	lds	r12, 0x00F5	; 0x8000f5 <sonar2_turn>
     b52:	d1 2c       	mov	r13, r1
     b54:	0e 94 b3 00 	call	0x166	; 0x166 <sonar2Read>
     b58:	f6 01       	movw	r30, r12
     b5a:	ea 5e       	subi	r30, 0xEA	; 234
     b5c:	fe 4f       	sbci	r31, 0xFE	; 254
     b5e:	80 83       	st	Z, r24
				if (sonar2_turn >= 4)
     b60:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <sonar2_turn>
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	40 f1       	brcs	.+80     	; 0xbb8 <main+0x1a8>
				{
					sonar2_turn = 0;
     b68:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <sonar2_turn>
     b6c:	e6 e1       	ldi	r30, 0x16	; 22
     b6e:	f1 e0       	ldi	r31, 0x01	; 1
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	50 e0       	ldi	r21, 0x00	; 0
					uint8_t i = 0, j = 0, key = 0;

					for(i = 1; i < 5; i++)
					{
						key = sonar2_val[i];
     b74:	61 81       	ldd	r22, Z+1	; 0x01
						j = i - 1;
     b76:	34 2f       	mov	r19, r20
						while(j >= 0 && sonar2_val[j] > key)
     b78:	ca 01       	movw	r24, r20
     b7a:	21 91       	ld	r18, Z+
     b7c:	62 17       	cp	r22, r18
     b7e:	70 f4       	brcc	.+28     	; 0xb9c <main+0x18c>
						{
							sonar2_val[j + 1] = sonar2_val[j];
     b80:	dc 01       	movw	r26, r24
     b82:	aa 5e       	subi	r26, 0xEA	; 234
     b84:	be 4f       	sbci	r27, 0xFE	; 254
     b86:	11 96       	adiw	r26, 0x01	; 1
     b88:	2c 93       	st	X, r18
							j--;
     b8a:	31 50       	subi	r19, 0x01	; 1

					for(i = 1; i < 5; i++)
					{
						key = sonar2_val[i];
						j = i - 1;
						while(j >= 0 && sonar2_val[j] > key)
     b8c:	83 2f       	mov	r24, r19
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	dc 01       	movw	r26, r24
     b92:	aa 5e       	subi	r26, 0xEA	; 234
     b94:	be 4f       	sbci	r27, 0xFE	; 254
     b96:	2c 91       	ld	r18, X
     b98:	62 17       	cp	r22, r18
     b9a:	90 f3       	brcs	.-28     	; 0xb80 <main+0x170>
						{
							sonar2_val[j + 1] = sonar2_val[j];
							j--;
						}
						sonar2_val[j + 1] = key;
     b9c:	dc 01       	movw	r26, r24
     b9e:	aa 5e       	subi	r26, 0xEA	; 234
     ba0:	be 4f       	sbci	r27, 0xFE	; 254
     ba2:	11 96       	adiw	r26, 0x01	; 1
     ba4:	6c 93       	st	X, r22
     ba6:	4f 5f       	subi	r20, 0xFF	; 255
     ba8:	5f 4f       	sbci	r21, 0xFF	; 255
				if (sonar2_turn >= 4)
				{
					sonar2_turn = 0;
					uint8_t i = 0, j = 0, key = 0;

					for(i = 1; i < 5; i++)
     baa:	44 30       	cpi	r20, 0x04	; 4
     bac:	51 05       	cpc	r21, r1
     bae:	11 f7       	brne	.-60     	; 0xb74 <main+0x164>
							j--;
						}
						sonar2_val[j + 1] = key;
					}

					distance2 = sonar2_val[2];
     bb0:	8a 81       	ldd	r24, Y+2	; 0x02
     bb2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__data_end>
     bb6:	03 c0       	rjmp	.+6      	; 0xbbe <main+0x1ae>
				}
				else sonar2_turn++;
     bb8:	8f 5f       	subi	r24, 0xFF	; 255
     bba:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <sonar2_turn>
		if (distance2 < 12 && error < 2 && error > -2 )
		{
			Backward();
			_delay_ms(100);
			Stop();
			while (distance2 < 12)
     bbe:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <__data_end>
     bc2:	8c 30       	cpi	r24, 0x0C	; 12
     bc4:	20 f2       	brcs	.-120    	; 0xb4e <main+0x13e>
				else sonar2_turn++;
			}
		}
		

		if (sensorCount == 0 && sonar1Read() < 10)
     bc6:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <sensorCount>
     bca:	81 11       	cpse	r24, r1
     bcc:	a4 c0       	rjmp	.+328    	; 0xd16 <main+0x306>
     bce:	0e 94 5b 00 	call	0xb6	; 0xb6 <sonar1Read>
     bd2:	0a 97       	sbiw	r24, 0x0a	; 10
     bd4:	08 f0       	brcs	.+2      	; 0xbd8 <main+0x1c8>
     bd6:	9f c0       	rjmp	.+318    	; 0xd16 <main+0x306>
		{
			distance1 = sonar1Read();
     bd8:	0e 94 5b 00 	call	0xb6	; 0xb6 <sonar1Read>
     bdc:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <distance1>
			setRotationForward();
     be0:	0e 94 12 02 	call	0x424	; 0x424 <setRotationForward>
			enable1(120);
     be4:	88 e7       	ldi	r24, 0x78	; 120
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	0e 94 f8 07 	call	0xff0	; 0xff0 <PWM0>
			enable2(120);
     bec:	88 e7       	ldi	r24, 0x78	; 120
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	0e 94 fa 07 	call	0xff4	; 0xff4 <PWM2>
			while (sensorCount == 0)
     bf4:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <sensorCount>
     bf8:	81 11       	cpse	r24, r1
     bfa:	8d c0       	rjmp	.+282    	; 0xd16 <main+0x306>
			{
				/**********************Hole Detection************************/

				if (PINB & (1 << PINB2))
     bfc:	b2 9b       	sbis	0x16, 2	; 22
     bfe:	1c c0       	rjmp	.+56     	; 0xc38 <main+0x228>
				{
					Backward();
     c00:	0e 94 24 03 	call	0x648	; 0x648 <Backward>
     c04:	9f ef       	ldi	r25, 0xFF	; 255
     c06:	20 e7       	ldi	r18, 0x70	; 112
     c08:	32 e0       	ldi	r19, 0x02	; 2
     c0a:	91 50       	subi	r25, 0x01	; 1
     c0c:	20 40       	sbci	r18, 0x00	; 0
     c0e:	30 40       	sbci	r19, 0x00	; 0
     c10:	e1 f7       	brne	.-8      	; 0xc0a <main+0x1fa>
     c12:	00 c0       	rjmp	.+0      	; 0xc14 <main+0x204>
     c14:	00 00       	nop
					_delay_ms(50);
					Stop();
     c16:	0e 94 39 03 	call	0x672	; 0x672 <Stop>
					setRotationForward();
     c1a:	0e 94 12 02 	call	0x424	; 0x424 <setRotationForward>
					while ((PINB & (1 << PINB2)));
     c1e:	b2 99       	sbic	0x16, 2	; 22
     c20:	fe cf       	rjmp	.-4      	; 0xc1e <main+0x20e>
     c22:	4f ef       	ldi	r20, 0xFF	; 255
     c24:	8f e4       	ldi	r24, 0x4F	; 79
     c26:	93 ec       	ldi	r25, 0xC3	; 195
     c28:	41 50       	subi	r20, 0x01	; 1
     c2a:	80 40       	sbci	r24, 0x00	; 0
     c2c:	90 40       	sbci	r25, 0x00	; 0
     c2e:	e1 f7       	brne	.-8      	; 0xc28 <main+0x218>
     c30:	00 c0       	rjmp	.+0      	; 0xc32 <main+0x222>
     c32:	00 00       	nop
					_delay_ms(4000);
					Forward();
     c34:	0e 94 0f 03 	call	0x61e	; 0x61e <Forward>
				}

				sonarError = sonar1Read() - distance1;
     c38:	0e 94 5b 00 	call	0xb6	; 0xb6 <sonar1Read>
				enable1(160 + (sonarError * 50));
     c3c:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <distance1>
     c40:	89 1b       	sub	r24, r25
     c42:	c8 2e       	mov	r12, r24
     c44:	88 0f       	add	r24, r24
     c46:	dd 08       	sbc	r13, r13
     c48:	0c 9d       	mul	r16, r12
     c4a:	c0 01       	movw	r24, r0
     c4c:	0d 9d       	mul	r16, r13
     c4e:	90 0d       	add	r25, r0
     c50:	11 24       	eor	r1, r1
     c52:	80 56       	subi	r24, 0x60	; 96
     c54:	9f 4f       	sbci	r25, 0xFF	; 255
     c56:	0e 94 f8 07 	call	0xff0	; 0xff0 <PWM0>
				enable2(160 - (sonarError * 50));
     c5a:	96 01       	movw	r18, r12
     c5c:	12 03       	mulsu	r17, r18
     c5e:	c0 01       	movw	r24, r0
     c60:	13 9f       	mul	r17, r19
     c62:	90 0d       	add	r25, r0
     c64:	11 24       	eor	r1, r1
     c66:	80 56       	subi	r24, 0x60	; 96
     c68:	9f 4f       	sbci	r25, 0xFF	; 255
     c6a:	0e 94 fa 07 	call	0xff4	; 0xff4 <PWM2>
     c6e:	3f ef       	ldi	r19, 0xFF	; 255
     c70:	49 ef       	ldi	r20, 0xF9	; 249
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	31 50       	subi	r19, 0x01	; 1
     c76:	40 40       	sbci	r20, 0x00	; 0
     c78:	80 40       	sbci	r24, 0x00	; 0
     c7a:	e1 f7       	brne	.-8      	; 0xc74 <main+0x264>
     c7c:	00 c0       	rjmp	.+0      	; 0xc7e <main+0x26e>
     c7e:	00 00       	nop
				_delay_ms(20);
				if (sonar2Read() < 7)
     c80:	0e 94 b3 00 	call	0x166	; 0x166 <sonar2Read>
     c84:	07 97       	sbiw	r24, 0x07	; 7
     c86:	08 f0       	brcs	.+2      	; 0xc8a <main+0x27a>
     c88:	3f c0       	rjmp	.+126    	; 0xd08 <main+0x2f8>
				{
					Backward();
     c8a:	0e 94 24 03 	call	0x648	; 0x648 <Backward>
     c8e:	9f ef       	ldi	r25, 0xFF	; 255
     c90:	23 ec       	ldi	r18, 0xC3	; 195
     c92:	39 e0       	ldi	r19, 0x09	; 9
     c94:	91 50       	subi	r25, 0x01	; 1
     c96:	20 40       	sbci	r18, 0x00	; 0
     c98:	30 40       	sbci	r19, 0x00	; 0
     c9a:	e1 f7       	brne	.-8      	; 0xc94 <main+0x284>
     c9c:	00 c0       	rjmp	.+0      	; 0xc9e <main+0x28e>
     c9e:	00 00       	nop
					_delay_ms(200);
					Stop();
     ca0:	0e 94 39 03 	call	0x672	; 0x672 <Stop>
					LeftSharp(130);
     ca4:	82 e8       	ldi	r24, 0x82	; 130
     ca6:	0e 94 ef 04 	call	0x9de	; 0x9de <LeftSharp>
     caa:	4f ef       	ldi	r20, 0xFF	; 255
     cac:	89 e6       	ldi	r24, 0x69	; 105
     cae:	98 e1       	ldi	r25, 0x18	; 24
     cb0:	41 50       	subi	r20, 0x01	; 1
     cb2:	80 40       	sbci	r24, 0x00	; 0
     cb4:	90 40       	sbci	r25, 0x00	; 0
     cb6:	e1 f7       	brne	.-8      	; 0xcb0 <main+0x2a0>
     cb8:	00 c0       	rjmp	.+0      	; 0xcba <main+0x2aa>
     cba:	00 00       	nop
					_delay_ms(500);
					while (sonar1Read() > distance1);
     cbc:	0e 94 5b 00 	call	0xb6	; 0xb6 <sonar1Read>
     cc0:	20 91 cd 00 	lds	r18, 0x00CD	; 0x8000cd <distance1>
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	28 17       	cp	r18, r24
     cc8:	39 07       	cpc	r19, r25
     cca:	c0 f3       	brcs	.-16     	; 0xcbc <main+0x2ac>
					setRotationForward();
     ccc:	0e 94 12 02 	call	0x424	; 0x424 <setRotationForward>
					sonarError = sonar1Read() - distance1;
     cd0:	0e 94 5b 00 	call	0xb6	; 0xb6 <sonar1Read>
					enable1(120 + (sonarError * 40));
     cd4:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <distance1>
     cd8:	89 1b       	sub	r24, r25
     cda:	c8 2e       	mov	r12, r24
     cdc:	88 0f       	add	r24, r24
     cde:	dd 08       	sbc	r13, r13
     ce0:	fc 9c       	mul	r15, r12
     ce2:	c0 01       	movw	r24, r0
     ce4:	fd 9c       	mul	r15, r13
     ce6:	90 0d       	add	r25, r0
     ce8:	11 24       	eor	r1, r1
     cea:	88 58       	subi	r24, 0x88	; 136
     cec:	9f 4f       	sbci	r25, 0xFF	; 255
     cee:	0e 94 f8 07 	call	0xff0	; 0xff0 <PWM0>
					enable2(120 - (sonarError * 40));
     cf2:	48 ed       	ldi	r20, 0xD8	; 216
     cf4:	96 01       	movw	r18, r12
     cf6:	42 03       	mulsu	r20, r18
     cf8:	c0 01       	movw	r24, r0
     cfa:	43 9f       	mul	r20, r19
     cfc:	90 0d       	add	r25, r0
     cfe:	11 24       	eor	r1, r1
     d00:	88 58       	subi	r24, 0x88	; 136
     d02:	9f 4f       	sbci	r25, 0xFF	; 255
     d04:	0e 94 fa 07 	call	0xff4	; 0xff4 <PWM2>
				}
				sensorValueConversion();
     d08:	0e 94 08 01 	call	0x210	; 0x210 <sensorValueConversion>
		{
			distance1 = sonar1Read();
			setRotationForward();
			enable1(120);
			enable2(120);
			while (sensorCount == 0)
     d0c:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <sensorCount>
     d10:	88 23       	and	r24, r24
     d12:	09 f4       	brne	.+2      	; 0xd16 <main+0x306>
     d14:	73 cf       	rjmp	.-282    	; 0xbfc <main+0x1ec>



/*****************************************************Line Follow Turns****************************************************/

		if (leftFlag == 1 && weightedValue < 7 && weightedValue > 3)
     d16:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <leftFlag>
     d1a:	81 30       	cpi	r24, 0x01	; 1
     d1c:	09 f0       	breq	.+2      	; 0xd20 <main+0x310>
     d1e:	4e c1       	rjmp	.+668    	; 0xfbc <main+0x5ac>
     d20:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <weightedValue>
     d24:	84 50       	subi	r24, 0x04	; 4
     d26:	83 30       	cpi	r24, 0x03	; 3
     d28:	08 f0       	brcs	.+2      	; 0xd2c <main+0x31c>
     d2a:	48 c1       	rjmp	.+656    	; 0xfbc <main+0x5ac>
		{
			Forward();
     d2c:	0e 94 0f 03 	call	0x61e	; 0x61e <Forward>
			while (leftFlag == 1)
     d30:	0c c0       	rjmp	.+24     	; 0xd4a <main+0x33a>
			{
				sensorValueConversion();
     d32:	0e 94 08 01 	call	0x210	; 0x210 <sensorValueConversion>
				if (allFlag == 1 || rightFlag == 1) break;
     d36:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <allFlag>
     d3a:	81 30       	cpi	r24, 0x01	; 1
     d3c:	09 f4       	brne	.+2      	; 0xd40 <main+0x330>
     d3e:	24 c1       	rjmp	.+584    	; 0xf88 <main+0x578>
     d40:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <rightFlag>
     d44:	81 30       	cpi	r24, 0x01	; 1
     d46:	09 f4       	brne	.+2      	; 0xd4a <main+0x33a>
     d48:	1f c1       	rjmp	.+574    	; 0xf88 <main+0x578>
/*****************************************************Line Follow Turns****************************************************/

		if (leftFlag == 1 && weightedValue < 7 && weightedValue > 3)
		{
			Forward();
			while (leftFlag == 1)
     d4a:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <leftFlag>
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	81 f3       	breq	.-32     	; 0xd32 <main+0x322>
			{
				sensorValueConversion();
				if (allFlag == 1 || rightFlag == 1) break;
			}

			if (allFlag == 0 && rightFlag == 0)
     d52:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <allFlag>
     d56:	81 11       	cpse	r24, r1
     d58:	17 c1       	rjmp	.+558    	; 0xf88 <main+0x578>
     d5a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <rightFlag>
     d5e:	81 11       	cpse	r24, r1
     d60:	13 c1       	rjmp	.+550    	; 0xf88 <main+0x578>
     d62:	8f ef       	ldi	r24, 0xFF	; 255
     d64:	92 e5       	ldi	r25, 0x52	; 82
     d66:	27 e0       	ldi	r18, 0x07	; 7
     d68:	81 50       	subi	r24, 0x01	; 1
     d6a:	90 40       	sbci	r25, 0x00	; 0
     d6c:	20 40       	sbci	r18, 0x00	; 0
     d6e:	e1 f7       	brne	.-8      	; 0xd68 <main+0x358>
     d70:	00 c0       	rjmp	.+0      	; 0xd72 <main+0x362>
     d72:	00 00       	nop
			{
				_delay_ms(150);
				sensorValueConversion();
     d74:	0e 94 08 01 	call	0x210	; 0x210 <sensorValueConversion>
				if (sensorCount == 0 && rightFlag == 0)
     d78:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <sensorCount>
     d7c:	81 11       	cpse	r24, r1
     d7e:	04 c1       	rjmp	.+520    	; 0xf88 <main+0x578>
     d80:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <rightFlag>
     d84:	81 11       	cpse	r24, r1
     d86:	00 c1       	rjmp	.+512    	; 0xf88 <main+0x578>
				{
					Backward();
     d88:	0e 94 24 03 	call	0x648	; 0x648 <Backward>
     d8c:	3f ef       	ldi	r19, 0xFF	; 255
     d8e:	44 e3       	ldi	r20, 0x34	; 52
     d90:	8c e0       	ldi	r24, 0x0C	; 12
     d92:	31 50       	subi	r19, 0x01	; 1
     d94:	40 40       	sbci	r20, 0x00	; 0
     d96:	80 40       	sbci	r24, 0x00	; 0
     d98:	e1 f7       	brne	.-8      	; 0xd92 <main+0x382>
     d9a:	00 c0       	rjmp	.+0      	; 0xd9c <main+0x38c>
     d9c:	00 00       	nop
					_delay_ms(250);
					RightSharp(150);
     d9e:	86 e9       	ldi	r24, 0x96	; 150
     da0:	0e 94 4e 03 	call	0x69c	; 0x69c <RightSharp>
     da4:	9f ef       	ldi	r25, 0xFF	; 255
     da6:	25 ea       	ldi	r18, 0xA5	; 165
     da8:	3e e0       	ldi	r19, 0x0E	; 14
     daa:	91 50       	subi	r25, 0x01	; 1
     dac:	20 40       	sbci	r18, 0x00	; 0
     dae:	30 40       	sbci	r19, 0x00	; 0
     db0:	e1 f7       	brne	.-8      	; 0xdaa <main+0x39a>
     db2:	00 c0       	rjmp	.+0      	; 0xdb4 <main+0x3a4>
     db4:	00 00       	nop
					_delay_ms(300);
					sensorValueConversion();
     db6:	0e 94 08 01 	call	0x210	; 0x210 <sensorValueConversion>
				}
				if (sensorCount == 0 && rightFlag == 0)
     dba:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <sensorCount>
     dbe:	81 11       	cpse	r24, r1
     dc0:	e3 c0       	rjmp	.+454    	; 0xf88 <main+0x578>
     dc2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <rightFlag>
     dc6:	81 11       	cpse	r24, r1
     dc8:	df c0       	rjmp	.+446    	; 0xf88 <main+0x578>
				{
					LeftSharp(140);
     dca:	8c e8       	ldi	r24, 0x8C	; 140
     dcc:	0e 94 ef 04 	call	0x9de	; 0x9de <LeftSharp>
     dd0:	4f ef       	ldi	r20, 0xFF	; 255
     dd2:	86 e1       	ldi	r24, 0x16	; 22
     dd4:	91 e1       	ldi	r25, 0x11	; 17
     dd6:	41 50       	subi	r20, 0x01	; 1
     dd8:	80 40       	sbci	r24, 0x00	; 0
     dda:	90 40       	sbci	r25, 0x00	; 0
     ddc:	e1 f7       	brne	.-8      	; 0xdd6 <main+0x3c6>
     dde:	00 c0       	rjmp	.+0      	; 0xde0 <main+0x3d0>
     de0:	00 00       	nop
     de2:	06 c0       	rjmp	.+12     	; 0xdf0 <main+0x3e0>
					_delay_ms(350);
					while (sensorCount == 0 || weightedValue < 3)
					{
						sensorValueConversion();
     de4:	0e 94 08 01 	call	0x210	; 0x210 <sensorValueConversion>
						if (rightFlag == 1) break;
     de8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <rightFlag>
     dec:	81 30       	cpi	r24, 0x01	; 1
     dee:	41 f0       	breq	.+16     	; 0xe00 <main+0x3f0>
				}
				if (sensorCount == 0 && rightFlag == 0)
				{
					LeftSharp(140);
					_delay_ms(350);
					while (sensorCount == 0 || weightedValue < 3)
     df0:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <sensorCount>
     df4:	88 23       	and	r24, r24
     df6:	b1 f3       	breq	.-20     	; 0xde4 <main+0x3d4>
     df8:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <weightedValue>
     dfc:	83 30       	cpi	r24, 0x03	; 3
     dfe:	90 f3       	brcs	.-28     	; 0xde4 <main+0x3d4>
						if (rightFlag == 1) break;
					}
// 					Backward();
// 					_delay_ms(400);
// 					setRotationForward();
					sensorValueConversion();
     e00:	0e 94 08 01 	call	0x210	; 0x210 <sensorValueConversion>
     e04:	c1 c0       	rjmp	.+386    	; 0xf88 <main+0x578>
			}
		}

		else if (rightFlag == 1 && weightedValue < 7 && weightedValue > 3)
		{
			Forward();
     e06:	0e 94 0f 03 	call	0x61e	; 0x61e <Forward>
			while (rightFlag == 1)
     e0a:	0c c0       	rjmp	.+24     	; 0xe24 <main+0x414>
			{
				sensorValueConversion();
     e0c:	0e 94 08 01 	call	0x210	; 0x210 <sensorValueConversion>
				if (allFlag == 1 || leftFlag == 1) break;
     e10:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <allFlag>
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	09 f4       	brne	.+2      	; 0xe1a <main+0x40a>
     e18:	b7 c0       	rjmp	.+366    	; 0xf88 <main+0x578>
     e1a:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <leftFlag>
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	09 f4       	brne	.+2      	; 0xe24 <main+0x414>
     e22:	b2 c0       	rjmp	.+356    	; 0xf88 <main+0x578>
		}

		else if (rightFlag == 1 && weightedValue < 7 && weightedValue > 3)
		{
			Forward();
			while (rightFlag == 1)
     e24:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <rightFlag>
     e28:	81 30       	cpi	r24, 0x01	; 1
     e2a:	81 f3       	breq	.-32     	; 0xe0c <main+0x3fc>
			{
				sensorValueConversion();
				if (allFlag == 1 || leftFlag == 1) break;
			}
			
			if (allFlag == 0 && leftFlag == 0)
     e2c:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <allFlag>
     e30:	81 11       	cpse	r24, r1
     e32:	aa c0       	rjmp	.+340    	; 0xf88 <main+0x578>
     e34:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <leftFlag>
     e38:	81 11       	cpse	r24, r1
     e3a:	a6 c0       	rjmp	.+332    	; 0xf88 <main+0x578>
     e3c:	2f ef       	ldi	r18, 0xFF	; 255
     e3e:	37 ee       	ldi	r19, 0xE7	; 231
     e40:	43 e0       	ldi	r20, 0x03	; 3
     e42:	21 50       	subi	r18, 0x01	; 1
     e44:	30 40       	sbci	r19, 0x00	; 0
     e46:	40 40       	sbci	r20, 0x00	; 0
     e48:	e1 f7       	brne	.-8      	; 0xe42 <main+0x432>
     e4a:	00 c0       	rjmp	.+0      	; 0xe4c <main+0x43c>
     e4c:	00 00       	nop
			{
				_delay_ms(80);
// 				sensorValueConversion();

				RightSharp(140);
     e4e:	8c e8       	ldi	r24, 0x8C	; 140
     e50:	0e 94 4e 03 	call	0x69c	; 0x69c <RightSharp>
//				_delay_ms(100);
				
				while (rightFlag == 0) sensorValueConversion();
     e54:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <rightFlag>
     e58:	81 11       	cpse	r24, r1
     e5a:	09 c0       	rjmp	.+18     	; 0xe6e <main+0x45e>
     e5c:	0e 94 08 01 	call	0x210	; 0x210 <sensorValueConversion>
     e60:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <rightFlag>
     e64:	88 23       	and	r24, r24
     e66:	d1 f3       	breq	.-12     	; 0xe5c <main+0x44c>
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <main+0x45e>
				
				while (sensorCount == 0 || weightedValue > 7 || weightedValue < 4) sensorValueConversion();
     e6a:	0e 94 08 01 	call	0x210	; 0x210 <sensorValueConversion>
     e6e:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <sensorCount>
     e72:	88 23       	and	r24, r24
     e74:	d1 f3       	breq	.-12     	; 0xe6a <main+0x45a>
     e76:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <weightedValue>
     e7a:	84 50       	subi	r24, 0x04	; 4
     e7c:	84 30       	cpi	r24, 0x04	; 4
     e7e:	a8 f7       	brcc	.-22     	; 0xe6a <main+0x45a>
     e80:	83 c0       	rjmp	.+262    	; 0xf88 <main+0x578>
			}
		}
		
		else if (allFlag == 1 && weightedValue < 7 && weightedValue > 3)
     e82:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <allFlag>
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	09 f0       	breq	.+2      	; 0xe8c <main+0x47c>
     e8a:	7e c0       	rjmp	.+252    	; 0xf88 <main+0x578>
     e8c:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <weightedValue>
     e90:	84 50       	subi	r24, 0x04	; 4
     e92:	83 30       	cpi	r24, 0x03	; 3
     e94:	08 f0       	brcs	.+2      	; 0xe98 <main+0x488>
     e96:	78 c0       	rjmp	.+240    	; 0xf88 <main+0x578>
		{
			Forward();
     e98:	0e 94 0f 03 	call	0x61e	; 0x61e <Forward>
			while (allFlag == 1 && stopFlag < 100) sensorValueConversion();
     e9c:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <allFlag>
     ea0:	81 30       	cpi	r24, 0x01	; 1
     ea2:	a9 f4       	brne	.+42     	; 0xece <main+0x4be>
     ea4:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <stopFlag>
     ea8:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <stopFlag+0x1>
     eac:	84 36       	cpi	r24, 0x64	; 100
     eae:	91 05       	cpc	r25, r1
     eb0:	ac f4       	brge	.+42     	; 0xedc <main+0x4cc>
     eb2:	0e 94 08 01 	call	0x210	; 0x210 <sensorValueConversion>
     eb6:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <allFlag>
     eba:	81 30       	cpi	r24, 0x01	; 1
     ebc:	41 f4       	brne	.+16     	; 0xece <main+0x4be>
     ebe:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <stopFlag>
     ec2:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <stopFlag+0x1>
     ec6:	84 36       	cpi	r24, 0x64	; 100
     ec8:	91 05       	cpc	r25, r1
     eca:	9c f3       	brlt	.-26     	; 0xeb2 <main+0x4a2>
     ecc:	07 c0       	rjmp	.+14     	; 0xedc <main+0x4cc>

			if (stopFlag >= 100)
     ece:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <stopFlag>
     ed2:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <stopFlag+0x1>
     ed6:	84 36       	cpi	r24, 0x64	; 100
     ed8:	91 05       	cpc	r25, r1
     eda:	4c f1       	brlt	.+82     	; 0xf2e <main+0x51e>
			{
				Backward();
     edc:	0e 94 24 03 	call	0x648	; 0x648 <Backward>
     ee0:	8f ef       	ldi	r24, 0xFF	; 255
     ee2:	91 ee       	ldi	r25, 0xE1	; 225
     ee4:	24 e0       	ldi	r18, 0x04	; 4
     ee6:	81 50       	subi	r24, 0x01	; 1
     ee8:	90 40       	sbci	r25, 0x00	; 0
     eea:	20 40       	sbci	r18, 0x00	; 0
     eec:	e1 f7       	brne	.-8      	; 0xee6 <main+0x4d6>
     eee:	00 c0       	rjmp	.+0      	; 0xef0 <main+0x4e0>
     ef0:	00 00       	nop
				_delay_ms(100);
				Stop();
     ef2:	0e 94 39 03 	call	0x672	; 0x672 <Stop>
     ef6:	3f ef       	ldi	r19, 0xFF	; 255
     ef8:	47 ea       	ldi	r20, 0xA7	; 167
     efa:	81 e6       	ldi	r24, 0x61	; 97
     efc:	31 50       	subi	r19, 0x01	; 1
     efe:	40 40       	sbci	r20, 0x00	; 0
     f00:	80 40       	sbci	r24, 0x00	; 0
     f02:	e1 f7       	brne	.-8      	; 0xefc <main+0x4ec>
     f04:	00 c0       	rjmp	.+0      	; 0xf06 <main+0x4f6>
     f06:	00 00       	nop
				_delay_ms(2000);
				while (sensorCount == 6 && allFlag == 1) sensorValueConversion();
     f08:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <sensorCount>
     f0c:	86 30       	cpi	r24, 0x06	; 6
     f0e:	e1 f5       	brne	.+120    	; 0xf88 <main+0x578>
     f10:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <allFlag>
     f14:	81 30       	cpi	r24, 0x01	; 1
     f16:	c1 f5       	brne	.+112    	; 0xf88 <main+0x578>
     f18:	0e 94 08 01 	call	0x210	; 0x210 <sensorValueConversion>
     f1c:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <sensorCount>
     f20:	86 30       	cpi	r24, 0x06	; 6
     f22:	91 f5       	brne	.+100    	; 0xf88 <main+0x578>
     f24:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <allFlag>
     f28:	81 30       	cpi	r24, 0x01	; 1
     f2a:	b1 f3       	breq	.-20     	; 0xf18 <main+0x508>
     f2c:	2d c0       	rjmp	.+90     	; 0xf88 <main+0x578>
     f2e:	9f ef       	ldi	r25, 0xFF	; 255
     f30:	27 ee       	ldi	r18, 0xE7	; 231
     f32:	33 e0       	ldi	r19, 0x03	; 3
     f34:	91 50       	subi	r25, 0x01	; 1
     f36:	20 40       	sbci	r18, 0x00	; 0
     f38:	30 40       	sbci	r19, 0x00	; 0
     f3a:	e1 f7       	brne	.-8      	; 0xf34 <main+0x524>
     f3c:	00 c0       	rjmp	.+0      	; 0xf3e <main+0x52e>
     f3e:	00 00       	nop
			}

			else
			{
				_delay_ms(80);
				sensorValueConversion();
     f40:	0e 94 08 01 	call	0x210	; 0x210 <sensorValueConversion>

				RightSharp(140);
     f44:	8c e8       	ldi	r24, 0x8C	; 140
     f46:	0e 94 4e 03 	call	0x69c	; 0x69c <RightSharp>
     f4a:	4f ef       	ldi	r20, 0xFF	; 255
     f4c:	81 ee       	ldi	r24, 0xE1	; 225
     f4e:	94 e0       	ldi	r25, 0x04	; 4
     f50:	41 50       	subi	r20, 0x01	; 1
     f52:	80 40       	sbci	r24, 0x00	; 0
     f54:	90 40       	sbci	r25, 0x00	; 0
     f56:	e1 f7       	brne	.-8      	; 0xf50 <main+0x540>
     f58:	00 c0       	rjmp	.+0      	; 0xf5a <main+0x54a>
     f5a:	00 00       	nop
				_delay_ms(100);
			
				while (rightFlag == 0) sensorValueConversion();
     f5c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <rightFlag>
     f60:	81 11       	cpse	r24, r1
     f62:	09 c0       	rjmp	.+18     	; 0xf76 <main+0x566>
     f64:	0e 94 08 01 	call	0x210	; 0x210 <sensorValueConversion>
     f68:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <rightFlag>
     f6c:	88 23       	and	r24, r24
     f6e:	d1 f3       	breq	.-12     	; 0xf64 <main+0x554>
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <main+0x566>
			
				while (sensorCount == 0 || weightedValue > 7 || weightedValue < 4)	sensorValueConversion();
     f72:	0e 94 08 01 	call	0x210	; 0x210 <sensorValueConversion>
     f76:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <sensorCount>
     f7a:	88 23       	and	r24, r24
     f7c:	d1 f3       	breq	.-12     	; 0xf72 <main+0x562>
     f7e:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <weightedValue>
     f82:	84 50       	subi	r24, 0x04	; 4
     f84:	84 30       	cpi	r24, 0x04	; 4
     f86:	a8 f7       	brcc	.-22     	; 0xf72 <main+0x562>
/*****************************************************Stop Sequence****************************************************/
		

/**********************************************************PID********************************************************/

		if (weightedValue != 255)
     f88:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <weightedValue>
     f8c:	8f 3f       	cpi	r24, 0xFF	; 255
     f8e:	09 f4       	brne	.+2      	; 0xf92 <main+0x582>
     f90:	73 cd       	rjmp	.-1306   	; 0xa78 <main+0x68>
		{
			PID_Correction();
     f92:	0e 94 39 02 	call	0x472	; 0x472 <PID_Correction>
			enable1(LMspeed);
     f96:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <LMspeed>
     f9a:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <LMspeed+0x1>
     f9e:	0e 94 f8 07 	call	0xff0	; 0xff0 <PWM0>
			enable2(RMspeed);
     fa2:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <RMspeed>
     fa6:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <RMspeed+0x1>
     faa:	0e 94 fa 07 	call	0xff4	; 0xff4 <PWM2>
     fae:	64 cd       	rjmp	.-1336   	; 0xa78 <main+0x68>
					sensorValueConversion();
				}
			}
		}

		else if (rightFlag == 1 && weightedValue < 7 && weightedValue > 3)
     fb0:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <weightedValue>
     fb4:	84 50       	subi	r24, 0x04	; 4
     fb6:	83 30       	cpi	r24, 0x03	; 3
     fb8:	38 f7       	brcc	.-50     	; 0xf88 <main+0x578>
     fba:	25 cf       	rjmp	.-438    	; 0xe06 <main+0x3f6>
     fbc:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <rightFlag>
     fc0:	81 30       	cpi	r24, 0x01	; 1
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <main+0x5b6>
     fc4:	5e cf       	rjmp	.-324    	; 0xe82 <main+0x472>
     fc6:	f4 cf       	rjmp	.-24     	; 0xfb0 <main+0x5a0>

00000fc8 <PWM0_init>:
	OCR1A = dutyCycle;
}

void PWM1B(int dutyCycle)
{
	OCR1B = dutyCycle;
     fc8:	83 b7       	in	r24, 0x33	; 51
     fca:	88 64       	ori	r24, 0x48	; 72
     fcc:	83 bf       	out	0x33, r24	; 51
     fce:	83 b7       	in	r24, 0x33	; 51
     fd0:	80 62       	ori	r24, 0x20	; 32
     fd2:	83 bf       	out	0x33, r24	; 51
     fd4:	83 b7       	in	r24, 0x33	; 51
     fd6:	81 60       	ori	r24, 0x01	; 1
     fd8:	83 bf       	out	0x33, r24	; 51
     fda:	08 95       	ret

00000fdc <PWM2_init>:
     fdc:	85 b5       	in	r24, 0x25	; 37
     fde:	88 64       	ori	r24, 0x48	; 72
     fe0:	85 bd       	out	0x25, r24	; 37
     fe2:	85 b5       	in	r24, 0x25	; 37
     fe4:	80 62       	ori	r24, 0x20	; 32
     fe6:	85 bd       	out	0x25, r24	; 37
     fe8:	85 b5       	in	r24, 0x25	; 37
     fea:	81 60       	ori	r24, 0x01	; 1
     fec:	85 bd       	out	0x25, r24	; 37
     fee:	08 95       	ret

00000ff0 <PWM0>:
     ff0:	8c bf       	out	0x3c, r24	; 60
     ff2:	08 95       	ret

00000ff4 <PWM2>:
}

void PWM2(int dutyCycle)
{
	OCR2 = dutyCycle;
     ff4:	83 bd       	out	0x23, r24	; 35
     ff6:	08 95       	ret

00000ff8 <UART_init>:
#include "serial_lib.h"

void UART_init(void)
{
	UCSRC &= ~(1 << UMSEL);						// Asynchronous Mode Selection
     ff8:	80 b5       	in	r24, 0x20	; 32
     ffa:	8f 7b       	andi	r24, 0xBF	; 191
     ffc:	80 bd       	out	0x20, r24	; 32
	UCSRA &= ~(1 << U2X);						// Normal Transmission Mode
     ffe:	59 98       	cbi	0x0b, 1	; 11
	UBRRH = 0;
    1000:	10 bc       	out	0x20, r1	; 32
	UBRRL = 103;
    1002:	87 e6       	ldi	r24, 0x67	; 103
    1004:	89 b9       	out	0x09, r24	; 9
	UCSRB |= (1 << RXEN) | (1 << TXEN);
    1006:	8a b1       	in	r24, 0x0a	; 10
    1008:	88 61       	ori	r24, 0x18	; 24
    100a:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1 << USBS) | (3 << UCSZ0);
    100c:	80 b5       	in	r24, 0x20	; 32
    100e:	8e 68       	ori	r24, 0x8E	; 142
    1010:	80 bd       	out	0x20, r24	; 32
    1012:	08 95       	ret

00001014 <Serial_sendChar>:
	Serial_sendString(intBuffer);
}

void Serial_sendChar(char c)
{
	while (!(UCSRA & (1 << UDRE)));
    1014:	5d 9b       	sbis	0x0b, 5	; 11
    1016:	fe cf       	rjmp	.-4      	; 0x1014 <Serial_sendChar>
	UDR = c;
    1018:	8c b9       	out	0x0c, r24	; 12
    101a:	08 95       	ret

0000101c <Serial_sendString>:
}

void Serial_sendString(char *s)
{
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	ec 01       	movw	r28, r24
	for(int i = 0; s[i] != '\0'; i++)
    1022:	88 81       	ld	r24, Y
    1024:	88 23       	and	r24, r24
    1026:	31 f0       	breq	.+12     	; 0x1034 <Serial_sendString+0x18>
    1028:	21 96       	adiw	r28, 0x01	; 1
	{
		Serial_sendChar(s[i]);
    102a:	0e 94 0a 08 	call	0x1014	; 0x1014 <Serial_sendChar>
	UDR = c;
}

void Serial_sendString(char *s)
{
	for(int i = 0; s[i] != '\0'; i++)
    102e:	89 91       	ld	r24, Y+
    1030:	81 11       	cpse	r24, r1
    1032:	fb cf       	rjmp	.-10     	; 0x102a <Serial_sendString+0xe>
	{
		Serial_sendChar(s[i]);
	}
}
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	08 95       	ret

0000103a <Serial_sendInt>:
// 	
// 	UDR = data;
// }

void Serial_sendInt(unsigned int data, int intBase)
{
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	64 97       	sbiw	r28, 0x14	; 20
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	de bf       	out	0x3e, r29	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	ab 01       	movw	r20, r22
	while (!(UCSRA & (1 << UDRE)));
    1050:	5d 9b       	sbis	0x0b, 5	; 11
    1052:	fe cf       	rjmp	.-4      	; 0x1050 <Serial_sendInt+0x16>
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
    1054:	be 01       	movw	r22, r28
    1056:	6f 5f       	subi	r22, 0xFF	; 255
    1058:	7f 4f       	sbci	r23, 0xFF	; 255
    105a:	0e 94 37 0a 	call	0x146e	; 0x146e <itoa>
	char intBuffer[20];
	itoa(data, intBuffer, intBase);
	Serial_sendString(intBuffer);
    105e:	ce 01       	movw	r24, r28
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	0e 94 0e 08 	call	0x101c	; 0x101c <Serial_sendString>
}
    1066:	64 96       	adiw	r28, 0x14	; 20
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	de bf       	out	0x3e, r29	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	cd bf       	out	0x3d, r28	; 61
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	08 95       	ret

00001078 <__subsf3>:
    1078:	50 58       	subi	r21, 0x80	; 128

0000107a <__addsf3>:
    107a:	bb 27       	eor	r27, r27
    107c:	aa 27       	eor	r26, r26
    107e:	0e 94 54 08 	call	0x10a8	; 0x10a8 <__addsf3x>
    1082:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <__fp_round>
    1086:	0e 94 4e 09 	call	0x129c	; 0x129c <__fp_pscA>
    108a:	38 f0       	brcs	.+14     	; 0x109a <__addsf3+0x20>
    108c:	0e 94 55 09 	call	0x12aa	; 0x12aa <__fp_pscB>
    1090:	20 f0       	brcs	.+8      	; 0x109a <__addsf3+0x20>
    1092:	39 f4       	brne	.+14     	; 0x10a2 <__addsf3+0x28>
    1094:	9f 3f       	cpi	r25, 0xFF	; 255
    1096:	19 f4       	brne	.+6      	; 0x109e <__addsf3+0x24>
    1098:	26 f4       	brtc	.+8      	; 0x10a2 <__addsf3+0x28>
    109a:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__fp_nan>
    109e:	0e f4       	brtc	.+2      	; 0x10a2 <__addsf3+0x28>
    10a0:	e0 95       	com	r30
    10a2:	e7 fb       	bst	r30, 7
    10a4:	0c 94 45 09 	jmp	0x128a	; 0x128a <__fp_inf>

000010a8 <__addsf3x>:
    10a8:	e9 2f       	mov	r30, r25
    10aa:	0e 94 6d 09 	call	0x12da	; 0x12da <__fp_split3>
    10ae:	58 f3       	brcs	.-42     	; 0x1086 <__addsf3+0xc>
    10b0:	ba 17       	cp	r27, r26
    10b2:	62 07       	cpc	r22, r18
    10b4:	73 07       	cpc	r23, r19
    10b6:	84 07       	cpc	r24, r20
    10b8:	95 07       	cpc	r25, r21
    10ba:	20 f0       	brcs	.+8      	; 0x10c4 <__addsf3x+0x1c>
    10bc:	79 f4       	brne	.+30     	; 0x10dc <__addsf3x+0x34>
    10be:	a6 f5       	brtc	.+104    	; 0x1128 <__addsf3x+0x80>
    10c0:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__fp_zero>
    10c4:	0e f4       	brtc	.+2      	; 0x10c8 <__addsf3x+0x20>
    10c6:	e0 95       	com	r30
    10c8:	0b 2e       	mov	r0, r27
    10ca:	ba 2f       	mov	r27, r26
    10cc:	a0 2d       	mov	r26, r0
    10ce:	0b 01       	movw	r0, r22
    10d0:	b9 01       	movw	r22, r18
    10d2:	90 01       	movw	r18, r0
    10d4:	0c 01       	movw	r0, r24
    10d6:	ca 01       	movw	r24, r20
    10d8:	a0 01       	movw	r20, r0
    10da:	11 24       	eor	r1, r1
    10dc:	ff 27       	eor	r31, r31
    10de:	59 1b       	sub	r21, r25
    10e0:	99 f0       	breq	.+38     	; 0x1108 <__addsf3x+0x60>
    10e2:	59 3f       	cpi	r21, 0xF9	; 249
    10e4:	50 f4       	brcc	.+20     	; 0x10fa <__addsf3x+0x52>
    10e6:	50 3e       	cpi	r21, 0xE0	; 224
    10e8:	68 f1       	brcs	.+90     	; 0x1144 <__addsf3x+0x9c>
    10ea:	1a 16       	cp	r1, r26
    10ec:	f0 40       	sbci	r31, 0x00	; 0
    10ee:	a2 2f       	mov	r26, r18
    10f0:	23 2f       	mov	r18, r19
    10f2:	34 2f       	mov	r19, r20
    10f4:	44 27       	eor	r20, r20
    10f6:	58 5f       	subi	r21, 0xF8	; 248
    10f8:	f3 cf       	rjmp	.-26     	; 0x10e0 <__addsf3x+0x38>
    10fa:	46 95       	lsr	r20
    10fc:	37 95       	ror	r19
    10fe:	27 95       	ror	r18
    1100:	a7 95       	ror	r26
    1102:	f0 40       	sbci	r31, 0x00	; 0
    1104:	53 95       	inc	r21
    1106:	c9 f7       	brne	.-14     	; 0x10fa <__addsf3x+0x52>
    1108:	7e f4       	brtc	.+30     	; 0x1128 <__addsf3x+0x80>
    110a:	1f 16       	cp	r1, r31
    110c:	ba 0b       	sbc	r27, r26
    110e:	62 0b       	sbc	r22, r18
    1110:	73 0b       	sbc	r23, r19
    1112:	84 0b       	sbc	r24, r20
    1114:	ba f0       	brmi	.+46     	; 0x1144 <__addsf3x+0x9c>
    1116:	91 50       	subi	r25, 0x01	; 1
    1118:	a1 f0       	breq	.+40     	; 0x1142 <__addsf3x+0x9a>
    111a:	ff 0f       	add	r31, r31
    111c:	bb 1f       	adc	r27, r27
    111e:	66 1f       	adc	r22, r22
    1120:	77 1f       	adc	r23, r23
    1122:	88 1f       	adc	r24, r24
    1124:	c2 f7       	brpl	.-16     	; 0x1116 <__addsf3x+0x6e>
    1126:	0e c0       	rjmp	.+28     	; 0x1144 <__addsf3x+0x9c>
    1128:	ba 0f       	add	r27, r26
    112a:	62 1f       	adc	r22, r18
    112c:	73 1f       	adc	r23, r19
    112e:	84 1f       	adc	r24, r20
    1130:	48 f4       	brcc	.+18     	; 0x1144 <__addsf3x+0x9c>
    1132:	87 95       	ror	r24
    1134:	77 95       	ror	r23
    1136:	67 95       	ror	r22
    1138:	b7 95       	ror	r27
    113a:	f7 95       	ror	r31
    113c:	9e 3f       	cpi	r25, 0xFE	; 254
    113e:	08 f0       	brcs	.+2      	; 0x1142 <__addsf3x+0x9a>
    1140:	b0 cf       	rjmp	.-160    	; 0x10a2 <__addsf3+0x28>
    1142:	93 95       	inc	r25
    1144:	88 0f       	add	r24, r24
    1146:	08 f0       	brcs	.+2      	; 0x114a <__addsf3x+0xa2>
    1148:	99 27       	eor	r25, r25
    114a:	ee 0f       	add	r30, r30
    114c:	97 95       	ror	r25
    114e:	87 95       	ror	r24
    1150:	08 95       	ret

00001152 <__cmpsf2>:
    1152:	0e 94 21 09 	call	0x1242	; 0x1242 <__fp_cmp>
    1156:	08 f4       	brcc	.+2      	; 0x115a <__cmpsf2+0x8>
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	08 95       	ret

0000115c <__fixsfsi>:
    115c:	0e 94 b5 08 	call	0x116a	; 0x116a <__fixunssfsi>
    1160:	68 94       	set
    1162:	b1 11       	cpse	r27, r1
    1164:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__fp_szero>
    1168:	08 95       	ret

0000116a <__fixunssfsi>:
    116a:	0e 94 75 09 	call	0x12ea	; 0x12ea <__fp_splitA>
    116e:	88 f0       	brcs	.+34     	; 0x1192 <__fixunssfsi+0x28>
    1170:	9f 57       	subi	r25, 0x7F	; 127
    1172:	98 f0       	brcs	.+38     	; 0x119a <__fixunssfsi+0x30>
    1174:	b9 2f       	mov	r27, r25
    1176:	99 27       	eor	r25, r25
    1178:	b7 51       	subi	r27, 0x17	; 23
    117a:	b0 f0       	brcs	.+44     	; 0x11a8 <__fixunssfsi+0x3e>
    117c:	e1 f0       	breq	.+56     	; 0x11b6 <__fixunssfsi+0x4c>
    117e:	66 0f       	add	r22, r22
    1180:	77 1f       	adc	r23, r23
    1182:	88 1f       	adc	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	1a f0       	brmi	.+6      	; 0x118e <__fixunssfsi+0x24>
    1188:	ba 95       	dec	r27
    118a:	c9 f7       	brne	.-14     	; 0x117e <__fixunssfsi+0x14>
    118c:	14 c0       	rjmp	.+40     	; 0x11b6 <__fixunssfsi+0x4c>
    118e:	b1 30       	cpi	r27, 0x01	; 1
    1190:	91 f0       	breq	.+36     	; 0x11b6 <__fixunssfsi+0x4c>
    1192:	0e 94 8f 09 	call	0x131e	; 0x131e <__fp_zero>
    1196:	b1 e0       	ldi	r27, 0x01	; 1
    1198:	08 95       	ret
    119a:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__fp_zero>
    119e:	67 2f       	mov	r22, r23
    11a0:	78 2f       	mov	r23, r24
    11a2:	88 27       	eor	r24, r24
    11a4:	b8 5f       	subi	r27, 0xF8	; 248
    11a6:	39 f0       	breq	.+14     	; 0x11b6 <__fixunssfsi+0x4c>
    11a8:	b9 3f       	cpi	r27, 0xF9	; 249
    11aa:	cc f3       	brlt	.-14     	; 0x119e <__fixunssfsi+0x34>
    11ac:	86 95       	lsr	r24
    11ae:	77 95       	ror	r23
    11b0:	67 95       	ror	r22
    11b2:	b3 95       	inc	r27
    11b4:	d9 f7       	brne	.-10     	; 0x11ac <__fixunssfsi+0x42>
    11b6:	3e f4       	brtc	.+14     	; 0x11c6 <__fixunssfsi+0x5c>
    11b8:	90 95       	com	r25
    11ba:	80 95       	com	r24
    11bc:	70 95       	com	r23
    11be:	61 95       	neg	r22
    11c0:	7f 4f       	sbci	r23, 0xFF	; 255
    11c2:	8f 4f       	sbci	r24, 0xFF	; 255
    11c4:	9f 4f       	sbci	r25, 0xFF	; 255
    11c6:	08 95       	ret

000011c8 <__floatunsisf>:
    11c8:	e8 94       	clt
    11ca:	09 c0       	rjmp	.+18     	; 0x11de <__floatsisf+0x12>

000011cc <__floatsisf>:
    11cc:	97 fb       	bst	r25, 7
    11ce:	3e f4       	brtc	.+14     	; 0x11de <__floatsisf+0x12>
    11d0:	90 95       	com	r25
    11d2:	80 95       	com	r24
    11d4:	70 95       	com	r23
    11d6:	61 95       	neg	r22
    11d8:	7f 4f       	sbci	r23, 0xFF	; 255
    11da:	8f 4f       	sbci	r24, 0xFF	; 255
    11dc:	9f 4f       	sbci	r25, 0xFF	; 255
    11de:	99 23       	and	r25, r25
    11e0:	a9 f0       	breq	.+42     	; 0x120c <__floatsisf+0x40>
    11e2:	f9 2f       	mov	r31, r25
    11e4:	96 e9       	ldi	r25, 0x96	; 150
    11e6:	bb 27       	eor	r27, r27
    11e8:	93 95       	inc	r25
    11ea:	f6 95       	lsr	r31
    11ec:	87 95       	ror	r24
    11ee:	77 95       	ror	r23
    11f0:	67 95       	ror	r22
    11f2:	b7 95       	ror	r27
    11f4:	f1 11       	cpse	r31, r1
    11f6:	f8 cf       	rjmp	.-16     	; 0x11e8 <__floatsisf+0x1c>
    11f8:	fa f4       	brpl	.+62     	; 0x1238 <__floatsisf+0x6c>
    11fa:	bb 0f       	add	r27, r27
    11fc:	11 f4       	brne	.+4      	; 0x1202 <__floatsisf+0x36>
    11fe:	60 ff       	sbrs	r22, 0
    1200:	1b c0       	rjmp	.+54     	; 0x1238 <__floatsisf+0x6c>
    1202:	6f 5f       	subi	r22, 0xFF	; 255
    1204:	7f 4f       	sbci	r23, 0xFF	; 255
    1206:	8f 4f       	sbci	r24, 0xFF	; 255
    1208:	9f 4f       	sbci	r25, 0xFF	; 255
    120a:	16 c0       	rjmp	.+44     	; 0x1238 <__floatsisf+0x6c>
    120c:	88 23       	and	r24, r24
    120e:	11 f0       	breq	.+4      	; 0x1214 <__floatsisf+0x48>
    1210:	96 e9       	ldi	r25, 0x96	; 150
    1212:	11 c0       	rjmp	.+34     	; 0x1236 <__floatsisf+0x6a>
    1214:	77 23       	and	r23, r23
    1216:	21 f0       	breq	.+8      	; 0x1220 <__floatsisf+0x54>
    1218:	9e e8       	ldi	r25, 0x8E	; 142
    121a:	87 2f       	mov	r24, r23
    121c:	76 2f       	mov	r23, r22
    121e:	05 c0       	rjmp	.+10     	; 0x122a <__floatsisf+0x5e>
    1220:	66 23       	and	r22, r22
    1222:	71 f0       	breq	.+28     	; 0x1240 <__floatsisf+0x74>
    1224:	96 e8       	ldi	r25, 0x86	; 134
    1226:	86 2f       	mov	r24, r22
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	60 e0       	ldi	r22, 0x00	; 0
    122c:	2a f0       	brmi	.+10     	; 0x1238 <__floatsisf+0x6c>
    122e:	9a 95       	dec	r25
    1230:	66 0f       	add	r22, r22
    1232:	77 1f       	adc	r23, r23
    1234:	88 1f       	adc	r24, r24
    1236:	da f7       	brpl	.-10     	; 0x122e <__floatsisf+0x62>
    1238:	88 0f       	add	r24, r24
    123a:	96 95       	lsr	r25
    123c:	87 95       	ror	r24
    123e:	97 f9       	bld	r25, 7
    1240:	08 95       	ret

00001242 <__fp_cmp>:
    1242:	99 0f       	add	r25, r25
    1244:	00 08       	sbc	r0, r0
    1246:	55 0f       	add	r21, r21
    1248:	aa 0b       	sbc	r26, r26
    124a:	e0 e8       	ldi	r30, 0x80	; 128
    124c:	fe ef       	ldi	r31, 0xFE	; 254
    124e:	16 16       	cp	r1, r22
    1250:	17 06       	cpc	r1, r23
    1252:	e8 07       	cpc	r30, r24
    1254:	f9 07       	cpc	r31, r25
    1256:	c0 f0       	brcs	.+48     	; 0x1288 <__fp_cmp+0x46>
    1258:	12 16       	cp	r1, r18
    125a:	13 06       	cpc	r1, r19
    125c:	e4 07       	cpc	r30, r20
    125e:	f5 07       	cpc	r31, r21
    1260:	98 f0       	brcs	.+38     	; 0x1288 <__fp_cmp+0x46>
    1262:	62 1b       	sub	r22, r18
    1264:	73 0b       	sbc	r23, r19
    1266:	84 0b       	sbc	r24, r20
    1268:	95 0b       	sbc	r25, r21
    126a:	39 f4       	brne	.+14     	; 0x127a <__fp_cmp+0x38>
    126c:	0a 26       	eor	r0, r26
    126e:	61 f0       	breq	.+24     	; 0x1288 <__fp_cmp+0x46>
    1270:	23 2b       	or	r18, r19
    1272:	24 2b       	or	r18, r20
    1274:	25 2b       	or	r18, r21
    1276:	21 f4       	brne	.+8      	; 0x1280 <__fp_cmp+0x3e>
    1278:	08 95       	ret
    127a:	0a 26       	eor	r0, r26
    127c:	09 f4       	brne	.+2      	; 0x1280 <__fp_cmp+0x3e>
    127e:	a1 40       	sbci	r26, 0x01	; 1
    1280:	a6 95       	lsr	r26
    1282:	8f ef       	ldi	r24, 0xFF	; 255
    1284:	81 1d       	adc	r24, r1
    1286:	81 1d       	adc	r24, r1
    1288:	08 95       	ret

0000128a <__fp_inf>:
    128a:	97 f9       	bld	r25, 7
    128c:	9f 67       	ori	r25, 0x7F	; 127
    128e:	80 e8       	ldi	r24, 0x80	; 128
    1290:	70 e0       	ldi	r23, 0x00	; 0
    1292:	60 e0       	ldi	r22, 0x00	; 0
    1294:	08 95       	ret

00001296 <__fp_nan>:
    1296:	9f ef       	ldi	r25, 0xFF	; 255
    1298:	80 ec       	ldi	r24, 0xC0	; 192
    129a:	08 95       	ret

0000129c <__fp_pscA>:
    129c:	00 24       	eor	r0, r0
    129e:	0a 94       	dec	r0
    12a0:	16 16       	cp	r1, r22
    12a2:	17 06       	cpc	r1, r23
    12a4:	18 06       	cpc	r1, r24
    12a6:	09 06       	cpc	r0, r25
    12a8:	08 95       	ret

000012aa <__fp_pscB>:
    12aa:	00 24       	eor	r0, r0
    12ac:	0a 94       	dec	r0
    12ae:	12 16       	cp	r1, r18
    12b0:	13 06       	cpc	r1, r19
    12b2:	14 06       	cpc	r1, r20
    12b4:	05 06       	cpc	r0, r21
    12b6:	08 95       	ret

000012b8 <__fp_round>:
    12b8:	09 2e       	mov	r0, r25
    12ba:	03 94       	inc	r0
    12bc:	00 0c       	add	r0, r0
    12be:	11 f4       	brne	.+4      	; 0x12c4 <__fp_round+0xc>
    12c0:	88 23       	and	r24, r24
    12c2:	52 f0       	brmi	.+20     	; 0x12d8 <__fp_round+0x20>
    12c4:	bb 0f       	add	r27, r27
    12c6:	40 f4       	brcc	.+16     	; 0x12d8 <__fp_round+0x20>
    12c8:	bf 2b       	or	r27, r31
    12ca:	11 f4       	brne	.+4      	; 0x12d0 <__fp_round+0x18>
    12cc:	60 ff       	sbrs	r22, 0
    12ce:	04 c0       	rjmp	.+8      	; 0x12d8 <__fp_round+0x20>
    12d0:	6f 5f       	subi	r22, 0xFF	; 255
    12d2:	7f 4f       	sbci	r23, 0xFF	; 255
    12d4:	8f 4f       	sbci	r24, 0xFF	; 255
    12d6:	9f 4f       	sbci	r25, 0xFF	; 255
    12d8:	08 95       	ret

000012da <__fp_split3>:
    12da:	57 fd       	sbrc	r21, 7
    12dc:	90 58       	subi	r25, 0x80	; 128
    12de:	44 0f       	add	r20, r20
    12e0:	55 1f       	adc	r21, r21
    12e2:	59 f0       	breq	.+22     	; 0x12fa <__fp_splitA+0x10>
    12e4:	5f 3f       	cpi	r21, 0xFF	; 255
    12e6:	71 f0       	breq	.+28     	; 0x1304 <__fp_splitA+0x1a>
    12e8:	47 95       	ror	r20

000012ea <__fp_splitA>:
    12ea:	88 0f       	add	r24, r24
    12ec:	97 fb       	bst	r25, 7
    12ee:	99 1f       	adc	r25, r25
    12f0:	61 f0       	breq	.+24     	; 0x130a <__fp_splitA+0x20>
    12f2:	9f 3f       	cpi	r25, 0xFF	; 255
    12f4:	79 f0       	breq	.+30     	; 0x1314 <__fp_splitA+0x2a>
    12f6:	87 95       	ror	r24
    12f8:	08 95       	ret
    12fa:	12 16       	cp	r1, r18
    12fc:	13 06       	cpc	r1, r19
    12fe:	14 06       	cpc	r1, r20
    1300:	55 1f       	adc	r21, r21
    1302:	f2 cf       	rjmp	.-28     	; 0x12e8 <__fp_split3+0xe>
    1304:	46 95       	lsr	r20
    1306:	f1 df       	rcall	.-30     	; 0x12ea <__fp_splitA>
    1308:	08 c0       	rjmp	.+16     	; 0x131a <__fp_splitA+0x30>
    130a:	16 16       	cp	r1, r22
    130c:	17 06       	cpc	r1, r23
    130e:	18 06       	cpc	r1, r24
    1310:	99 1f       	adc	r25, r25
    1312:	f1 cf       	rjmp	.-30     	; 0x12f6 <__fp_splitA+0xc>
    1314:	86 95       	lsr	r24
    1316:	71 05       	cpc	r23, r1
    1318:	61 05       	cpc	r22, r1
    131a:	08 94       	sec
    131c:	08 95       	ret

0000131e <__fp_zero>:
    131e:	e8 94       	clt

00001320 <__fp_szero>:
    1320:	bb 27       	eor	r27, r27
    1322:	66 27       	eor	r22, r22
    1324:	77 27       	eor	r23, r23
    1326:	cb 01       	movw	r24, r22
    1328:	97 f9       	bld	r25, 7
    132a:	08 95       	ret

0000132c <__gesf2>:
    132c:	0e 94 21 09 	call	0x1242	; 0x1242 <__fp_cmp>
    1330:	08 f4       	brcc	.+2      	; 0x1334 <__gesf2+0x8>
    1332:	8f ef       	ldi	r24, 0xFF	; 255
    1334:	08 95       	ret

00001336 <__mulsf3>:
    1336:	0e 94 ae 09 	call	0x135c	; 0x135c <__mulsf3x>
    133a:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <__fp_round>
    133e:	0e 94 4e 09 	call	0x129c	; 0x129c <__fp_pscA>
    1342:	38 f0       	brcs	.+14     	; 0x1352 <__mulsf3+0x1c>
    1344:	0e 94 55 09 	call	0x12aa	; 0x12aa <__fp_pscB>
    1348:	20 f0       	brcs	.+8      	; 0x1352 <__mulsf3+0x1c>
    134a:	95 23       	and	r25, r21
    134c:	11 f0       	breq	.+4      	; 0x1352 <__mulsf3+0x1c>
    134e:	0c 94 45 09 	jmp	0x128a	; 0x128a <__fp_inf>
    1352:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__fp_nan>
    1356:	11 24       	eor	r1, r1
    1358:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__fp_szero>

0000135c <__mulsf3x>:
    135c:	0e 94 6d 09 	call	0x12da	; 0x12da <__fp_split3>
    1360:	70 f3       	brcs	.-36     	; 0x133e <__mulsf3+0x8>

00001362 <__mulsf3_pse>:
    1362:	95 9f       	mul	r25, r21
    1364:	c1 f3       	breq	.-16     	; 0x1356 <__mulsf3+0x20>
    1366:	95 0f       	add	r25, r21
    1368:	50 e0       	ldi	r21, 0x00	; 0
    136a:	55 1f       	adc	r21, r21
    136c:	62 9f       	mul	r22, r18
    136e:	f0 01       	movw	r30, r0
    1370:	72 9f       	mul	r23, r18
    1372:	bb 27       	eor	r27, r27
    1374:	f0 0d       	add	r31, r0
    1376:	b1 1d       	adc	r27, r1
    1378:	63 9f       	mul	r22, r19
    137a:	aa 27       	eor	r26, r26
    137c:	f0 0d       	add	r31, r0
    137e:	b1 1d       	adc	r27, r1
    1380:	aa 1f       	adc	r26, r26
    1382:	64 9f       	mul	r22, r20
    1384:	66 27       	eor	r22, r22
    1386:	b0 0d       	add	r27, r0
    1388:	a1 1d       	adc	r26, r1
    138a:	66 1f       	adc	r22, r22
    138c:	82 9f       	mul	r24, r18
    138e:	22 27       	eor	r18, r18
    1390:	b0 0d       	add	r27, r0
    1392:	a1 1d       	adc	r26, r1
    1394:	62 1f       	adc	r22, r18
    1396:	73 9f       	mul	r23, r19
    1398:	b0 0d       	add	r27, r0
    139a:	a1 1d       	adc	r26, r1
    139c:	62 1f       	adc	r22, r18
    139e:	83 9f       	mul	r24, r19
    13a0:	a0 0d       	add	r26, r0
    13a2:	61 1d       	adc	r22, r1
    13a4:	22 1f       	adc	r18, r18
    13a6:	74 9f       	mul	r23, r20
    13a8:	33 27       	eor	r19, r19
    13aa:	a0 0d       	add	r26, r0
    13ac:	61 1d       	adc	r22, r1
    13ae:	23 1f       	adc	r18, r19
    13b0:	84 9f       	mul	r24, r20
    13b2:	60 0d       	add	r22, r0
    13b4:	21 1d       	adc	r18, r1
    13b6:	82 2f       	mov	r24, r18
    13b8:	76 2f       	mov	r23, r22
    13ba:	6a 2f       	mov	r22, r26
    13bc:	11 24       	eor	r1, r1
    13be:	9f 57       	subi	r25, 0x7F	; 127
    13c0:	50 40       	sbci	r21, 0x00	; 0
    13c2:	9a f0       	brmi	.+38     	; 0x13ea <__mulsf3_pse+0x88>
    13c4:	f1 f0       	breq	.+60     	; 0x1402 <__mulsf3_pse+0xa0>
    13c6:	88 23       	and	r24, r24
    13c8:	4a f0       	brmi	.+18     	; 0x13dc <__mulsf3_pse+0x7a>
    13ca:	ee 0f       	add	r30, r30
    13cc:	ff 1f       	adc	r31, r31
    13ce:	bb 1f       	adc	r27, r27
    13d0:	66 1f       	adc	r22, r22
    13d2:	77 1f       	adc	r23, r23
    13d4:	88 1f       	adc	r24, r24
    13d6:	91 50       	subi	r25, 0x01	; 1
    13d8:	50 40       	sbci	r21, 0x00	; 0
    13da:	a9 f7       	brne	.-22     	; 0x13c6 <__mulsf3_pse+0x64>
    13dc:	9e 3f       	cpi	r25, 0xFE	; 254
    13de:	51 05       	cpc	r21, r1
    13e0:	80 f0       	brcs	.+32     	; 0x1402 <__mulsf3_pse+0xa0>
    13e2:	0c 94 45 09 	jmp	0x128a	; 0x128a <__fp_inf>
    13e6:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__fp_szero>
    13ea:	5f 3f       	cpi	r21, 0xFF	; 255
    13ec:	e4 f3       	brlt	.-8      	; 0x13e6 <__mulsf3_pse+0x84>
    13ee:	98 3e       	cpi	r25, 0xE8	; 232
    13f0:	d4 f3       	brlt	.-12     	; 0x13e6 <__mulsf3_pse+0x84>
    13f2:	86 95       	lsr	r24
    13f4:	77 95       	ror	r23
    13f6:	67 95       	ror	r22
    13f8:	b7 95       	ror	r27
    13fa:	f7 95       	ror	r31
    13fc:	e7 95       	ror	r30
    13fe:	9f 5f       	subi	r25, 0xFF	; 255
    1400:	c1 f7       	brne	.-16     	; 0x13f2 <__mulsf3_pse+0x90>
    1402:	fe 2b       	or	r31, r30
    1404:	88 0f       	add	r24, r24
    1406:	91 1d       	adc	r25, r1
    1408:	96 95       	lsr	r25
    140a:	87 95       	ror	r24
    140c:	97 f9       	bld	r25, 7
    140e:	08 95       	ret

00001410 <__udivmodqi4>:
    1410:	99 1b       	sub	r25, r25
    1412:	79 e0       	ldi	r23, 0x09	; 9
    1414:	04 c0       	rjmp	.+8      	; 0x141e <__udivmodqi4_ep>

00001416 <__udivmodqi4_loop>:
    1416:	99 1f       	adc	r25, r25
    1418:	96 17       	cp	r25, r22
    141a:	08 f0       	brcs	.+2      	; 0x141e <__udivmodqi4_ep>
    141c:	96 1b       	sub	r25, r22

0000141e <__udivmodqi4_ep>:
    141e:	88 1f       	adc	r24, r24
    1420:	7a 95       	dec	r23
    1422:	c9 f7       	brne	.-14     	; 0x1416 <__udivmodqi4_loop>
    1424:	80 95       	com	r24
    1426:	08 95       	ret

00001428 <__udivmodhi4>:
    1428:	aa 1b       	sub	r26, r26
    142a:	bb 1b       	sub	r27, r27
    142c:	51 e1       	ldi	r21, 0x11	; 17
    142e:	07 c0       	rjmp	.+14     	; 0x143e <__udivmodhi4_ep>

00001430 <__udivmodhi4_loop>:
    1430:	aa 1f       	adc	r26, r26
    1432:	bb 1f       	adc	r27, r27
    1434:	a6 17       	cp	r26, r22
    1436:	b7 07       	cpc	r27, r23
    1438:	10 f0       	brcs	.+4      	; 0x143e <__udivmodhi4_ep>
    143a:	a6 1b       	sub	r26, r22
    143c:	b7 0b       	sbc	r27, r23

0000143e <__udivmodhi4_ep>:
    143e:	88 1f       	adc	r24, r24
    1440:	99 1f       	adc	r25, r25
    1442:	5a 95       	dec	r21
    1444:	a9 f7       	brne	.-22     	; 0x1430 <__udivmodhi4_loop>
    1446:	80 95       	com	r24
    1448:	90 95       	com	r25
    144a:	bc 01       	movw	r22, r24
    144c:	cd 01       	movw	r24, r26
    144e:	08 95       	ret

00001450 <__umulhisi3>:
    1450:	a2 9f       	mul	r26, r18
    1452:	b0 01       	movw	r22, r0
    1454:	b3 9f       	mul	r27, r19
    1456:	c0 01       	movw	r24, r0
    1458:	a3 9f       	mul	r26, r19
    145a:	70 0d       	add	r23, r0
    145c:	81 1d       	adc	r24, r1
    145e:	11 24       	eor	r1, r1
    1460:	91 1d       	adc	r25, r1
    1462:	b2 9f       	mul	r27, r18
    1464:	70 0d       	add	r23, r0
    1466:	81 1d       	adc	r24, r1
    1468:	11 24       	eor	r1, r1
    146a:	91 1d       	adc	r25, r1
    146c:	08 95       	ret

0000146e <itoa>:
    146e:	45 32       	cpi	r20, 0x25	; 37
    1470:	51 05       	cpc	r21, r1
    1472:	20 f4       	brcc	.+8      	; 0x147c <itoa+0xe>
    1474:	42 30       	cpi	r20, 0x02	; 2
    1476:	10 f0       	brcs	.+4      	; 0x147c <itoa+0xe>
    1478:	0c 94 42 0a 	jmp	0x1484	; 0x1484 <__itoa_ncheck>
    147c:	fb 01       	movw	r30, r22
    147e:	10 82       	st	Z, r1
    1480:	cb 01       	movw	r24, r22
    1482:	08 95       	ret

00001484 <__itoa_ncheck>:
    1484:	bb 27       	eor	r27, r27
    1486:	4a 30       	cpi	r20, 0x0A	; 10
    1488:	31 f4       	brne	.+12     	; 0x1496 <__itoa_ncheck+0x12>
    148a:	99 23       	and	r25, r25
    148c:	22 f4       	brpl	.+8      	; 0x1496 <__itoa_ncheck+0x12>
    148e:	bd e2       	ldi	r27, 0x2D	; 45
    1490:	90 95       	com	r25
    1492:	81 95       	neg	r24
    1494:	9f 4f       	sbci	r25, 0xFF	; 255
    1496:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <__utoa_common>

0000149a <__utoa_ncheck>:
    149a:	bb 27       	eor	r27, r27

0000149c <__utoa_common>:
    149c:	fb 01       	movw	r30, r22
    149e:	55 27       	eor	r21, r21
    14a0:	aa 27       	eor	r26, r26
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	aa 1f       	adc	r26, r26
    14a8:	a4 17       	cp	r26, r20
    14aa:	10 f0       	brcs	.+4      	; 0x14b0 <__utoa_common+0x14>
    14ac:	a4 1b       	sub	r26, r20
    14ae:	83 95       	inc	r24
    14b0:	50 51       	subi	r21, 0x10	; 16
    14b2:	b9 f7       	brne	.-18     	; 0x14a2 <__utoa_common+0x6>
    14b4:	a0 5d       	subi	r26, 0xD0	; 208
    14b6:	aa 33       	cpi	r26, 0x3A	; 58
    14b8:	08 f0       	brcs	.+2      	; 0x14bc <__utoa_common+0x20>
    14ba:	a9 5d       	subi	r26, 0xD9	; 217
    14bc:	a1 93       	st	Z+, r26
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	79 f7       	brne	.-34     	; 0x14a0 <__utoa_common+0x4>
    14c2:	b1 11       	cpse	r27, r1
    14c4:	b1 93       	st	Z+, r27
    14c6:	11 92       	st	Z+, r1
    14c8:	cb 01       	movw	r24, r22
    14ca:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <strrev>

000014ce <strrev>:
    14ce:	dc 01       	movw	r26, r24
    14d0:	fc 01       	movw	r30, r24
    14d2:	67 2f       	mov	r22, r23
    14d4:	71 91       	ld	r23, Z+
    14d6:	77 23       	and	r23, r23
    14d8:	e1 f7       	brne	.-8      	; 0x14d2 <strrev+0x4>
    14da:	32 97       	sbiw	r30, 0x02	; 2
    14dc:	04 c0       	rjmp	.+8      	; 0x14e6 <strrev+0x18>
    14de:	7c 91       	ld	r23, X
    14e0:	6d 93       	st	X+, r22
    14e2:	70 83       	st	Z, r23
    14e4:	62 91       	ld	r22, -Z
    14e6:	ae 17       	cp	r26, r30
    14e8:	bf 07       	cpc	r27, r31
    14ea:	c8 f3       	brcs	.-14     	; 0x14de <strrev+0x10>
    14ec:	08 95       	ret

000014ee <_exit>:
    14ee:	f8 94       	cli

000014f0 <__stop_program>:
    14f0:	ff cf       	rjmp	.-2      	; 0x14f0 <__stop_program>
